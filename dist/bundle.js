/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./dist/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./dist/index.js":
/*!***********************!*\
  !*** ./dist/index.js ***!
  \***********************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst HostedMoneroAPIClient_Base_1 = __importDefault(__webpack_require__(/*! ../libs/mymonero-app-js/local_modules/HostedMoneroAPIClient/HostedMoneroAPIClient_Base */ \"./libs/mymonero-app-js/local_modules/HostedMoneroAPIClient/HostedMoneroAPIClient_Base.js\"));\r\nconst BackgroundResponseParser_web_1 = __importDefault(__webpack_require__(/*! ../libs/mymonero-app-js/local_modules/HostedMoneroAPIClient/BackgroundResponseParser.web */ \"./libs/mymonero-app-js/local_modules/HostedMoneroAPIClient/BackgroundResponseParser.web.js\"));\r\nconst index_1 = __webpack_require__(/*! ../libs/mymonero-app-js/local_modules/mymonero_core_js/index */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/index.js\");\r\nconst request_1 = __importDefault(__webpack_require__(/*! request */ \"./node_modules/xhr/index.js\"));\r\nconst bignumber_js_1 = __webpack_require__(/*! bignumber.js */ \"./node_modules/bignumber.js/bignumber.js\");\r\nconst DEBUG = true;\r\n/**\r\n * Caches the asynchronous loaded monero_utils object.\r\n *\r\n * @remarks\r\n * The monero_utils import is a promise but has synchronous methods\r\n * that we want to use without forcing whole call chains into async/awaits.\r\n */\r\nclass MoneroUtilLoader {\r\n    static get util() {\r\n        if (!this._util) {\r\n            throw new Error(\"MoneroUtilLoader has not been loaded.\");\r\n        }\r\n        return this._util;\r\n    }\r\n    static load() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!this._util) {\r\n                this._util = yield index_1.monero_utils_promise;\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * A promise-based class for interacting with the MyMonero API.\r\n *\r\n * @remarks\r\n * Uses helper methods from the mymonero web app which does all\r\n * the client-side heavy lifting required for constructing\r\n * transactions from possible-unspent outputs and key image processing\r\n * for determining the account's transaction history.\r\n *\r\n */\r\nclass MoneroWallet {\r\n    get addressKeys() {\r\n        return this._addressKeys;\r\n    }\r\n    constructor(walletData) {\r\n        this._addressKeys = walletData;\r\n        // Define options required by the MyMonero API client.\r\n        let apiClientOptions = {\r\n            appUserAgent_product: 'blockstack-monero',\r\n            appUserAgent_version: '0.0.1',\r\n            request_conformant_module: request_1.default\r\n        };\r\n        // Define the context object with the response parser required by the client.\r\n        let apiClientContext = {\r\n            backgroundAPIResponseParser: new BackgroundResponseParser_web_1.default()\r\n        };\r\n        // Instantiate an instance of the MyMonero API client.\r\n        this._apiClient = new HostedMoneroAPIClient_Base_1.default(apiClientOptions, apiClientContext);\r\n    }\r\n    /** Gets the network type value expected by monero_utils. */\r\n    static getNetworkID(testnet) {\r\n        if (testnet) {\r\n            return index_1.nettype_utils.network_type.TESTNET;\r\n        }\r\n        else {\r\n            return index_1.nettype_utils.network_type.MAINNET;\r\n        }\r\n    }\r\n    /** Generates a new set of account keys. */\r\n    static createNewAddress(localeLanguageCode = \"en-US\", testnet = false) {\r\n        const networkType = this.getNetworkID(testnet);\r\n        let keys = MoneroUtilLoader.util.newly_created_wallet(localeLanguageCode, networkType);\r\n        let result = {\r\n            mnemonic: keys.mnemonic_string,\r\n            mnemonicLanguage: keys.mnemonic_language,\r\n            publicAddress: keys.address_string,\r\n            privateKeys: {\r\n                spend: keys.sec_spendKey_string,\r\n                view: keys.sec_viewKey_string,\r\n            },\r\n            publicKeys: {\r\n                spend: keys.pub_spendKey_string,\r\n                view: keys.pub_viewKey_string\r\n            }\r\n        };\r\n        return result;\r\n    }\r\n    static createAddressKeysFromMnemonic(mnemonic, wordSetLanguage = \"English\", testnet = false) {\r\n        const networkType = this.getNetworkID(testnet);\r\n        // Create keys from mnemonic\r\n        const keys = MoneroUtilLoader.util.seed_and_keys_from_mnemonic(mnemonic, networkType);\r\n        let result = {\r\n            mnemonic: mnemonic,\r\n            mnemonicLanguage: keys.mnemonic_language,\r\n            publicAddress: keys.address_string,\r\n            privateKeys: {\r\n                spend: keys.sec_spendKey_string,\r\n                view: keys.sec_viewKey_string,\r\n            },\r\n            publicKeys: {\r\n                spend: keys.pub_spendKey_string,\r\n                view: keys.pub_viewKey_string\r\n            }\r\n        };\r\n        return result;\r\n    }\r\n    static createAddressKeysFromPrivateKey(privateKey, wordSetLanguage = \"English\", testnet = false) {\r\n        // Create mnemonic from the given private key.\r\n        const mnemonic = MoneroUtilLoader.util.mnemonic_from_seed(privateKey, wordSetLanguage);\r\n        return this.createAddressKeysFromMnemonic(mnemonic, wordSetLanguage, testnet);\r\n    }\r\n    getBalanceInfo() {\r\n        // Wrap the client callback oriented function in a Promise.\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                this._apiClient.AddressInfo_returningRequestHandle(this._addressKeys.publicAddress, this._addressKeys.privateKeys.view, this._addressKeys.publicKeys.spend, this._addressKeys.privateKeys.spend, (err, ...result) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    }\r\n                    // The MyMonero API client returns all this data in the form of callback args, oh my.\r\n                    // Whip this argument list into a manageable object.\r\n                    let info = {\r\n                        // These amount values are in integer (small units / piconero), convert to human readable string.\r\n                        totalReceived: index_1.monero_amount_format_utils.formatMoney(result[0]),\r\n                        lockedBalance: index_1.monero_amount_format_utils.formatMoney(result[1]),\r\n                        totalSent: index_1.monero_amount_format_utils.formatMoney(result[2]),\r\n                        spentOutputs: result[3],\r\n                        accountScannedTxHeight: result[4],\r\n                        accountScannedBlockHeight: result[5],\r\n                        accountScanStartHeight: result[6],\r\n                        transactionHeight: result[7],\r\n                        blockchainHeight: result[8],\r\n                        ratesBySymbol: result[9]\r\n                    };\r\n                    resolve(info);\r\n                });\r\n            }\r\n            catch (err) {\r\n                // Internal error.\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n    getTransactions() {\r\n        // Wrap the client callback oriented function in a Promise.\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                this._apiClient.AddressTransactions_returningRequestHandle(this._addressKeys.publicAddress, this._addressKeys.privateKeys.view, this._addressKeys.publicKeys.spend, this._addressKeys.privateKeys.spend, (err, ...result) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    }\r\n                    // Convert some properties on the transaction objects to be more useful for us.\r\n                    let resultTxs = result[5];\r\n                    let txs = resultTxs.map(tx => ({\r\n                        amount: new bignumber_js_1.BigNumber(tx.amount.toString()),\r\n                        totalReceived: new bignumber_js_1.BigNumber(tx.total_received.toString()),\r\n                        totalSent: new bignumber_js_1.BigNumber(tx.total_sent.toString()),\r\n                        coinbase: tx.coinbase,\r\n                        hash: tx.hash,\r\n                        height: tx.height,\r\n                        id: tx.id,\r\n                        mempool: tx.mempool,\r\n                        mixin: tx.mixin,\r\n                        timestamp: tx.timestamp,\r\n                        unlockTime: tx.unlock_time\r\n                    }));\r\n                    // Turn these unruly callback function args into an object. \r\n                    let txResult = {\r\n                        accountScannedTxHeight: result[0],\r\n                        accountScannedBlockHeight: result[1],\r\n                        accountScanStartHeight: result[2],\r\n                        transactionHeight: result[3],\r\n                        blockchainHeight: result[4],\r\n                        transactions: txs\r\n                    };\r\n                    resolve(txResult);\r\n                });\r\n            }\r\n            catch (err) {\r\n                // Internal error.\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n    sendFunds(toAddress, amount, testnet = false) {\r\n        // Wrap the client callback oriented function in a Promise.\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                // Convert the BigNumber to a string.\r\n                let amountString = amount.toString();\r\n                const networkType = MoneroWallet.getNetworkID(testnet);\r\n                // Some hardcoded options (that not specifiable in GUI yet..)\r\n                const txPriority = 1; // normal priority\r\n                const paymentId = null;\r\n                const isSweep = false;\r\n                index_1.monero_sendingFunds_utils.SendFunds(toAddress, networkType, amountString, isSweep, this._addressKeys.publicAddress, this._addressKeys.privateKeys, this._addressKeys.publicKeys, this._apiClient, paymentId, txPriority, code => {\r\n                    // Intermediate status callback..\r\n                    console.log(\"Send funds step \" + code + \": \" + index_1.monero_sendingFunds_utils.SendFunds_ProcessStep_MessageSuffix[code]);\r\n                }, (...result) => {\r\n                    // Transaction successful callback..\r\n                    resolve({\r\n                        toAddress: result[0],\r\n                        sentAmount: result[1],\r\n                        paymentId: result[2],\r\n                        txHash: result[3],\r\n                        txFee: result[4],\r\n                        txKey: result[5],\r\n                        mixin: result[6]\r\n                    });\r\n                }, err => {\r\n                    // Transaction problem callback..\r\n                    reject(err);\r\n                });\r\n            }\r\n            catch (err) {\r\n                // Internal error.\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n}\r\nfunction tests() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        yield MoneroUtilLoader.load();\r\n        let keys = MoneroWallet.createAddressKeysFromMnemonic(\"input betting five balding update licks hive february dogs peaches ongoing digit five\");\r\n        let moneroWallet = new MoneroWallet(keys);\r\n        let txs = yield moneroWallet.getTransactions();\r\n        console.log(txs);\r\n        let walletInfo = yield moneroWallet.getBalanceInfo();\r\n        console.log(walletInfo);\r\n        let toAddress = \"43Pzz5GFHzG4VSvoR1zievZmQ3ABZppFagWsQkdpLwV2JMmu2LLU5GgHmSbVqc7dBMAYi49BHXD3cTLWX3D4LX8k4q1AXQf\";\r\n        let sendResult = yield moneroWallet.sendFunds(toAddress, new bignumber_js_1.BigNumber(\"0.00001\"));\r\n        console.log(sendResult);\r\n    });\r\n}\r\ntests().then(result => {\r\n    console.log(result);\r\n})\r\n    .catch(err => {\r\n    console.log(err);\r\n});\r\n/*\r\n GUI TODO\r\n\r\n * Show list of transactions (link to a block explorer).\r\n * Show address/key details modal.\r\n * Send transaction modal.\r\n * Manual refresh button.\r\n * Refresh every 30s.\r\n *\r\n *\r\n\r\n Experiment:\r\n * Porting monero js code for the features (unspent output processing, tx key image process) to C# and in Blazor.\r\n\r\n */\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./dist/index.js\n");

/***/ }),

/***/ "./libs/mymonero-app-js/local_modules/HostedMoneroAPIClient/BackgroundResponseParser.web.js":
/*!**************************************************************************************************!*\
  !*** ./libs/mymonero-app-js/local_modules/HostedMoneroAPIClient/BackgroundResponseParser.web.js ***!
  \**************************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(setImmediate) {// Copyright (c) 2014-2018, MyMonero.com\r\n//\r\n// All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without modification, are\r\n// permitted provided that the following conditions are met:\r\n//\r\n// 1. Redistributions of source code must retain the above copyright notice, this list of\r\n//\tconditions and the following disclaimer.\r\n//\r\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list\r\n//\tof conditions and the following disclaimer in the documentation and/or other\r\n//\tmaterials provided with the distribution.\r\n//\r\n// 3. Neither the name of the copyright holder nor the names of its contributors may be\r\n//\tused to endorse or promote products derived from this software without specific\r\n//\tprior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY\r\n// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\r\n// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\r\n// THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\r\n// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\r\n// THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n//\r\n\r\n//\r\n// In the future this could implement web workers\r\nconst response_parser_utils = __webpack_require__(/*! ../mymonero_core_js/hostAPI/response_parser_utils */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/hostAPI/response_parser_utils.js\")\r\nconst monero_keyImage_cache_utils = __webpack_require__(/*! ../mymonero_core_js/monero_utils/monero_keyImage_cache_utils */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_keyImage_cache_utils.js\")\r\nconst monero_utils_promise = __webpack_require__(/*! ../mymonero_core_js/monero_utils/monero_utils */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_utils.js\")({})\r\n//\r\nclass BackgroundResponseParser\r\n{\r\n\tconstructor(options, context)\r\n\t{\r\n\t}\r\n\t//\r\n\t// Runtime - Accessors - Interface\r\n\t//\r\n\tParsed_AddressInfo(\r\n\t\tdata,\r\n\t\taddress,\r\n\t\tview_key__private,\r\n\t\tspend_key__public,\r\n\t\tspend_key__private,\r\n\t\tfn //: (err?, returnValuesByKey?) -> Void\r\n\t) {\r\n\t\tmonero_utils_promise.then(function(monero_utils)\r\n\t\t{\r\n\t\t\tresponse_parser_utils.Parsed_AddressInfo__keyImageManaged(\r\n\t\t\t\tdata,\r\n\t\t\t\taddress,\r\n\t\t\t\tview_key__private,\r\n\t\t\t\tspend_key__public,\r\n\t\t\t\tspend_key__private,\r\n\t\t\t\tmonero_utils,\r\n\t\t\t\tfunction(err, returnValuesByKey)\r\n\t\t\t\t{\r\n\t\t\t\t\tfn(err, returnValuesByKey)\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t})\r\n\t}\r\n\tParsed_AddressTransactions(\r\n\t\tdata,\r\n\t\taddress,\r\n\t\tview_key__private,\r\n\t\tspend_key__public,\r\n\t\tspend_key__private,\r\n\t\tfn //: (err?, returnValuesByKey?) -> Void\r\n\t) {\r\n\t\tmonero_utils_promise.then(function(monero_utils)\r\n\t\t{\r\n\t\t\tresponse_parser_utils.Parsed_AddressTransactions__keyImageManaged(\r\n\t\t\t\tdata,\r\n\t\t\t\taddress,\r\n\t\t\t\tview_key__private,\r\n\t\t\t\tspend_key__public,\r\n\t\t\t\tspend_key__private,\r\n\t\t\t\tmonero_utils,\r\n\t\t\t\tfunction(err, returnValuesByKey)\r\n\t\t\t\t{\r\n\t\t\t\t\tfn(err, returnValuesByKey)\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t})\r\n\t}\r\n\tParsed_UnspentOuts(\r\n\t\tdata,\r\n\t\taddress,\r\n\t\tview_key__private,\r\n\t\tspend_key__public,\r\n\t\tspend_key__private,\r\n\t\tfn //: (err?, returnValuesByKey?) -> Void\r\n\t) {\r\n\t\tmonero_utils_promise.then(function(monero_utils)\r\n\t\t{\r\n\t\t\tresponse_parser_utils.Parsed_UnspentOuts__keyImageManaged(\r\n\t\t\t\tdata,\r\n\t\t\t\taddress,\r\n\t\t\t\tview_key__private,\r\n\t\t\t\tspend_key__public,\r\n\t\t\t\tspend_key__private,\r\n\t\t\t\tmonero_utils,\r\n\t\t\t\tfunction(err, returnValuesByKey)\r\n\t\t\t\t{\r\n\t\t\t\t\tfn(err, returnValuesByKey)\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t})\r\n\t}\r\n\t//\r\n\tDeleteManagedKeyImagesForWalletWith(\r\n\t\taddress,\r\n\t\tfn // ((err) -> Void)? \r\n\t) {\r\n\t\tmonero_keyImage_cache_utils.DeleteManagedKeyImagesForWalletWith(address)\r\n\t\tif (fn) {\r\n\t\t\tsetImmediate(fn)\r\n\t\t}\r\n\t}\r\n}\r\nmodule.exports = BackgroundResponseParser\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../node_modules/timers-browserify/main.js */ \"./node_modules/timers-browserify/main.js\").setImmediate))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9saWJzL215bW9uZXJvLWFwcC1qcy9sb2NhbF9tb2R1bGVzL0hvc3RlZE1vbmVyb0FQSUNsaWVudC9CYWNrZ3JvdW5kUmVzcG9uc2VQYXJzZXIud2ViLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbGlicy9teW1vbmVyby1hcHAtanMvbG9jYWxfbW9kdWxlcy9Ib3N0ZWRNb25lcm9BUElDbGllbnQvQmFja2dyb3VuZFJlc3BvbnNlUGFyc2VyLndlYi5qcz9iNjMzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAxNC0yMDE4LCBNeU1vbmVyby5jb21cclxuLy9cclxuLy8gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy9cclxuLy8gUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgYXJlXHJcbi8vIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxyXG4vL1xyXG4vLyAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgbGlzdCBvZlxyXG4vL1x0Y29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxyXG4vL1xyXG4vLyAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgbGlzdFxyXG4vL1x0b2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlclxyXG4vL1x0bWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cclxuLy9cclxuLy8gMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgY29weXJpZ2h0IGhvbGRlciBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlXHJcbi8vXHR1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljXHJcbi8vXHRwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXHJcbi8vXHJcbi8vIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORCBBTllcclxuLy8gRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GXHJcbi8vIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMXHJcbi8vIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLFxyXG4vLyBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sXHJcbi8vIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xyXG4vLyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCxcclxuLy8gU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GXHJcbi8vIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cclxuLy9cclxuXCJ1c2Ugc3RyaWN0XCJcclxuLy9cclxuLy8gSW4gdGhlIGZ1dHVyZSB0aGlzIGNvdWxkIGltcGxlbWVudCB3ZWIgd29ya2Vyc1xyXG5jb25zdCByZXNwb25zZV9wYXJzZXJfdXRpbHMgPSByZXF1aXJlKCcuLi9teW1vbmVyb19jb3JlX2pzL2hvc3RBUEkvcmVzcG9uc2VfcGFyc2VyX3V0aWxzJylcclxuY29uc3QgbW9uZXJvX2tleUltYWdlX2NhY2hlX3V0aWxzID0gcmVxdWlyZSgnLi4vbXltb25lcm9fY29yZV9qcy9tb25lcm9fdXRpbHMvbW9uZXJvX2tleUltYWdlX2NhY2hlX3V0aWxzJylcclxuY29uc3QgbW9uZXJvX3V0aWxzX3Byb21pc2UgPSByZXF1aXJlKCcuLi9teW1vbmVyb19jb3JlX2pzL21vbmVyb191dGlscy9tb25lcm9fdXRpbHMnKSh7fSlcclxuLy9cclxuY2xhc3MgQmFja2dyb3VuZFJlc3BvbnNlUGFyc2VyXHJcbntcclxuXHRjb25zdHJ1Y3RvcihvcHRpb25zLCBjb250ZXh0KVxyXG5cdHtcclxuXHR9XHJcblx0Ly9cclxuXHQvLyBSdW50aW1lIC0gQWNjZXNzb3JzIC0gSW50ZXJmYWNlXHJcblx0Ly9cclxuXHRQYXJzZWRfQWRkcmVzc0luZm8oXHJcblx0XHRkYXRhLFxyXG5cdFx0YWRkcmVzcyxcclxuXHRcdHZpZXdfa2V5X19wcml2YXRlLFxyXG5cdFx0c3BlbmRfa2V5X19wdWJsaWMsXHJcblx0XHRzcGVuZF9rZXlfX3ByaXZhdGUsXHJcblx0XHRmbiAvLzogKGVycj8sIHJldHVyblZhbHVlc0J5S2V5PykgLT4gVm9pZFxyXG5cdCkge1xyXG5cdFx0bW9uZXJvX3V0aWxzX3Byb21pc2UudGhlbihmdW5jdGlvbihtb25lcm9fdXRpbHMpXHJcblx0XHR7XHJcblx0XHRcdHJlc3BvbnNlX3BhcnNlcl91dGlscy5QYXJzZWRfQWRkcmVzc0luZm9fX2tleUltYWdlTWFuYWdlZChcclxuXHRcdFx0XHRkYXRhLFxyXG5cdFx0XHRcdGFkZHJlc3MsXHJcblx0XHRcdFx0dmlld19rZXlfX3ByaXZhdGUsXHJcblx0XHRcdFx0c3BlbmRfa2V5X19wdWJsaWMsXHJcblx0XHRcdFx0c3BlbmRfa2V5X19wcml2YXRlLFxyXG5cdFx0XHRcdG1vbmVyb191dGlscyxcclxuXHRcdFx0XHRmdW5jdGlvbihlcnIsIHJldHVyblZhbHVlc0J5S2V5KVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGZuKGVyciwgcmV0dXJuVmFsdWVzQnlLZXkpXHJcblx0XHRcdFx0fVxyXG5cdFx0XHQpXHJcblx0XHR9KVxyXG5cdH1cclxuXHRQYXJzZWRfQWRkcmVzc1RyYW5zYWN0aW9ucyhcclxuXHRcdGRhdGEsXHJcblx0XHRhZGRyZXNzLFxyXG5cdFx0dmlld19rZXlfX3ByaXZhdGUsXHJcblx0XHRzcGVuZF9rZXlfX3B1YmxpYyxcclxuXHRcdHNwZW5kX2tleV9fcHJpdmF0ZSxcclxuXHRcdGZuIC8vOiAoZXJyPywgcmV0dXJuVmFsdWVzQnlLZXk/KSAtPiBWb2lkXHJcblx0KSB7XHJcblx0XHRtb25lcm9fdXRpbHNfcHJvbWlzZS50aGVuKGZ1bmN0aW9uKG1vbmVyb191dGlscylcclxuXHRcdHtcclxuXHRcdFx0cmVzcG9uc2VfcGFyc2VyX3V0aWxzLlBhcnNlZF9BZGRyZXNzVHJhbnNhY3Rpb25zX19rZXlJbWFnZU1hbmFnZWQoXHJcblx0XHRcdFx0ZGF0YSxcclxuXHRcdFx0XHRhZGRyZXNzLFxyXG5cdFx0XHRcdHZpZXdfa2V5X19wcml2YXRlLFxyXG5cdFx0XHRcdHNwZW5kX2tleV9fcHVibGljLFxyXG5cdFx0XHRcdHNwZW5kX2tleV9fcHJpdmF0ZSxcclxuXHRcdFx0XHRtb25lcm9fdXRpbHMsXHJcblx0XHRcdFx0ZnVuY3Rpb24oZXJyLCByZXR1cm5WYWx1ZXNCeUtleSlcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRmbihlcnIsIHJldHVyblZhbHVlc0J5S2V5KVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0KVxyXG5cdFx0fSlcclxuXHR9XHJcblx0UGFyc2VkX1Vuc3BlbnRPdXRzKFxyXG5cdFx0ZGF0YSxcclxuXHRcdGFkZHJlc3MsXHJcblx0XHR2aWV3X2tleV9fcHJpdmF0ZSxcclxuXHRcdHNwZW5kX2tleV9fcHVibGljLFxyXG5cdFx0c3BlbmRfa2V5X19wcml2YXRlLFxyXG5cdFx0Zm4gLy86IChlcnI/LCByZXR1cm5WYWx1ZXNCeUtleT8pIC0+IFZvaWRcclxuXHQpIHtcclxuXHRcdG1vbmVyb191dGlsc19wcm9taXNlLnRoZW4oZnVuY3Rpb24obW9uZXJvX3V0aWxzKVxyXG5cdFx0e1xyXG5cdFx0XHRyZXNwb25zZV9wYXJzZXJfdXRpbHMuUGFyc2VkX1Vuc3BlbnRPdXRzX19rZXlJbWFnZU1hbmFnZWQoXHJcblx0XHRcdFx0ZGF0YSxcclxuXHRcdFx0XHRhZGRyZXNzLFxyXG5cdFx0XHRcdHZpZXdfa2V5X19wcml2YXRlLFxyXG5cdFx0XHRcdHNwZW5kX2tleV9fcHVibGljLFxyXG5cdFx0XHRcdHNwZW5kX2tleV9fcHJpdmF0ZSxcclxuXHRcdFx0XHRtb25lcm9fdXRpbHMsXHJcblx0XHRcdFx0ZnVuY3Rpb24oZXJyLCByZXR1cm5WYWx1ZXNCeUtleSlcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRmbihlcnIsIHJldHVyblZhbHVlc0J5S2V5KVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0KVxyXG5cdFx0fSlcclxuXHR9XHJcblx0Ly9cclxuXHREZWxldGVNYW5hZ2VkS2V5SW1hZ2VzRm9yV2FsbGV0V2l0aChcclxuXHRcdGFkZHJlc3MsXHJcblx0XHRmbiAvLyAoKGVycikgLT4gVm9pZCk/IFxyXG5cdCkge1xyXG5cdFx0bW9uZXJvX2tleUltYWdlX2NhY2hlX3V0aWxzLkRlbGV0ZU1hbmFnZWRLZXlJbWFnZXNGb3JXYWxsZXRXaXRoKGFkZHJlc3MpXHJcblx0XHRpZiAoZm4pIHtcclxuXHRcdFx0c2V0SW1tZWRpYXRlKGZuKVxyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5tb2R1bGUuZXhwb3J0cyA9IEJhY2tncm91bmRSZXNwb25zZVBhcnNlciJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./libs/mymonero-app-js/local_modules/HostedMoneroAPIClient/BackgroundResponseParser.web.js\n");

/***/ }),

/***/ "./libs/mymonero-app-js/local_modules/HostedMoneroAPIClient/HostedMoneroAPIClient_Base.js":
/*!************************************************************************************************!*\
  !*** ./libs/mymonero-app-js/local_modules/HostedMoneroAPIClient/HostedMoneroAPIClient_Base.js ***!
  \************************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright (c) 2014-2018, MyMonero.com\r\n//\r\n// All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without modification, are\r\n// permitted provided that the following conditions are met:\r\n//\r\n// 1. Redistributions of source code must retain the above copyright notice, this list of\r\n//\tconditions and the following disclaimer.\r\n//\r\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list\r\n//\tof conditions and the following disclaimer in the documentation and/or other\r\n//\tmaterials provided with the distribution.\r\n//\r\n// 3. Neither the name of the copyright holder nor the names of its contributors may be\r\n//\tused to endorse or promote products derived from this software without specific\r\n//\tprior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY\r\n// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\r\n// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\r\n// THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\r\n// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\r\n// THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n\r\n\r\n//\r\nconst async = __webpack_require__(/*! async */ \"./node_modules/async/dist/async.js\")\r\n//\r\nconst JSBigInt = __webpack_require__(/*! ../mymonero_core_js/cryptonote_utils/biginteger */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/cryptonote_utils/biginteger.js\").BigInteger // important: grab defined export\r\nconst monero_config = __webpack_require__(/*! ../mymonero_core_js/monero_utils/monero_config */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_config.js\")\r\nconst net_service_utils = __webpack_require__(/*! ../mymonero_core_js/hostAPI/net_service_utils */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/hostAPI/net_service_utils.js\")\r\n//\r\nconst config__MyMonero = __webpack_require__(/*! ./config__MyMonero */ \"./libs/mymonero-app-js/local_modules/HostedMoneroAPIClient/config__MyMonero.js\")\r\n//\r\nclass HostedMoneroAPIClient_Base\r\n{\r\n\t//\r\n\t// Lifecycle - Initialization\r\n\tconstructor(options, context)\r\n\t{\r\n\t\tvar self = this\r\n\t\tself.options = options\r\n\t\tself.context = context\r\n\t\t//\r\n\t\tself.request = options.request_conformant_module\r\n\t\tif (!self.request) {\r\n\t\t\tthrow `${self.constructor.name} requires an options.request_conformant_module such as require('request' / 'xhr')`\r\n\t\t}\r\n\t\t//\r\n\t\tself.setup()\r\n\t}\r\n\tsetup()\r\n\t{\r\n\t\tvar self = this\r\n\t\t{ // options\r\n\t\t\tself.appUserAgent_product = self.options.appUserAgent_product\r\n\t\t\tif (!self.appUserAgent_product) {\r\n\t\t\t\tthrow `${self.constructor.name} requires options.appUserAgent_product`\r\n\t\t\t}\r\n\t\t\tself.appUserAgent_version = self.options.appUserAgent_version\r\n\t\t\tif (!self.appUserAgent_version) {\r\n\t\t\t\tthrow `${self.constructor.name} requires options.appUserAgent_version`\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t//\r\n\t// Runtime - Accessors - Private - Requests\r\n\t_new_apiAddress_authority() \r\n\t{ // overridable\r\n\t\treturn config__MyMonero.API__authority\r\n\t}\r\n\t//\r\n\t// Runtime - Accessors - Public - Requests\r\n\tLogIn(address, view_key__private, generated_locally, fn)\r\n\t{ // fn: (err?, new_address?) -> RequestHandle\r\n\t\tconst self = this\r\n\t\tconst endpointPath = \"login\"\r\n\t\tconst parameters = net_service_utils.New_ParametersForWalletRequest(address, view_key__private)\r\n\t\tparameters.create_account = true\r\n\t\tparameters.generated_locally = generated_locally\r\n\t\tconst requestHandle = net_service_utils.HTTPRequest(\r\n\t\t\tself.request,\r\n\t\t\tself._new_apiAddress_authority(),\r\n\t\t\tendpointPath, \r\n\t\t\tparameters,\r\n\t\t\tfunction(err, data)\r\n\t\t\t{\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\tfn(err)\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\t__proceedTo_parseAndCallBack(data)\r\n\t\t\t}\r\n\t\t)\r\n\t\tfunction __proceedTo_parseAndCallBack(data)\r\n\t\t{\r\n\t\t\tconst new_address = data.new_address\r\n\t\t\tconst received__generated_locally = data.generated_locally\r\n\t\t\tconst start_height = data.start_height\r\n\t\t\t// console.log(\"data from login: \", data)\r\n\t\t\t// TODO? parse anything else?\r\n\t\t\t//\r\n\t\t\tfn(null, new_address, received__generated_locally, start_height)\r\n\t\t}\r\n\t\treturn requestHandle\r\n\t}\r\n\t//\r\n\t// Syncing\r\n\tAddressInfo_returningRequestHandle(\r\n\t\taddress,\r\n\t\tview_key__private,\r\n\t\tspend_key__public,\r\n\t\tspend_key__private,\r\n\t\tfn\r\n\t) {  // -> RequestHandle\r\n\t\tconst self = this\r\n\t\tconst endpointPath = \"get_address_info\"\r\n\t\tconst parameters = net_service_utils.New_ParametersForWalletRequest(address, view_key__private)\r\n\t\tconst requestHandle = net_service_utils.HTTPRequest(\r\n\t\t\tself.request,\r\n\t\t\tself._new_apiAddress_authority(),\r\n\t\t\tendpointPath,\r\n\t\t\tparameters,\r\n\t\t\tfunction(err, data)\r\n\t\t\t{\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\tfn(err)\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\t__proceedTo_parseAndCallBack(data)\r\n\t\t\t}\r\n\t\t)\r\n\t\tfunction __proceedTo_parseAndCallBack(data)\r\n\t\t{\r\n\t\t\tself.context.backgroundAPIResponseParser.Parsed_AddressInfo(\r\n\t\t\t\t// key-image-managed - just be sure to dekete your wallet's key img cache when you tear down\r\n\t\t\t\tdata,\r\n\t\t\t\taddress,\r\n\t\t\t\tview_key__private,\r\n\t\t\t\tspend_key__public,\r\n\t\t\t\tspend_key__private,\r\n\t\t\t\tfunction(err, returnValuesByKey)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\tfn(err)\r\n\t\t\t\t\t\treturn\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar total_received_JSBigInt;\r\n\t\t\t\t\tconst total_received_String = returnValuesByKey.total_received_String\r\n\t\t\t\t\tif (total_received_String) {\r\n\t\t\t\t\t\ttotal_received_JSBigInt = new JSBigInt(total_received_String)\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttotal_received_JSBigInt = new JSBigInt(0)\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//\r\n\t\t\t\t\tvar locked_balance_JSBigInt;\r\n\t\t\t\t\tconst locked_balance_String = returnValuesByKey.locked_balance_String\r\n\t\t\t\t\tif (locked_balance_String) {\r\n\t\t\t\t\t\tlocked_balance_JSBigInt = new JSBigInt(locked_balance_String)\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tlocked_balance_JSBigInt = new JSBigInt(0)\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//\r\n\t\t\t\t\tvar total_sent_JSBigInt;\r\n\t\t\t\t\tconst total_sent_String = returnValuesByKey.total_sent_String\r\n\t\t\t\t\tif (total_sent_String) {\r\n\t\t\t\t\t\ttotal_sent_JSBigInt = new JSBigInt(total_sent_String)\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttotal_sent_JSBigInt = new JSBigInt(0)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfn(\r\n\t\t\t\t\t\terr,\r\n\t\t\t\t\t\t//\r\n\t\t\t\t\t\ttotal_received_JSBigInt,\r\n\t\t\t\t\t\tlocked_balance_JSBigInt,\r\n\t\t\t\t\t\ttotal_sent_JSBigInt,\r\n\t\t\t\t\t\t//\r\n\t\t\t\t\t\treturnValuesByKey.spent_outputs,\r\n\t\t\t\t\t\treturnValuesByKey.account_scanned_tx_height,\r\n\t\t\t\t\t\treturnValuesByKey.account_scanned_block_height,\r\n\t\t\t\t\t\treturnValuesByKey.account_scan_start_height,\r\n\t\t\t\t\t\treturnValuesByKey.transaction_height,\r\n\t\t\t\t\t\treturnValuesByKey.blockchain_height,\r\n\t\t\t\t\t\t//\r\n\t\t\t\t\t\treturnValuesByKey.ratesBySymbol\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t}\r\n\t\treturn requestHandle\r\n\t}\r\n\tAddressTransactions_returningRequestHandle(\r\n\t\taddress,\r\n\t\tview_key__private,\r\n\t\tspend_key__public,\r\n\t\tspend_key__private,\r\n\t\tfn\r\n\t) { // -> RequestHandle\r\n\t\tconst self = this\r\n\t\tconst endpointPath = \"get_address_txs\"\r\n\t\tconst parameters = net_service_utils.New_ParametersForWalletRequest(address, view_key__private)\r\n\t\tconst requestHandle = net_service_utils.HTTPRequest(\r\n\t\t\tself.request,\r\n\t\t\tself._new_apiAddress_authority(),\r\n\t\t\tendpointPath,\r\n\t\t\tparameters,\r\n\t\t\tfunction(err, data)\r\n\t\t\t{\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\tfn(err)\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\t__parseAndCallBack(data)\r\n\t\t\t}\r\n\t\t)\r\n\t\tfunction __parseAndCallBack(data)\r\n\t\t{\r\n\t\t\tself.context.backgroundAPIResponseParser.Parsed_AddressTransactions(\r\n\t\t\t\tdata,\r\n\t\t\t\taddress,\r\n\t\t\t\tview_key__private,\r\n\t\t\t\tspend_key__public,\r\n\t\t\t\tspend_key__private,\r\n\t\t\t\tfunction(err, returnValuesByKey)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\tfn(err)\r\n\t\t\t\t\t\treturn\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//\r\n\t\t\t\t\tconst transactions = returnValuesByKey.serialized_transactions\r\n\t\t\t\t\tfor (let transaction of transactions) {\r\n\t\t\t\t\t\ttransaction.amount = new JSBigInt(transaction.amount)\r\n\t\t\t\t\t\tif (typeof transaction.total_sent !== 'undefined' && transaction.total_sent !== null) {\r\n\t\t\t\t\t\t\ttransaction.total_sent = new JSBigInt(transaction.total_sent)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\ttransaction.timestamp = new Date(transaction.timestamp)\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//\r\n\t\t\t\t\tfn(\r\n\t\t\t\t\t\terr,\r\n\t\t\t\t\t\t//\r\n\t\t\t\t\t\treturnValuesByKey.account_scanned_height,\r\n\t\t\t\t\t\treturnValuesByKey.account_scanned_block_height,\r\n\t\t\t\t\t\treturnValuesByKey.account_scan_start_height,\r\n\t\t\t\t\t\treturnValuesByKey.transaction_height,\r\n\t\t\t\t\t\treturnValuesByKey.blockchain_height,\r\n\t\t\t\t\t\t//\r\n\t\t\t\t\t\ttransactions\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t}\r\n\t\treturn requestHandle\r\n\t}\r\n\t//\r\n\t// Getting wallet txs import info\r\n\tImportRequestInfoAndStatus(\r\n\t\taddress,\r\n\t\tview_key__private,\r\n\t\tfn\r\n\t) { // -> RequestHandle\r\n\t\tconst self = this\r\n\t\tconst endpointPath = \"import_wallet_request\"\r\n\t\tconst parameters = net_service_utils.New_ParametersForWalletRequest(address, view_key__private)\r\n\t\tnet_service_utils.AddUserAgentParamters(\r\n\t\t\tparameters,\r\n\t\t\tself.appUserAgent_product, \r\n\t\t\tself.appUserAgent_version\r\n\t\t)\r\n\t\tconst requestHandle = net_service_utils.HTTPRequest(\r\n\t\t\tself.request,\r\n\t\t\tself._new_apiAddress_authority(),\r\n\t\t\tendpointPath,\r\n\t\t\tparameters,\r\n\t\t\tfunction(err, data)\r\n\t\t\t{\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\tfn(err)\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\t__proceedTo_parseAndCallBack(data)\r\n\t\t\t}\r\n\t\t)\r\n\t\tfunction __proceedTo_parseAndCallBack(data)\r\n\t\t{\r\n\t\t\tconst payment_id = data.payment_id;\r\n\t\t\tconst payment_address = data.payment_address;\r\n\t\t\tconst import_fee__JSBigInt = new JSBigInt(data.import_fee);\r\n\t\t\tconst feeReceiptStatus = data.status;\r\n\t\t\tfn(\r\n\t\t\t\tnull, \r\n\t\t\t\tpayment_id, \r\n\t\t\t\tpayment_address, \r\n\t\t\t\timport_fee__JSBigInt, \r\n\t\t\t\tfeeReceiptStatus\r\n\t\t\t)\r\n\t\t}\r\n\t\treturn requestHandle\r\n\t}\r\n\t\r\n\t//\r\n\t// Getting outputs for sending funds\r\n\tUnspentOuts(\r\n\t\taddress,\r\n\t\tview_key__private,\r\n\t\tspend_key__public,\r\n\t\tspend_key__private,\r\n\t\tmixinNumber,\r\n\t\tsweeping,\r\n\t\tfn\r\n\t) { // -> RequestHandle\r\n\t\tconst self = this\r\n\t\tmixinNumber = parseInt(mixinNumber) // jic\r\n\t\t//\r\n\t\tconst endpointPath = 'get_unspent_outs'\r\n\t\tconst parameters = net_service_utils.New_ParametersForWalletRequest(address, view_key__private)\r\n\t\tparameters.amount = '0'\r\n\t\tparameters.mixin = mixinNumber\r\n\t\tparameters.use_dust = true // Client now filters unmixable by dustthreshold amount (unless sweeping) + non-rct \r\n\t\tparameters.dust_threshold = monero_config.dustThreshold.toString()\r\n\t\tnet_service_utils.AddUserAgentParamters(\r\n\t\t\tparameters,\r\n\t\t\tself.appUserAgent_product, \r\n\t\t\tself.appUserAgent_version\r\n\t\t)\r\n\t\tconst requestHandle = net_service_utils.HTTPRequest(\r\n\t\t\tself.request,\r\n\t\t\tself._new_apiAddress_authority(),\r\n\t\t\tendpointPath,\r\n\t\t\tparameters,\r\n\t\t\tfunction(err, data)\r\n\t\t\t{\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\tfn(err)\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\t__proceedTo_parseAndCallBack(data)\r\n\t\t\t}\r\n\t\t)\r\n\t\tfunction __proceedTo_parseAndCallBack(data)\r\n\t\t{\r\n\t\t\tself.context.backgroundAPIResponseParser.Parsed_UnspentOuts(\r\n\t\t\t\tdata,\r\n\t\t\t\taddress,\r\n\t\t\t\tview_key__private,\r\n\t\t\t\tspend_key__public,\r\n\t\t\t\tspend_key__private,\r\n\t\t\t\tfunction(err, returnValuesByKey)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\tfn(err)\r\n\t\t\t\t\t\treturn\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!returnValuesByKey.per_byte_fee__string || typeof returnValuesByKey.per_byte_fee__string === 'undefined') {\r\n\t\t\t\t\t\tthrow \"Unexpected / missing per_kb_fee\"\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfn(\r\n\t\t\t\t\t\terr, // no error\r\n\t\t\t\t\t\treturnValuesByKey.unspentOutputs, \r\n\t\t\t\t\t\treturnValuesByKey.per_byte_fee__string\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t}\r\n\t\treturn requestHandle\r\n\t}\r\n\tRandomOuts(\r\n\t\tusing_outs,\r\n\t\tmixinNumber,\r\n\t\tfn\r\n\t) { // -> RequestHandle\r\n\t\tconst self = this\r\n\t\t//\r\n\t\tmixinNumber = parseInt(mixinNumber)\r\n\t\tif (mixinNumber < 0 || isNaN(mixinNumber)) {\r\n\t\t\tconst errStr = \"Invalid mixin - must be >= 0\"\r\n\t\t\tconst err = new Error(errStr)\r\n\t\t\tfn(err)\r\n\t\t\treturn\r\n\t\t}\r\n\t\t//\r\n\t\tvar amounts = [];\r\n\t\tfor (var l = 0; l < using_outs.length; l++) {\r\n\t\t\tamounts.push(using_outs[l].rct ? \"0\" : using_outs[l].amount.toString())\r\n\t\t}\r\n\t\t//\r\n\t\tconst endpointPath = 'get_random_outs'\r\n\t\tvar parameters =\r\n\t\t{\r\n\t\t\tamounts: amounts,\r\n\t\t\tcount: mixinNumber + 1 // Add one to mixin so we can skip real output key if necessary\r\n\t\t}\r\n\t\tnet_service_utils.AddUserAgentParamters(\r\n\t\t\tparameters,\r\n\t\t\tself.appUserAgent_product, \r\n\t\t\tself.appUserAgent_version\r\n\t\t)\r\n\t\tconst requestHandle = net_service_utils.HTTPRequest(\r\n\t\t\tself.request,\r\n\t\t\tself._new_apiAddress_authority(),\r\n\t\t\tendpointPath,\r\n\t\t\tparameters,\r\n\t\t\tfunction(err, data)\r\n\t\t\t{\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\tfn(err)\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\t__proceedTo_parseAndCallBack(data)\r\n\t\t\t}\r\n\t\t)\r\n\t\tfunction __proceedTo_parseAndCallBack(data)\r\n\t\t{\r\n\t\t\t// console.log(\"debug: info: random outs: data\", data)\r\n\t\t\tconst amount_outs = data.amount_outs\r\n\t\t\t// yield\r\n\t\t\tfn(\r\n\t\t\t\tnull, // no error\r\n\t\t\t\tamount_outs\r\n\t\t\t)\r\n\t\t}\r\n\t\treturn requestHandle\r\n\t}\r\n\t//\r\n\t// Runtime - Imperatives - Public - Sending funds\r\n\tSubmitSerializedSignedTransaction(\r\n\t\taddress,\r\n\t\tview_key__private,\r\n\t\tserializedSignedTx,\r\n\t\tfn // (err?) -> RequestHandle\r\n\t)\r\n\t{\r\n\t\tconst self = this\r\n\t\t// just a debug feature:\r\n\t\tif (self.context.HostedMoneroAPIClient_DEBUGONLY_mockSendTransactionSuccess === true) {\r\n\t\t\tif (self.context.isDebug === true) {\r\n\t\t\t\tconsole.warn(\"⚠️  WARNING: Mocking that SubmitSerializedSignedTransaction returned a success response w/o having hit the server.\")\r\n\t\t\t\tfn(null)\r\n\t\t\t\treturn\r\n\t\t\t} else {\r\n\t\t\t\tthrow `[${self.constructor.name}/SubmitSerializedSignedTransaction]: context.HostedMoneroAPIClient_DEBUGONLY_mockSendTransactionSuccess was true despite isDebug not being true. Set back to false for production build.`\r\n\t\t\t}\r\n\t\t}\r\n\t\t// actual implementation:\r\n\t\tconst endpointPath = 'submit_raw_tx'\r\n\t\tconst parameters = net_service_utils.New_ParametersForWalletRequest(address, view_key__private)\r\n\t\tparameters.tx = serializedSignedTx\r\n\t\tnet_service_utils.AddUserAgentParamters(\r\n\t\t\tparameters,\r\n\t\t\tself.appUserAgent_product, \r\n\t\t\tself.appUserAgent_version\r\n\t\t)\r\n\t\tconst requestHandle = net_service_utils.HTTPRequest(\r\n\t\t\tself.request,\r\n\t\t\tself._new_apiAddress_authority(),\r\n\t\t\tendpointPath,\r\n\t\t\tparameters,\r\n\t\t\tfunction(err, data)\r\n\t\t\t{\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\tfn(err)\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\t__proceedTo_parseAndCallBack(data)\r\n\t\t\t}\r\n\t\t)\r\n\t\tfunction __proceedTo_parseAndCallBack(data)\r\n\t\t{\r\n\t\t\t// console.log(\"debug: info: submit_raw_tx: data\", data)\r\n\t\t\tfn(null)\r\n\t\t}\r\n\t\treturn requestHandle\r\n\t}\r\n}\r\nmodule.exports = HostedMoneroAPIClient_Base//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./libs/mymonero-app-js/local_modules/HostedMoneroAPIClient/HostedMoneroAPIClient_Base.js\n");

/***/ }),

/***/ "./libs/mymonero-app-js/local_modules/HostedMoneroAPIClient/config__MyMonero.js":
/*!**************************************************************************************!*\
  !*** ./libs/mymonero-app-js/local_modules/HostedMoneroAPIClient/config__MyMonero.js ***!
  \**************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

eval("module.exports = \r\n{\r\n\tAPI__authority: \"api.mymonero.com:8443\"\r\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9saWJzL215bW9uZXJvLWFwcC1qcy9sb2NhbF9tb2R1bGVzL0hvc3RlZE1vbmVyb0FQSUNsaWVudC9jb25maWdfX015TW9uZXJvLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbGlicy9teW1vbmVyby1hcHAtanMvbG9jYWxfbW9kdWxlcy9Ib3N0ZWRNb25lcm9BUElDbGllbnQvY29uZmlnX19NeU1vbmVyby5qcz9lZGM0Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXHJcbntcclxuXHRBUElfX2F1dGhvcml0eTogXCJhcGkubXltb25lcm8uY29tOjg0NDNcIlxyXG59Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./libs/mymonero-app-js/local_modules/HostedMoneroAPIClient/config__MyMonero.js\n");

/***/ }),

/***/ "./libs/mymonero-app-js/local_modules/mymonero_core_js/cryptonote_utils/biginteger.js":
/*!********************************************************************************************!*\
  !*** ./libs/mymonero-app-js/local_modules/mymonero_core_js/cryptonote_utils/biginteger.js ***!
  \********************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("/*\r\n\tJavaScript BigInteger library version 0.9.1\r\n\thttp://silentmatt.com/biginteger/\r\n\r\n\tCopyright (c) 2009 Matthew Crumley <email@matthewcrumley.com>\r\n\tCopyright (c) 2010,2011 by John Tobey <John.Tobey@gmail.com>\r\n\tLicensed under the MIT license.\r\n\r\n\tSupport for arbitrary internal representation base was added by\r\n\tVitaly Magerya.\r\n*/\r\n/*\r\n\r\nThis file has been modified by Paul Shapiro:\r\n\r\n1. to bring in the function lowVal which was written by Lucas Jones\r\n2. to expose CONSTRUCT\r\n\r\n*/\r\n/*\r\n\tFile: biginteger.js\r\n\r\n\tExports:\r\n\r\n\t\t<BigInteger>\r\n*/\r\n(function(exports) {\r\n\"use strict\";\r\n/*\r\n\tClass: BigInteger\r\n\tAn arbitrarily-large integer.\r\n\r\n\t<BigInteger> objects should be considered immutable. None of the \"built-in\"\r\n\tmethods modify *this* or their arguments. All properties should be\r\n\tconsidered private.\r\n\r\n\tAll the methods of <BigInteger> instances can be called \"statically\". The\r\n\tstatic versions are convenient if you don't already have a <BigInteger>\r\n\tobject.\r\n\r\n\tAs an example, these calls are equivalent.\r\n\r\n\t> BigInteger(4).multiply(5); // returns BigInteger(20);\r\n\t> BigInteger.multiply(4, 5); // returns BigInteger(20);\r\n\r\n\t> var a = 42;\r\n\t> var a = BigInteger.toJSValue(\"0b101010\"); // Not completely useless...\r\n*/\r\n\r\nvar CONSTRUCT = {}; // Unique token to call \"private\" version of constructor\r\n\r\n/*\r\n\tConstructor: BigInteger()\r\n\tConvert a value to a <BigInteger>.\r\n\r\n\tAlthough <BigInteger()> is the constructor for <BigInteger> objects, it is\r\n\tbest not to call it as a constructor. If *n* is a <BigInteger> object, it is\r\n\tsimply returned as-is. Otherwise, <BigInteger()> is equivalent to <parse>\r\n\twithout a radix argument.\r\n\r\n\t> var n0 = BigInteger();\t  // Same as <BigInteger.ZERO>\r\n\t> var n1 = BigInteger(\"123\"); // Create a new <BigInteger> with value 123\r\n\t> var n2 = BigInteger(123);   // Create a new <BigInteger> with value 123\r\n\t> var n3 = BigInteger(n2);\t// Return n2, unchanged\r\n\r\n\tThe constructor form only takes an array and a sign. *n* must be an\r\n\tarray of numbers in little-endian order, where each digit is between 0\r\n\tand BigInteger.base.  The second parameter sets the sign: -1 for\r\n\tnegative, +1 for positive, or 0 for zero. The array is *not copied and\r\n\tmay be modified*. If the array contains only zeros, the sign parameter\r\n\tis ignored and is forced to zero.\r\n\r\n\t> new BigInteger([5], -1): create a new BigInteger with value -5\r\n\r\n\tParameters:\r\n\r\n\t\tn - Value to convert to a <BigInteger>.\r\n\r\n\tReturns:\r\n\r\n\t\tA <BigInteger> value.\r\n\r\n\tSee Also:\r\n\r\n\t\t<parse>, <BigInteger>\r\n*/\r\nfunction BigInteger(n, s, token) {\r\n\tif (token !== CONSTRUCT) {\r\n\t\tif (n instanceof BigInteger) {\r\n\t\t\treturn n;\r\n\t\t}\r\n\t\telse if (typeof n === \"undefined\") {\r\n\t\t\treturn ZERO;\r\n\t\t}\r\n\t\treturn BigInteger.parse(n);\r\n\t}\r\n\r\n\tn = n || [];  // Provide the nullary constructor for subclasses.\r\n\twhile (n.length && !n[n.length - 1]) {\r\n\t\t--n.length;\r\n\t}\r\n\tthis._d = n;\r\n\tthis._s = n.length ? (s || 1) : 0;\r\n}\r\nBigInteger.CONSTRUCT = CONSTRUCT; // added by PS to actually use the constructor\r\n\r\nBigInteger._construct = function(n, s) {\r\n\treturn new BigInteger(n, s, CONSTRUCT);\r\n};\r\n\r\n// Base-10 speedup hacks in parse, toString, exp10 and log functions\r\n// require base to be a power of 10. 10^7 is the largest such power\r\n// that won't cause a precision loss when digits are multiplied.\r\nvar BigInteger_base = 10000000;\r\nvar BigInteger_base_log10 = 7;\r\n\r\nBigInteger.base = BigInteger_base;\r\nBigInteger.base_log10 = BigInteger_base_log10;\r\n\r\nvar ZERO = new BigInteger([], 0, CONSTRUCT);\r\n// Constant: ZERO\r\n// <BigInteger> 0.\r\nBigInteger.ZERO = ZERO;\r\n\r\nvar ONE = new BigInteger([1], 1, CONSTRUCT);\r\n// Constant: ONE\r\n// <BigInteger> 1.\r\nBigInteger.ONE = ONE;\r\n\r\nvar M_ONE = new BigInteger(ONE._d, -1, CONSTRUCT);\r\n// Constant: M_ONE\r\n// <BigInteger> -1.\r\nBigInteger.M_ONE = M_ONE;\r\n\r\n// Constant: _0\r\n// Shortcut for <ZERO>.\r\nBigInteger._0 = ZERO;\r\n\r\n// Constant: _1\r\n// Shortcut for <ONE>.\r\nBigInteger._1 = ONE;\r\n\r\n/*\r\n\tConstant: small\r\n\tArray of <BigIntegers> from 0 to 36.\r\n\r\n\tThese are used internally for parsing, but useful when you need a \"small\"\r\n\t<BigInteger>.\r\n\r\n\tSee Also:\r\n\r\n\t\t<ZERO>, <ONE>, <_0>, <_1>\r\n*/\r\nBigInteger.small = [\r\n\tZERO,\r\n\tONE,\r\n\t/* Assuming BigInteger_base > 36 */\r\n\tnew BigInteger( [2], 1, CONSTRUCT),\r\n\tnew BigInteger( [3], 1, CONSTRUCT),\r\n\tnew BigInteger( [4], 1, CONSTRUCT),\r\n\tnew BigInteger( [5], 1, CONSTRUCT),\r\n\tnew BigInteger( [6], 1, CONSTRUCT),\r\n\tnew BigInteger( [7], 1, CONSTRUCT),\r\n\tnew BigInteger( [8], 1, CONSTRUCT),\r\n\tnew BigInteger( [9], 1, CONSTRUCT),\r\n\tnew BigInteger([10], 1, CONSTRUCT),\r\n\tnew BigInteger([11], 1, CONSTRUCT),\r\n\tnew BigInteger([12], 1, CONSTRUCT),\r\n\tnew BigInteger([13], 1, CONSTRUCT),\r\n\tnew BigInteger([14], 1, CONSTRUCT),\r\n\tnew BigInteger([15], 1, CONSTRUCT),\r\n\tnew BigInteger([16], 1, CONSTRUCT),\r\n\tnew BigInteger([17], 1, CONSTRUCT),\r\n\tnew BigInteger([18], 1, CONSTRUCT),\r\n\tnew BigInteger([19], 1, CONSTRUCT),\r\n\tnew BigInteger([20], 1, CONSTRUCT),\r\n\tnew BigInteger([21], 1, CONSTRUCT),\r\n\tnew BigInteger([22], 1, CONSTRUCT),\r\n\tnew BigInteger([23], 1, CONSTRUCT),\r\n\tnew BigInteger([24], 1, CONSTRUCT),\r\n\tnew BigInteger([25], 1, CONSTRUCT),\r\n\tnew BigInteger([26], 1, CONSTRUCT),\r\n\tnew BigInteger([27], 1, CONSTRUCT),\r\n\tnew BigInteger([28], 1, CONSTRUCT),\r\n\tnew BigInteger([29], 1, CONSTRUCT),\r\n\tnew BigInteger([30], 1, CONSTRUCT),\r\n\tnew BigInteger([31], 1, CONSTRUCT),\r\n\tnew BigInteger([32], 1, CONSTRUCT),\r\n\tnew BigInteger([33], 1, CONSTRUCT),\r\n\tnew BigInteger([34], 1, CONSTRUCT),\r\n\tnew BigInteger([35], 1, CONSTRUCT),\r\n\tnew BigInteger([36], 1, CONSTRUCT)\r\n];\r\n\r\n// Used for parsing/radix conversion\r\nBigInteger.digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\r\n\r\n/*\r\n\tMethod: toString\r\n\tConvert a <BigInteger> to a string.\r\n\r\n\tWhen *base* is greater than 10, letters are upper case.\r\n\r\n\tParameters:\r\n\r\n\t\tbase - Optional base to represent the number in (default is base 10).\r\n\t\t\t   Must be between 2 and 36 inclusive, or an Error will be thrown.\r\n\r\n\tReturns:\r\n\r\n\t\tThe string representation of the <BigInteger>.\r\n*/\r\nBigInteger.prototype.toString = function(base) {\r\n\tbase = +base || 10;\r\n\tif (base < 2 || base > 36) {\r\n\t\tthrow new Error(\"illegal radix \" + base + \".\");\r\n\t}\r\n\tif (this._s === 0) {\r\n\t\treturn \"0\";\r\n\t}\r\n\tif (base === 10) {\r\n\t\tvar str = this._s < 0 ? \"-\" : \"\";\r\n\t\tstr += this._d[this._d.length - 1].toString();\r\n\t\tfor (var i = this._d.length - 2; i >= 0; i--) {\r\n\t\t\tvar group = this._d[i].toString();\r\n\t\t\twhile (group.length < BigInteger_base_log10) group = '0' + group;\r\n\t\t\tstr += group;\r\n\t\t}\r\n\t\treturn str;\r\n\t}\r\n\telse {\r\n\t\tvar numerals = BigInteger.digits;\r\n\t\tbase = BigInteger.small[base];\r\n\t\tvar sign = this._s;\r\n\r\n\t\tvar n = this.abs();\r\n\t\tvar digits = [];\r\n\t\tvar digit;\r\n\r\n\t\twhile (n._s !== 0) {\r\n\t\t\tvar divmod = n.divRem(base);\r\n\t\t\tn = divmod[0];\r\n\t\t\tdigit = divmod[1];\r\n\t\t\t// TODO: This could be changed to unshift instead of reversing at the end.\r\n\t\t\t// Benchmark both to compare speeds.\r\n\t\t\tdigits.push(numerals[digit.valueOf()]);\r\n\t\t}\r\n\t\treturn (sign < 0 ? \"-\" : \"\") + digits.reverse().join(\"\");\r\n\t}\r\n};\r\n\r\n// Verify strings for parsing\r\nBigInteger.radixRegex = [\r\n\t/^$/,\r\n\t/^$/,\r\n\t/^[01]*$/,\r\n\t/^[012]*$/,\r\n\t/^[0-3]*$/,\r\n\t/^[0-4]*$/,\r\n\t/^[0-5]*$/,\r\n\t/^[0-6]*$/,\r\n\t/^[0-7]*$/,\r\n\t/^[0-8]*$/,\r\n\t/^[0-9]*$/,\r\n\t/^[0-9aA]*$/,\r\n\t/^[0-9abAB]*$/,\r\n\t/^[0-9abcABC]*$/,\r\n\t/^[0-9a-dA-D]*$/,\r\n\t/^[0-9a-eA-E]*$/,\r\n\t/^[0-9a-fA-F]*$/,\r\n\t/^[0-9a-gA-G]*$/,\r\n\t/^[0-9a-hA-H]*$/,\r\n\t/^[0-9a-iA-I]*$/,\r\n\t/^[0-9a-jA-J]*$/,\r\n\t/^[0-9a-kA-K]*$/,\r\n\t/^[0-9a-lA-L]*$/,\r\n\t/^[0-9a-mA-M]*$/,\r\n\t/^[0-9a-nA-N]*$/,\r\n\t/^[0-9a-oA-O]*$/,\r\n\t/^[0-9a-pA-P]*$/,\r\n\t/^[0-9a-qA-Q]*$/,\r\n\t/^[0-9a-rA-R]*$/,\r\n\t/^[0-9a-sA-S]*$/,\r\n\t/^[0-9a-tA-T]*$/,\r\n\t/^[0-9a-uA-U]*$/,\r\n\t/^[0-9a-vA-V]*$/,\r\n\t/^[0-9a-wA-W]*$/,\r\n\t/^[0-9a-xA-X]*$/,\r\n\t/^[0-9a-yA-Y]*$/,\r\n\t/^[0-9a-zA-Z]*$/\r\n];\r\n\r\n/*\r\n\tFunction: parse\r\n\tParse a string into a <BigInteger>.\r\n\r\n\t*base* is optional but, if provided, must be from 2 to 36 inclusive. If\r\n\t*base* is not provided, it will be guessed based on the leading characters\r\n\tof *s* as follows:\r\n\r\n\t- \"0x\" or \"0X\": *base* = 16\r\n\t- \"0c\" or \"0C\": *base* = 8\r\n\t- \"0b\" or \"0B\": *base* = 2\r\n\t- else: *base* = 10\r\n\r\n\tIf no base is provided, or *base* is 10, the number can be in exponential\r\n\tform. For example, these are all valid:\r\n\r\n\t> BigInteger.parse(\"1e9\");\t\t\t  // Same as \"1000000000\"\r\n\t> BigInteger.parse(\"1.234*10^3\");\t   // Same as 1234\r\n\t> BigInteger.parse(\"56789 * 10 ** -2\"); // Same as 567\r\n\r\n\tIf any characters fall outside the range defined by the radix, an exception\r\n\twill be thrown.\r\n\r\n\tParameters:\r\n\r\n\t\ts - The string to parse.\r\n\t\tbase - Optional radix (default is to guess based on *s*).\r\n\r\n\tReturns:\r\n\r\n\t\ta <BigInteger> instance.\r\n*/\r\nBigInteger.parse = function(s, base) {\r\n\t// Expands a number in exponential form to decimal form.\r\n\t// expandExponential(\"-13.441*10^5\") === \"1344100\";\r\n\t// expandExponential(\"1.12300e-1\") === \"0.112300\";\r\n\t// expandExponential(1000000000000000000000000000000) === \"1000000000000000000000000000000\";\r\n\tfunction expandExponential(str) {\r\n\t\tstr = str.replace(/\\s*[*xX]\\s*10\\s*(\\^|\\*\\*)\\s*/, \"e\");\r\n\r\n\t\treturn str.replace(/^([+\\-])?(\\d+)\\.?(\\d*)[eE]([+\\-]?\\d+)$/, function(x, s, n, f, c) {\r\n\t\t\tc = +c;\r\n\t\t\tvar l = c < 0;\r\n\t\t\tvar i = n.length + c;\r\n\t\t\tx = (l ? n : f).length;\r\n\t\t\tc = ((c = Math.abs(c)) >= x ? c - x + l : 0);\r\n\t\t\tvar z = (new Array(c + 1)).join(\"0\");\r\n\t\t\tvar r = n + f;\r\n\t\t\treturn (s || \"\") + (l ? r = z + r : r += z).substr(0, i += l ? z.length : 0) + (i < r.length ? \".\" + r.substr(i) : \"\");\r\n\t\t});\r\n\t}\r\n\r\n\ts = s.toString();\r\n\tif (typeof base === \"undefined\" || +base === 10) {\r\n\t\ts = expandExponential(s);\r\n\t}\r\n\r\n\tvar prefixRE;\r\n\tif (typeof base === \"undefined\") {\r\n\t\tprefixRE = '0[xcb]';\r\n\t}\r\n\telse if (base == 16) {\r\n\t\tprefixRE = '0x';\r\n\t}\r\n\telse if (base == 8) {\r\n\t\tprefixRE = '0c';\r\n\t}\r\n\telse if (base == 2) {\r\n\t\tprefixRE = '0b';\r\n\t}\r\n\telse {\r\n\t\tprefixRE = '';\r\n\t}\r\n\tvar parts = new RegExp('^([+\\\\-]?)(' + prefixRE + ')?([0-9a-z]*)(?:\\\\.\\\\d*)?$', 'i').exec(s);\r\n\tif (parts) {\r\n\t\tvar sign = parts[1] || \"+\";\r\n\t\tvar baseSection = parts[2] || \"\";\r\n\t\tvar digits = parts[3] || \"\";\r\n\r\n\t\tif (typeof base === \"undefined\") {\r\n\t\t\t// Guess base\r\n\t\t\tif (baseSection === \"0x\" || baseSection === \"0X\") { // Hex\r\n\t\t\t\tbase = 16;\r\n\t\t\t}\r\n\t\t\telse if (baseSection === \"0c\" || baseSection === \"0C\") { // Octal\r\n\t\t\t\tbase = 8;\r\n\t\t\t}\r\n\t\t\telse if (baseSection === \"0b\" || baseSection === \"0B\") { // Binary\r\n\t\t\t\tbase = 2;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbase = 10;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (base < 2 || base > 36) {\r\n\t\t\tthrow new Error(\"Illegal radix \" + base + \".\");\r\n\t\t}\r\n\r\n\t\tbase = +base;\r\n\r\n\t\t// Check for digits outside the range\r\n\t\tif (!(BigInteger.radixRegex[base].test(digits))) {\r\n\t\t\tthrow new Error(\"Bad digit for radix \" + base);\r\n\t\t}\r\n\r\n\t\t// Strip leading zeros, and convert to array\r\n\t\tdigits = digits.replace(/^0+/, \"\").split(\"\");\r\n\t\tif (digits.length === 0) {\r\n\t\t\treturn ZERO;\r\n\t\t}\r\n\r\n\t\t// Get the sign (we know it's not zero)\r\n\t\tsign = (sign === \"-\") ? -1 : 1;\r\n\r\n\t\t// Optimize 10\r\n\t\tif (base == 10) {\r\n\t\t\tvar d = [];\r\n\t\t\twhile (digits.length >= BigInteger_base_log10) {\r\n\t\t\t\td.push(parseInt(digits.splice(digits.length-BigInteger.base_log10, BigInteger.base_log10).join(''), 10));\r\n\t\t\t}\r\n\t\t\td.push(parseInt(digits.join(''), 10));\r\n\t\t\treturn new BigInteger(d, sign, CONSTRUCT);\r\n\t\t}\r\n\r\n\t\t// Do the conversion\r\n\t\tvar d = ZERO;\r\n\t\tbase = BigInteger.small[base];\r\n\t\tvar small = BigInteger.small;\r\n\t\tfor (var i = 0; i < digits.length; i++) {\r\n\t\t\td = d.multiply(base).add(small[parseInt(digits[i], 36)]);\r\n\t\t}\r\n\t\treturn new BigInteger(d._d, sign, CONSTRUCT);\r\n\t}\r\n\telse {\r\n\t\tthrow new Error(\"Invalid BigInteger format: \" + s);\r\n\t}\r\n};\r\n\r\n/*\r\n\tFunction: add\r\n\tAdd two <BigIntegers>.\r\n\r\n\tParameters:\r\n\r\n\t\tn - The number to add to *this*. Will be converted to a <BigInteger>.\r\n\r\n\tReturns:\r\n\r\n\t\tThe numbers added together.\r\n\r\n\tSee Also:\r\n\r\n\t\t<subtract>, <multiply>, <quotient>, <next>\r\n*/\r\nBigInteger.prototype.add = function(n) {\r\n\tif (this._s === 0) {\r\n\t\treturn BigInteger(n);\r\n\t}\r\n\r\n\tn = BigInteger(n);\r\n\tif (n._s === 0) {\r\n\t\treturn this;\r\n\t}\r\n\tif (this._s !== n._s) {\r\n\t\tn = n.negate();\r\n\t\treturn this.subtract(n);\r\n\t}\r\n\r\n\tvar a = this._d;\r\n\tvar b = n._d;\r\n\tvar al = a.length;\r\n\tvar bl = b.length;\r\n\tvar sum = new Array(Math.max(al, bl) + 1);\r\n\tvar size = Math.min(al, bl);\r\n\tvar carry = 0;\r\n\tvar digit;\r\n\r\n\tfor (var i = 0; i < size; i++) {\r\n\t\tdigit = a[i] + b[i] + carry;\r\n\t\tsum[i] = digit % BigInteger_base;\r\n\t\tcarry = (digit / BigInteger_base) | 0;\r\n\t}\r\n\tif (bl > al) {\r\n\t\ta = b;\r\n\t\tal = bl;\r\n\t}\r\n\tfor (i = size; carry && i < al; i++) {\r\n\t\tdigit = a[i] + carry;\r\n\t\tsum[i] = digit % BigInteger_base;\r\n\t\tcarry = (digit / BigInteger_base) | 0;\r\n\t}\r\n\tif (carry) {\r\n\t\tsum[i] = carry;\r\n\t}\r\n\r\n\tfor ( ; i < al; i++) {\r\n\t\tsum[i] = a[i];\r\n\t}\r\n\r\n\treturn new BigInteger(sum, this._s, CONSTRUCT);\r\n};\r\n\r\n/*\r\n\tFunction: negate\r\n\tGet the additive inverse of a <BigInteger>.\r\n\r\n\tReturns:\r\n\r\n\t\tA <BigInteger> with the same magnatude, but with the opposite sign.\r\n\r\n\tSee Also:\r\n\r\n\t\t<abs>\r\n*/\r\nBigInteger.prototype.negate = function() {\r\n\treturn new BigInteger(this._d, (-this._s) | 0, CONSTRUCT);\r\n};\r\n\r\n/*\r\n\tFunction: abs\r\n\tGet the absolute value of a <BigInteger>.\r\n\r\n\tReturns:\r\n\r\n\t\tA <BigInteger> with the same magnatude, but always positive (or zero).\r\n\r\n\tSee Also:\r\n\r\n\t\t<negate>\r\n*/\r\nBigInteger.prototype.abs = function() {\r\n\treturn (this._s < 0) ? this.negate() : this;\r\n};\r\n\r\n/*\r\n\tFunction: subtract\r\n\tSubtract two <BigIntegers>.\r\n\r\n\tParameters:\r\n\r\n\t\tn - The number to subtract from *this*. Will be converted to a <BigInteger>.\r\n\r\n\tReturns:\r\n\r\n\t\tThe *n* subtracted from *this*.\r\n\r\n\tSee Also:\r\n\r\n\t\t<add>, <multiply>, <quotient>, <prev>\r\n*/\r\nBigInteger.prototype.subtract = function(n) {\r\n\tif (this._s === 0) {\r\n\t\treturn BigInteger(n).negate();\r\n\t}\r\n\r\n\tn = BigInteger(n);\r\n\tif (n._s === 0) {\r\n\t\treturn this;\r\n\t}\r\n\tif (this._s !== n._s) {\r\n\t\tn = n.negate();\r\n\t\treturn this.add(n);\r\n\t}\r\n\r\n\tvar m = this;\r\n\t// negative - negative => -|a| - -|b| => -|a| + |b| => |b| - |a|\r\n\tif (this._s < 0) {\r\n\t\tm = new BigInteger(n._d, 1, CONSTRUCT);\r\n\t\tn = new BigInteger(this._d, 1, CONSTRUCT);\r\n\t}\r\n\r\n\t// Both are positive => a - b\r\n\tvar sign = m.compareAbs(n);\r\n\tif (sign === 0) {\r\n\t\treturn ZERO;\r\n\t}\r\n\telse if (sign < 0) {\r\n\t\t// swap m and n\r\n\t\tvar t = n;\r\n\t\tn = m;\r\n\t\tm = t;\r\n\t}\r\n\r\n\t// a > b\r\n\tvar a = m._d;\r\n\tvar b = n._d;\r\n\tvar al = a.length;\r\n\tvar bl = b.length;\r\n\tvar diff = new Array(al); // al >= bl since a > b\r\n\tvar borrow = 0;\r\n\tvar i;\r\n\tvar digit;\r\n\r\n\tfor (i = 0; i < bl; i++) {\r\n\t\tdigit = a[i] - borrow - b[i];\r\n\t\tif (digit < 0) {\r\n\t\t\tdigit += BigInteger_base;\r\n\t\t\tborrow = 1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tborrow = 0;\r\n\t\t}\r\n\t\tdiff[i] = digit;\r\n\t}\r\n\tfor (i = bl; i < al; i++) {\r\n\t\tdigit = a[i] - borrow;\r\n\t\tif (digit < 0) {\r\n\t\t\tdigit += BigInteger_base;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdiff[i++] = digit;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tdiff[i] = digit;\r\n\t}\r\n\tfor ( ; i < al; i++) {\r\n\t\tdiff[i] = a[i];\r\n\t}\r\n\r\n\treturn new BigInteger(diff, sign, CONSTRUCT);\r\n};\r\n\r\n(function() {\r\n\tfunction addOne(n, sign) {\r\n\t\tvar a = n._d;\r\n\t\tvar sum = a.slice();\r\n\t\tvar carry = true;\r\n\t\tvar i = 0;\r\n\r\n\t\twhile (true) {\r\n\t\t\tvar digit = (a[i] || 0) + 1;\r\n\t\t\tsum[i] = digit % BigInteger_base;\r\n\t\t\tif (digit <= BigInteger_base - 1) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t++i;\r\n\t\t}\r\n\r\n\t\treturn new BigInteger(sum, sign, CONSTRUCT);\r\n\t}\r\n\r\n\tfunction subtractOne(n, sign) {\r\n\t\tvar a = n._d;\r\n\t\tvar sum = a.slice();\r\n\t\tvar borrow = true;\r\n\t\tvar i = 0;\r\n\r\n\t\twhile (true) {\r\n\t\t\tvar digit = (a[i] || 0) - 1;\r\n\t\t\tif (digit < 0) {\r\n\t\t\t\tsum[i] = digit + BigInteger_base;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsum[i] = digit;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t++i;\r\n\t\t}\r\n\r\n\t\treturn new BigInteger(sum, sign, CONSTRUCT);\r\n\t}\r\n\r\n\t/*\r\n\t\tFunction: next\r\n\t\tGet the next <BigInteger> (add one).\r\n\r\n\t\tReturns:\r\n\r\n\t\t\t*this* + 1.\r\n\r\n\t\tSee Also:\r\n\r\n\t\t\t<add>, <prev>\r\n\t*/\r\n\tBigInteger.prototype.next = function() {\r\n\t\tswitch (this._s) {\r\n\t\tcase 0:\r\n\t\t\treturn ONE;\r\n\t\tcase -1:\r\n\t\t\treturn subtractOne(this, -1);\r\n\t\t// case 1:\r\n\t\tdefault:\r\n\t\t\treturn addOne(this, 1);\r\n\t\t}\r\n\t};\r\n\r\n\t/*\r\n\t\tFunction: prev\r\n\t\tGet the previous <BigInteger> (subtract one).\r\n\r\n\t\tReturns:\r\n\r\n\t\t\t*this* - 1.\r\n\r\n\t\tSee Also:\r\n\r\n\t\t\t<next>, <subtract>\r\n\t*/\r\n\tBigInteger.prototype.prev = function() {\r\n\t\tswitch (this._s) {\r\n\t\tcase 0:\r\n\t\t\treturn M_ONE;\r\n\t\tcase -1:\r\n\t\t\treturn addOne(this, -1);\r\n\t\t// case 1:\r\n\t\tdefault:\r\n\t\t\treturn subtractOne(this, 1);\r\n\t\t}\r\n\t};\r\n})();\r\n\r\n/*\r\n\tFunction: compareAbs\r\n\tCompare the absolute value of two <BigIntegers>.\r\n\r\n\tCalling <compareAbs> is faster than calling <abs> twice, then <compare>.\r\n\r\n\tParameters:\r\n\r\n\t\tn - The number to compare to *this*. Will be converted to a <BigInteger>.\r\n\r\n\tReturns:\r\n\r\n\t\t-1, 0, or +1 if *|this|* is less than, equal to, or greater than *|n|*.\r\n\r\n\tSee Also:\r\n\r\n\t\t<compare>, <abs>\r\n*/\r\nBigInteger.prototype.compareAbs = function(n) {\r\n\tif (this === n) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tif (!(n instanceof BigInteger)) {\r\n\t\tif (!isFinite(n)) {\r\n\t\t\treturn(isNaN(n) ? n : -1);\r\n\t\t}\r\n\t\tn = BigInteger(n);\r\n\t}\r\n\r\n\tif (this._s === 0) {\r\n\t\treturn (n._s !== 0) ? -1 : 0;\r\n\t}\r\n\tif (n._s === 0) {\r\n\t\treturn 1;\r\n\t}\r\n\r\n\tvar l = this._d.length;\r\n\tvar nl = n._d.length;\r\n\tif (l < nl) {\r\n\t\treturn -1;\r\n\t}\r\n\telse if (l > nl) {\r\n\t\treturn 1;\r\n\t}\r\n\r\n\tvar a = this._d;\r\n\tvar b = n._d;\r\n\tfor (var i = l-1; i >= 0; i--) {\r\n\t\tif (a[i] !== b[i]) {\r\n\t\t\treturn a[i] < b[i] ? -1 : 1;\r\n\t\t}\r\n\t}\r\n\r\n\treturn 0;\r\n};\r\n\r\n/*\r\n\tFunction: compare\r\n\tCompare two <BigIntegers>.\r\n\r\n\tParameters:\r\n\r\n\t\tn - The number to compare to *this*. Will be converted to a <BigInteger>.\r\n\r\n\tReturns:\r\n\r\n\t\t-1, 0, or +1 if *this* is less than, equal to, or greater than *n*.\r\n\r\n\tSee Also:\r\n\r\n\t\t<compareAbs>, <isPositive>, <isNegative>, <isUnit>\r\n*/\r\nBigInteger.prototype.compare = function(n) {\r\n\tif (this === n) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tn = BigInteger(n);\r\n\r\n\tif (this._s === 0) {\r\n\t\treturn -n._s;\r\n\t}\r\n\r\n\tif (this._s === n._s) { // both positive or both negative\r\n\t\tvar cmp = this.compareAbs(n);\r\n\t\treturn cmp * this._s;\r\n\t}\r\n\telse {\r\n\t\treturn this._s;\r\n\t}\r\n};\r\n\r\n/*\r\n\tFunction: isUnit\r\n\tReturn true iff *this* is either 1 or -1.\r\n\r\n\tReturns:\r\n\r\n\t\ttrue if *this* compares equal to <BigInteger.ONE> or <BigInteger.M_ONE>.\r\n\r\n\tSee Also:\r\n\r\n\t\t<isZero>, <isNegative>, <isPositive>, <compareAbs>, <compare>,\r\n\t\t<BigInteger.ONE>, <BigInteger.M_ONE>\r\n*/\r\nBigInteger.prototype.isUnit = function() {\r\n\treturn this === ONE ||\r\n\t\tthis === M_ONE ||\r\n\t\t(this._d.length === 1 && this._d[0] === 1);\r\n};\r\n\r\n/*\r\n\tFunction: multiply\r\n\tMultiply two <BigIntegers>.\r\n\r\n\tParameters:\r\n\r\n\t\tn - The number to multiply *this* by. Will be converted to a\r\n\t\t<BigInteger>.\r\n\r\n\tReturns:\r\n\r\n\t\tThe numbers multiplied together.\r\n\r\n\tSee Also:\r\n\r\n\t\t<add>, <subtract>, <quotient>, <square>\r\n*/\r\nBigInteger.prototype.multiply = function(n) {\r\n\t// TODO: Consider adding Karatsuba multiplication for large numbers\r\n\tif (this._s === 0) {\r\n\t\treturn ZERO;\r\n\t}\r\n\r\n\tn = BigInteger(n);\r\n\tif (n._s === 0) {\r\n\t\treturn ZERO;\r\n\t}\r\n\tif (this.isUnit()) {\r\n\t\tif (this._s < 0) {\r\n\t\t\treturn n.negate();\r\n\t\t}\r\n\t\treturn n;\r\n\t}\r\n\tif (n.isUnit()) {\r\n\t\tif (n._s < 0) {\r\n\t\t\treturn this.negate();\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\tif (this === n) {\r\n\t\treturn this.square();\r\n\t}\r\n\r\n\tvar r = (this._d.length >= n._d.length);\r\n\tvar a = (r ? this : n)._d; // a will be longer than b\r\n\tvar b = (r ? n : this)._d;\r\n\tvar al = a.length;\r\n\tvar bl = b.length;\r\n\r\n\tvar pl = al + bl;\r\n\tvar partial = new Array(pl);\r\n\tvar i;\r\n\tfor (i = 0; i < pl; i++) {\r\n\t\tpartial[i] = 0;\r\n\t}\r\n\r\n\tfor (i = 0; i < bl; i++) {\r\n\t\tvar carry = 0;\r\n\t\tvar bi = b[i];\r\n\t\tvar jlimit = al + i;\r\n\t\tvar digit;\r\n\t\tfor (var j = i; j < jlimit; j++) {\r\n\t\t\tdigit = partial[j] + bi * a[j - i] + carry;\r\n\t\t\tcarry = (digit / BigInteger_base) | 0;\r\n\t\t\tpartial[j] = (digit % BigInteger_base) | 0;\r\n\t\t}\r\n\t\tif (carry) {\r\n\t\t\tdigit = partial[j] + carry;\r\n\t\t\tcarry = (digit / BigInteger_base) | 0;\r\n\t\t\tpartial[j] = digit % BigInteger_base;\r\n\t\t}\r\n\t}\r\n\treturn new BigInteger(partial, this._s * n._s, CONSTRUCT);\r\n};\r\n\r\n// Multiply a BigInteger by a single-digit native number\r\n// Assumes that this and n are >= 0\r\n// This is not really intended to be used outside the library itself\r\nBigInteger.prototype.multiplySingleDigit = function(n) {\r\n\tif (n === 0 || this._s === 0) {\r\n\t\treturn ZERO;\r\n\t}\r\n\tif (n === 1) {\r\n\t\treturn this;\r\n\t}\r\n\r\n\tvar digit;\r\n\tif (this._d.length === 1) {\r\n\t\tdigit = this._d[0] * n;\r\n\t\tif (digit >= BigInteger_base) {\r\n\t\t\treturn new BigInteger([(digit % BigInteger_base)|0,\r\n\t\t\t\t\t(digit / BigInteger_base)|0], 1, CONSTRUCT);\r\n\t\t}\r\n\t\treturn new BigInteger([digit], 1, CONSTRUCT);\r\n\t}\r\n\r\n\tif (n === 2) {\r\n\t\treturn this.add(this);\r\n\t}\r\n\tif (this.isUnit()) {\r\n\t\treturn new BigInteger([n], 1, CONSTRUCT);\r\n\t}\r\n\r\n\tvar a = this._d;\r\n\tvar al = a.length;\r\n\r\n\tvar pl = al + 1;\r\n\tvar partial = new Array(pl);\r\n\tfor (var i = 0; i < pl; i++) {\r\n\t\tpartial[i] = 0;\r\n\t}\r\n\r\n\tvar carry = 0;\r\n\tfor (var j = 0; j < al; j++) {\r\n\t\tdigit = n * a[j] + carry;\r\n\t\tcarry = (digit / BigInteger_base) | 0;\r\n\t\tpartial[j] = (digit % BigInteger_base) | 0;\r\n\t}\r\n\tif (carry) {\r\n\t\tpartial[j] = carry;\r\n\t}\r\n\r\n\treturn new BigInteger(partial, 1, CONSTRUCT);\r\n};\r\n\r\n/*\r\n\tFunction: square\r\n\tMultiply a <BigInteger> by itself.\r\n\r\n\tThis is slightly faster than regular multiplication, since it removes the\r\n\tduplicated multiplcations.\r\n\r\n\tReturns:\r\n\r\n\t\t> this.multiply(this)\r\n\r\n\tSee Also:\r\n\t\t<multiply>\r\n*/\r\nBigInteger.prototype.square = function() {\r\n\t// Normally, squaring a 10-digit number would take 100 multiplications.\r\n\t// Of these 10 are unique diagonals, of the remaining 90 (100-10), 45 are repeated.\r\n\t// This procedure saves (N*(N-1))/2 multiplications, (e.g., 45 of 100 multiplies).\r\n\t// Based on code by Gary Darby, Intellitech Systems Inc., www.DelphiForFun.org\r\n\r\n\tif (this._s === 0) {\r\n\t\treturn ZERO;\r\n\t}\r\n\tif (this.isUnit()) {\r\n\t\treturn ONE;\r\n\t}\r\n\r\n\tvar digits = this._d;\r\n\tvar length = digits.length;\r\n\tvar imult1 = new Array(length + length + 1);\r\n\tvar product, carry, k;\r\n\tvar i;\r\n\r\n\t// Calculate diagonal\r\n\tfor (i = 0; i < length; i++) {\r\n\t\tk = i * 2;\r\n\t\tproduct = digits[i] * digits[i];\r\n\t\tcarry = (product / BigInteger_base) | 0;\r\n\t\timult1[k] = product % BigInteger_base;\r\n\t\timult1[k + 1] = carry;\r\n\t}\r\n\r\n\t// Calculate repeating part\r\n\tfor (i = 0; i < length; i++) {\r\n\t\tcarry = 0;\r\n\t\tk = i * 2 + 1;\r\n\t\tfor (var j = i + 1; j < length; j++, k++) {\r\n\t\t\tproduct = digits[j] * digits[i] * 2 + imult1[k] + carry;\r\n\t\t\tcarry = (product / BigInteger_base) | 0;\r\n\t\t\timult1[k] = product % BigInteger_base;\r\n\t\t}\r\n\t\tk = length + i;\r\n\t\tvar digit = carry + imult1[k];\r\n\t\tcarry = (digit / BigInteger_base) | 0;\r\n\t\timult1[k] = digit % BigInteger_base;\r\n\t\timult1[k + 1] += carry;\r\n\t}\r\n\r\n\treturn new BigInteger(imult1, 1, CONSTRUCT);\r\n};\r\n\r\n/*\r\n\tFunction: quotient\r\n\tDivide two <BigIntegers> and truncate towards zero.\r\n\r\n\t<quotient> throws an exception if *n* is zero.\r\n\r\n\tParameters:\r\n\r\n\t\tn - The number to divide *this* by. Will be converted to a <BigInteger>.\r\n\r\n\tReturns:\r\n\r\n\t\tThe *this* / *n*, truncated to an integer.\r\n\r\n\tSee Also:\r\n\r\n\t\t<add>, <subtract>, <multiply>, <divRem>, <remainder>\r\n*/\r\nBigInteger.prototype.quotient = function(n) {\r\n\treturn this.divRem(n)[0];\r\n};\r\n\r\n/*\r\n\tFunction: divide\r\n\tDeprecated synonym for <quotient>.\r\n*/\r\nBigInteger.prototype.divide = BigInteger.prototype.quotient;\r\n\r\n/*\r\n\tFunction: remainder\r\n\tCalculate the remainder of two <BigIntegers>.\r\n\r\n\t<remainder> throws an exception if *n* is zero.\r\n\r\n\tParameters:\r\n\r\n\t\tn - The remainder after *this* is divided *this* by *n*. Will be\r\n\t\t\tconverted to a <BigInteger>.\r\n\r\n\tReturns:\r\n\r\n\t\t*this* % *n*.\r\n\r\n\tSee Also:\r\n\r\n\t\t<divRem>, <quotient>\r\n*/\r\nBigInteger.prototype.remainder = function(n) {\r\n\treturn this.divRem(n)[1];\r\n};\r\n\r\n/*\r\n\tFunction: divRem\r\n\tCalculate the integer quotient and remainder of two <BigIntegers>.\r\n\r\n\t<divRem> throws an exception if *n* is zero.\r\n\r\n\tParameters:\r\n\r\n\t\tn - The number to divide *this* by. Will be converted to a <BigInteger>.\r\n\r\n\tReturns:\r\n\r\n\t\tA two-element array containing the quotient and the remainder.\r\n\r\n\t\t> a.divRem(b)\r\n\r\n\t\tis exactly equivalent to\r\n\r\n\t\t> [a.quotient(b), a.remainder(b)]\r\n\r\n\t\texcept it is faster, because they are calculated at the same time.\r\n\r\n\tSee Also:\r\n\r\n\t\t<quotient>, <remainder>\r\n*/\r\nBigInteger.prototype.divRem = function(n) {\r\n\tn = BigInteger(n);\r\n\tif (n._s === 0) {\r\n\t\tthrow new Error(\"Divide by zero\");\r\n\t}\r\n\tif (this._s === 0) {\r\n\t\treturn [ZERO, ZERO];\r\n\t}\r\n\tif (n._d.length === 1) {\r\n\t\treturn this.divRemSmall(n._s * n._d[0]);\r\n\t}\r\n\r\n\t// Test for easy cases -- |n1| <= |n2|\r\n\tswitch (this.compareAbs(n)) {\r\n\tcase 0: // n1 == n2\r\n\t\treturn [this._s === n._s ? ONE : M_ONE, ZERO];\r\n\tcase -1: // |n1| < |n2|\r\n\t\treturn [ZERO, this];\r\n\t}\r\n\r\n\tvar sign = this._s * n._s;\r\n\tvar a = n.abs();\r\n\tvar b_digits = this._d;\r\n\tvar b_index = b_digits.length;\r\n\tvar digits = n._d.length;\r\n\tvar quot = [];\r\n\tvar guess;\r\n\r\n\tvar part = new BigInteger([], 0, CONSTRUCT);\r\n\r\n\twhile (b_index) {\r\n\t\tpart._d.unshift(b_digits[--b_index]);\r\n\t\tpart = new BigInteger(part._d, 1, CONSTRUCT);\r\n\r\n\t\tif (part.compareAbs(n) < 0) {\r\n\t\t\tquot.push(0);\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tif (part._s === 0) {\r\n\t\t\tguess = 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tvar xlen = part._d.length, ylen = a._d.length;\r\n\t\t\tvar highx = part._d[xlen-1]*BigInteger_base + part._d[xlen-2];\r\n\t\t\tvar highy = a._d[ylen-1]*BigInteger_base + a._d[ylen-2];\r\n\t\t\tif (part._d.length > a._d.length) {\r\n\t\t\t\t// The length of part._d can either match a._d length,\r\n\t\t\t\t// or exceed it by one.\r\n\t\t\t\thighx = (highx+1)*BigInteger_base;\r\n\t\t\t}\r\n\t\t\tguess = Math.ceil(highx/highy);\r\n\t\t}\r\n\t\tdo {\r\n\t\t\tvar check = a.multiplySingleDigit(guess);\r\n\t\t\tif (check.compareAbs(part) <= 0) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tguess--;\r\n\t\t} while (guess);\r\n\r\n\t\tquot.push(guess);\r\n\t\tif (!guess) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tvar diff = part.subtract(check);\r\n\t\tpart._d = diff._d.slice();\r\n\t}\r\n\r\n\treturn [new BigInteger(quot.reverse(), sign, CONSTRUCT),\r\n\t\t   new BigInteger(part._d, this._s, CONSTRUCT)];\r\n};\r\n\r\n// Throws an exception if n is outside of (-BigInteger.base, -1] or\r\n// [1, BigInteger.base).  It's not necessary to call this, since the\r\n// other division functions will call it if they are able to.\r\nBigInteger.prototype.divRemSmall = function(n) {\r\n\tvar r;\r\n\tn = +n;\r\n\tif (n === 0) {\r\n\t\tthrow new Error(\"Divide by zero\");\r\n\t}\r\n\r\n\tvar n_s = n < 0 ? -1 : 1;\r\n\tvar sign = this._s * n_s;\r\n\tn = Math.abs(n);\r\n\r\n\tif (n < 1 || n >= BigInteger_base) {\r\n\t\tthrow new Error(\"Argument out of range\");\r\n\t}\r\n\r\n\tif (this._s === 0) {\r\n\t\treturn [ZERO, ZERO];\r\n\t}\r\n\r\n\tif (n === 1 || n === -1) {\r\n\t\treturn [(sign === 1) ? this.abs() : new BigInteger(this._d, sign, CONSTRUCT), ZERO];\r\n\t}\r\n\r\n\t// 2 <= n < BigInteger_base\r\n\r\n\t// divide a single digit by a single digit\r\n\tif (this._d.length === 1) {\r\n\t\tvar q = new BigInteger([(this._d[0] / n) | 0], 1, CONSTRUCT);\r\n\t\tr = new BigInteger([(this._d[0] % n) | 0], 1, CONSTRUCT);\r\n\t\tif (sign < 0) {\r\n\t\t\tq = q.negate();\r\n\t\t}\r\n\t\tif (this._s < 0) {\r\n\t\t\tr = r.negate();\r\n\t\t}\r\n\t\treturn [q, r];\r\n\t}\r\n\r\n\tvar digits = this._d.slice();\r\n\tvar quot = new Array(digits.length);\r\n\tvar part = 0;\r\n\tvar diff = 0;\r\n\tvar i = 0;\r\n\tvar guess;\r\n\r\n\twhile (digits.length) {\r\n\t\tpart = part * BigInteger_base + digits[digits.length - 1];\r\n\t\tif (part < n) {\r\n\t\t\tquot[i++] = 0;\r\n\t\t\tdigits.pop();\r\n\t\t\tdiff = BigInteger_base * diff + part;\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tif (part === 0) {\r\n\t\t\tguess = 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tguess = (part / n) | 0;\r\n\t\t}\r\n\r\n\t\tvar check = n * guess;\r\n\t\tdiff = part - check;\r\n\t\tquot[i++] = guess;\r\n\t\tif (!guess) {\r\n\t\t\tdigits.pop();\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tdigits.pop();\r\n\t\tpart = diff;\r\n\t}\r\n\r\n\tr = new BigInteger([diff], 1, CONSTRUCT);\r\n\tif (this._s < 0) {\r\n\t\tr = r.negate();\r\n\t}\r\n\treturn [new BigInteger(quot.reverse(), sign, CONSTRUCT), r];\r\n};\r\n\r\n/*\r\n\tFunction: isEven\r\n\tReturn true iff *this* is divisible by two.\r\n\r\n\tNote that <BigInteger.ZERO> is even.\r\n\r\n\tReturns:\r\n\r\n\t\ttrue if *this* is even, false otherwise.\r\n\r\n\tSee Also:\r\n\r\n\t\t<isOdd>\r\n*/\r\nBigInteger.prototype.isEven = function() {\r\n\tvar digits = this._d;\r\n\treturn this._s === 0 || digits.length === 0 || (digits[0] % 2) === 0;\r\n};\r\n\r\n/*\r\n\tFunction: isOdd\r\n\tReturn true iff *this* is not divisible by two.\r\n\r\n\tReturns:\r\n\r\n\t\ttrue if *this* is odd, false otherwise.\r\n\r\n\tSee Also:\r\n\r\n\t\t<isEven>\r\n*/\r\nBigInteger.prototype.isOdd = function() {\r\n\treturn !this.isEven();\r\n};\r\n\r\n/*\r\n\tFunction: sign\r\n\tGet the sign of a <BigInteger>.\r\n\r\n\tReturns:\r\n\r\n\t\t* -1 if *this* < 0\r\n\t\t* 0 if *this* == 0\r\n\t\t* +1 if *this* > 0\r\n\r\n\tSee Also:\r\n\r\n\t\t<isZero>, <isPositive>, <isNegative>, <compare>, <BigInteger.ZERO>\r\n*/\r\nBigInteger.prototype.sign = function() {\r\n\treturn this._s;\r\n};\r\n\r\n/*\r\n\tFunction: isPositive\r\n\tReturn true iff *this* > 0.\r\n\r\n\tReturns:\r\n\r\n\t\ttrue if *this*.compare(<BigInteger.ZERO>) == 1.\r\n\r\n\tSee Also:\r\n\r\n\t\t<sign>, <isZero>, <isNegative>, <isUnit>, <compare>, <BigInteger.ZERO>\r\n*/\r\nBigInteger.prototype.isPositive = function() {\r\n\treturn this._s > 0;\r\n};\r\n\r\n/*\r\n\tFunction: isNegative\r\n\tReturn true iff *this* < 0.\r\n\r\n\tReturns:\r\n\r\n\t\ttrue if *this*.compare(<BigInteger.ZERO>) == -1.\r\n\r\n\tSee Also:\r\n\r\n\t\t<sign>, <isPositive>, <isZero>, <isUnit>, <compare>, <BigInteger.ZERO>\r\n*/\r\nBigInteger.prototype.isNegative = function() {\r\n\treturn this._s < 0;\r\n};\r\n\r\n/*\r\n\tFunction: isZero\r\n\tReturn true iff *this* == 0.\r\n\r\n\tReturns:\r\n\r\n\t\ttrue if *this*.compare(<BigInteger.ZERO>) == 0.\r\n\r\n\tSee Also:\r\n\r\n\t\t<sign>, <isPositive>, <isNegative>, <isUnit>, <BigInteger.ZERO>\r\n*/\r\nBigInteger.prototype.isZero = function() {\r\n\treturn this._s === 0;\r\n};\r\n\r\n/*\r\n\tFunction: exp10\r\n\tMultiply a <BigInteger> by a power of 10.\r\n\r\n\tThis is equivalent to, but faster than\r\n\r\n\t> if (n >= 0) {\r\n\t>\t return this.multiply(BigInteger(\"1e\" + n));\r\n\t> }\r\n\t> else { // n <= 0\r\n\t>\t return this.quotient(BigInteger(\"1e\" + -n));\r\n\t> }\r\n\r\n\tParameters:\r\n\r\n\t\tn - The power of 10 to multiply *this* by. *n* is converted to a\r\n\t\tjavascipt number and must be no greater than <BigInteger.MAX_EXP>\r\n\t\t(0x7FFFFFFF), or an exception will be thrown.\r\n\r\n\tReturns:\r\n\r\n\t\t*this* * (10 ** *n*), truncated to an integer if necessary.\r\n\r\n\tSee Also:\r\n\r\n\t\t<pow>, <multiply>\r\n*/\r\nBigInteger.prototype.exp10 = function(n) {\r\n\tn = +n;\r\n\tif (n === 0) {\r\n\t\treturn this;\r\n\t}\r\n\tif (Math.abs(n) > Number(MAX_EXP)) {\r\n\t\tthrow new Error(\"exponent too large in BigInteger.exp10\");\r\n\t}\r\n\t// Optimization for this == 0. This also keeps us from having to trim zeros in the positive n case\r\n\tif (this._s === 0) {\r\n\t\treturn ZERO;\r\n\t}\r\n\tif (n > 0) {\r\n\t\tvar k = new BigInteger(this._d.slice(), this._s, CONSTRUCT);\r\n\r\n\t\tfor (; n >= BigInteger_base_log10; n -= BigInteger_base_log10) {\r\n\t\t\tk._d.unshift(0);\r\n\t\t}\r\n\t\tif (n == 0)\r\n\t\t\treturn k;\r\n\t\tk._s = 1;\r\n\t\tk = k.multiplySingleDigit(Math.pow(10, n));\r\n\t\treturn (this._s < 0 ? k.negate() : k);\r\n\t} else if (-n >= this._d.length*BigInteger_base_log10) {\r\n\t\treturn ZERO;\r\n\t} else {\r\n\t\tvar k = new BigInteger(this._d.slice(), this._s, CONSTRUCT);\r\n\r\n\t\tfor (n = -n; n >= BigInteger_base_log10; n -= BigInteger_base_log10) {\r\n\t\t\tk._d.shift();\r\n\t\t}\r\n\t\treturn (n == 0) ? k : k.divRemSmall(Math.pow(10, n))[0];\r\n\t}\r\n};\r\n\r\n/*\r\n\tFunction: pow\r\n\tRaise a <BigInteger> to a power.\r\n\r\n\tIn this implementation, 0**0 is 1.\r\n\r\n\tParameters:\r\n\r\n\t\tn - The exponent to raise *this* by. *n* must be no greater than\r\n\t\t<BigInteger.MAX_EXP> (0x7FFFFFFF), or an exception will be thrown.\r\n\r\n\tReturns:\r\n\r\n\t\t*this* raised to the *nth* power.\r\n\r\n\tSee Also:\r\n\r\n\t\t<modPow>\r\n*/\r\nBigInteger.prototype.pow = function(n) {\r\n\tif (this.isUnit()) {\r\n\t\tif (this._s > 0) {\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn BigInteger(n).isOdd() ? this : this.negate();\r\n\t\t}\r\n\t}\r\n\r\n\tn = BigInteger(n);\r\n\tif (n._s === 0) {\r\n\t\treturn ONE;\r\n\t}\r\n\telse if (n._s < 0) {\r\n\t\tif (this._s === 0) {\r\n\t\t\tthrow new Error(\"Divide by zero\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn ZERO;\r\n\t\t}\r\n\t}\r\n\tif (this._s === 0) {\r\n\t\treturn ZERO;\r\n\t}\r\n\tif (n.isUnit()) {\r\n\t\treturn this;\r\n\t}\r\n\r\n\tif (n.compareAbs(MAX_EXP) > 0) {\r\n\t\tthrow new Error(\"exponent too large in BigInteger.pow\");\r\n\t}\r\n\tvar x = this;\r\n\tvar aux = ONE;\r\n\tvar two = BigInteger.small[2];\r\n\r\n\twhile (n.isPositive()) {\r\n\t\tif (n.isOdd()) {\r\n\t\t\taux = aux.multiply(x);\r\n\t\t\tif (n.isUnit()) {\r\n\t\t\t\treturn aux;\r\n\t\t\t}\r\n\t\t}\r\n\t\tx = x.square();\r\n\t\tn = n.quotient(two);\r\n\t}\r\n\r\n\treturn aux;\r\n};\r\n\r\n/*\r\n\tFunction: modPow\r\n\tRaise a <BigInteger> to a power (mod m).\r\n\r\n\tBecause it is reduced by a modulus, <modPow> is not limited by\r\n\t<BigInteger.MAX_EXP> like <pow>.\r\n\r\n\tParameters:\r\n\r\n\t\texponent - The exponent to raise *this* by. Must be positive.\r\n\t\tmodulus - The modulus.\r\n\r\n\tReturns:\r\n\r\n\t\t*this* ^ *exponent* (mod *modulus*).\r\n\r\n\tSee Also:\r\n\r\n\t\t<pow>, <mod>\r\n*/\r\nBigInteger.prototype.modPow = function(exponent, modulus) {\r\n\tvar result = ONE;\r\n\tvar base = this;\r\n\r\n\twhile (exponent.isPositive()) {\r\n\t\tif (exponent.isOdd()) {\r\n\t\t\tresult = result.multiply(base).remainder(modulus);\r\n\t\t}\r\n\r\n\t\texponent = exponent.quotient(BigInteger.small[2]);\r\n\t\tif (exponent.isPositive()) {\r\n\t\t\tbase = base.square().remainder(modulus);\r\n\t\t}\r\n\t}\r\n\r\n\treturn result;\r\n};\r\n\r\n/*\r\n\tFunction: log\r\n\tGet the natural logarithm of a <BigInteger> as a native JavaScript number.\r\n\r\n\tThis is equivalent to\r\n\r\n\t> Math.log(this.toJSValue())\r\n\r\n\tbut handles values outside of the native number range.\r\n\r\n\tReturns:\r\n\r\n\t\tlog( *this* )\r\n\r\n\tSee Also:\r\n\r\n\t\t<toJSValue>\r\n*/\r\nBigInteger.prototype.log = function() {\r\n\tswitch (this._s) {\r\n\tcase 0:\t return -Infinity;\r\n\tcase -1: return NaN;\r\n\tdefault: // Fall through.\r\n\t}\r\n\r\n\tvar l = this._d.length;\r\n\r\n\tif (l*BigInteger_base_log10 < 30) {\r\n\t\treturn Math.log(this.valueOf());\r\n\t}\r\n\r\n\tvar N = Math.ceil(30/BigInteger_base_log10);\r\n\tvar firstNdigits = this._d.slice(l - N);\r\n\treturn Math.log((new BigInteger(firstNdigits, 1, CONSTRUCT)).valueOf()) + (l - N) * Math.log(BigInteger_base);\r\n};\r\n\r\n/*\r\n\tFunction: valueOf\r\n\tConvert a <BigInteger> to a native JavaScript integer.\r\n\r\n\tThis is called automatically by JavaScipt to convert a <BigInteger> to a\r\n\tnative value.\r\n\r\n\tReturns:\r\n\r\n\t\t> parseInt(this.toString(), 10)\r\n\r\n\tSee Also:\r\n\r\n\t\t<toString>, <toJSValue>\r\n*/\r\nBigInteger.prototype.valueOf = function() {\r\n\treturn parseInt(this.toString(), 10);\r\n};\r\n\r\n/*\r\n\tFunction: toJSValue\r\n\tConvert a <BigInteger> to a native JavaScript integer.\r\n\r\n\tThis is the same as valueOf, but more explicitly named.\r\n\r\n\tReturns:\r\n\r\n\t\t> parseInt(this.toString(), 10)\r\n\r\n\tSee Also:\r\n\r\n\t\t<toString>, <valueOf>\r\n*/\r\nBigInteger.prototype.toJSValue = function() {\r\n\treturn parseInt(this.toString(), 10);\r\n};\r\n\r\n/*\r\n\tFunction: lowVal\r\n\tAuthor: Lucas Jones\r\n*/\r\nBigInteger.prototype.lowVal = function () {\r\n\treturn this._d[0] || 0;\r\n};\r\n\r\nvar MAX_EXP = BigInteger(0x7FFFFFFF);\r\n// Constant: MAX_EXP\r\n// The largest exponent allowed in <pow> and <exp10> (0x7FFFFFFF or 2147483647).\r\nBigInteger.MAX_EXP = MAX_EXP;\r\n\r\n(function() {\r\n\tfunction makeUnary(fn) {\r\n\t\treturn function(a) {\r\n\t\t\treturn fn.call(BigInteger(a));\r\n\t\t};\r\n\t}\r\n\r\n\tfunction makeBinary(fn) {\r\n\t\treturn function(a, b) {\r\n\t\t\treturn fn.call(BigInteger(a), BigInteger(b));\r\n\t\t};\r\n\t}\r\n\r\n\tfunction makeTrinary(fn) {\r\n\t\treturn function(a, b, c) {\r\n\t\t\treturn fn.call(BigInteger(a), BigInteger(b), BigInteger(c));\r\n\t\t};\r\n\t}\r\n\r\n\t(function() {\r\n\t\tvar i, fn;\r\n\t\tvar unary = \"toJSValue,isEven,isOdd,sign,isZero,isNegative,abs,isUnit,square,negate,isPositive,toString,next,prev,log\".split(\",\");\r\n\t\tvar binary = \"compare,remainder,divRem,subtract,add,quotient,divide,multiply,pow,compareAbs\".split(\",\");\r\n\t\tvar trinary = [\"modPow\"];\r\n\r\n\t\tfor (i = 0; i < unary.length; i++) {\r\n\t\t\tfn = unary[i];\r\n\t\t\tBigInteger[fn] = makeUnary(BigInteger.prototype[fn]);\r\n\t\t}\r\n\r\n\t\tfor (i = 0; i < binary.length; i++) {\r\n\t\t\tfn = binary[i];\r\n\t\t\tBigInteger[fn] = makeBinary(BigInteger.prototype[fn]);\r\n\t\t}\r\n\r\n\t\tfor (i = 0; i < trinary.length; i++) {\r\n\t\t\tfn = trinary[i];\r\n\t\t\tBigInteger[fn] = makeTrinary(BigInteger.prototype[fn]);\r\n\t\t}\r\n\r\n\t\tBigInteger.exp10 = function(x, n) {\r\n\t\t\treturn BigInteger(x).exp10(n);\r\n\t\t};\r\n\t})();\r\n})();\r\n\r\nexports.BigInteger = BigInteger;\r\n})( true ? exports : undefined);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./libs/mymonero-app-js/local_modules/mymonero_core_js/cryptonote_utils/biginteger.js\n");

/***/ }),

/***/ "./libs/mymonero-app-js/local_modules/mymonero_core_js/cryptonote_utils/moment.js":
/*!****************************************************************************************!*\
  !*** ./libs/mymonero-app-js/local_modules/mymonero_core_js/cryptonote_utils/moment.js ***!
  \****************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {var require;//! moment.js\r\n\r\n;(function (global, factory) {\r\n     true ? module.exports = factory() :\r\n    undefined\r\n}(this, (function () { 'use strict';\r\n\r\n    var hookCallback;\r\n\r\n    function hooks () {\r\n        return hookCallback.apply(null, arguments);\r\n    }\r\n\r\n    // This is done to register the method called with moment()\r\n    // without creating circular dependencies.\r\n    function setHookCallback (callback) {\r\n        hookCallback = callback;\r\n    }\r\n\r\n    function isArray(input) {\r\n        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';\r\n    }\r\n\r\n    function isObject(input) {\r\n        // IE8 will treat undefined and null as object if it wasn't for\r\n        // input != null\r\n        return input != null && Object.prototype.toString.call(input) === '[object Object]';\r\n    }\r\n\r\n    function isObjectEmpty(obj) {\r\n        if (Object.getOwnPropertyNames) {\r\n            return (Object.getOwnPropertyNames(obj).length === 0);\r\n        } else {\r\n            var k;\r\n            for (k in obj) {\r\n                if (obj.hasOwnProperty(k)) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function isUndefined(input) {\r\n        return input === void 0;\r\n    }\r\n\r\n    function isNumber(input) {\r\n        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';\r\n    }\r\n\r\n    function isDate(input) {\r\n        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';\r\n    }\r\n\r\n    function map(arr, fn) {\r\n        var res = [], i;\r\n        for (i = 0; i < arr.length; ++i) {\r\n            res.push(fn(arr[i], i));\r\n        }\r\n        return res;\r\n    }\r\n\r\n    function hasOwnProp(a, b) {\r\n        return Object.prototype.hasOwnProperty.call(a, b);\r\n    }\r\n\r\n    function extend(a, b) {\r\n        for (var i in b) {\r\n            if (hasOwnProp(b, i)) {\r\n                a[i] = b[i];\r\n            }\r\n        }\r\n\r\n        if (hasOwnProp(b, 'toString')) {\r\n            a.toString = b.toString;\r\n        }\r\n\r\n        if (hasOwnProp(b, 'valueOf')) {\r\n            a.valueOf = b.valueOf;\r\n        }\r\n\r\n        return a;\r\n    }\r\n\r\n    function createUTC (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\r\n    }\r\n\r\n    function defaultParsingFlags() {\r\n        // We need to deep clone this object.\r\n        return {\r\n            empty           : false,\r\n            unusedTokens    : [],\r\n            unusedInput     : [],\r\n            overflow        : -2,\r\n            charsLeftOver   : 0,\r\n            nullInput       : false,\r\n            invalidMonth    : null,\r\n            invalidFormat   : false,\r\n            userInvalidated : false,\r\n            iso             : false,\r\n            parsedDateParts : [],\r\n            meridiem        : null,\r\n            rfc2822         : false,\r\n            weekdayMismatch : false\r\n        };\r\n    }\r\n\r\n    function getParsingFlags(m) {\r\n        if (m._pf == null) {\r\n            m._pf = defaultParsingFlags();\r\n        }\r\n        return m._pf;\r\n    }\r\n\r\n    var some;\r\n    if (Array.prototype.some) {\r\n        some = Array.prototype.some;\r\n    } else {\r\n        some = function (fun) {\r\n            var t = Object(this);\r\n            var len = t.length >>> 0;\r\n\r\n            for (var i = 0; i < len; i++) {\r\n                if (i in t && fun.call(this, t[i], i, t)) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        };\r\n    }\r\n\r\n    function isValid(m) {\r\n        if (m._isValid == null) {\r\n            var flags = getParsingFlags(m);\r\n            var parsedParts = some.call(flags.parsedDateParts, function (i) {\r\n                return i != null;\r\n            });\r\n            var isNowValid = !isNaN(m._d.getTime()) &&\r\n                flags.overflow < 0 &&\r\n                !flags.empty &&\r\n                !flags.invalidMonth &&\r\n                !flags.invalidWeekday &&\r\n                !flags.weekdayMismatch &&\r\n                !flags.nullInput &&\r\n                !flags.invalidFormat &&\r\n                !flags.userInvalidated &&\r\n                (!flags.meridiem || (flags.meridiem && parsedParts));\r\n\r\n            if (m._strict) {\r\n                isNowValid = isNowValid &&\r\n                    flags.charsLeftOver === 0 &&\r\n                    flags.unusedTokens.length === 0 &&\r\n                    flags.bigHour === undefined;\r\n            }\r\n\r\n            if (Object.isFrozen == null || !Object.isFrozen(m)) {\r\n                m._isValid = isNowValid;\r\n            }\r\n            else {\r\n                return isNowValid;\r\n            }\r\n        }\r\n        return m._isValid;\r\n    }\r\n\r\n    function createInvalid (flags) {\r\n        var m = createUTC(NaN);\r\n        if (flags != null) {\r\n            extend(getParsingFlags(m), flags);\r\n        }\r\n        else {\r\n            getParsingFlags(m).userInvalidated = true;\r\n        }\r\n\r\n        return m;\r\n    }\r\n\r\n    // Plugins that add properties should also add the key here (null value),\r\n    // so we can properly clone ourselves.\r\n    var momentProperties = hooks.momentProperties = [];\r\n\r\n    function copyConfig(to, from) {\r\n        var i, prop, val;\r\n\r\n        if (!isUndefined(from._isAMomentObject)) {\r\n            to._isAMomentObject = from._isAMomentObject;\r\n        }\r\n        if (!isUndefined(from._i)) {\r\n            to._i = from._i;\r\n        }\r\n        if (!isUndefined(from._f)) {\r\n            to._f = from._f;\r\n        }\r\n        if (!isUndefined(from._l)) {\r\n            to._l = from._l;\r\n        }\r\n        if (!isUndefined(from._strict)) {\r\n            to._strict = from._strict;\r\n        }\r\n        if (!isUndefined(from._tzm)) {\r\n            to._tzm = from._tzm;\r\n        }\r\n        if (!isUndefined(from._isUTC)) {\r\n            to._isUTC = from._isUTC;\r\n        }\r\n        if (!isUndefined(from._offset)) {\r\n            to._offset = from._offset;\r\n        }\r\n        if (!isUndefined(from._pf)) {\r\n            to._pf = getParsingFlags(from);\r\n        }\r\n        if (!isUndefined(from._locale)) {\r\n            to._locale = from._locale;\r\n        }\r\n\r\n        if (momentProperties.length > 0) {\r\n            for (i = 0; i < momentProperties.length; i++) {\r\n                prop = momentProperties[i];\r\n                val = from[prop];\r\n                if (!isUndefined(val)) {\r\n                    to[prop] = val;\r\n                }\r\n            }\r\n        }\r\n\r\n        return to;\r\n    }\r\n\r\n    var updateInProgress = false;\r\n\r\n    // Moment prototype object\r\n    function Moment(config) {\r\n        copyConfig(this, config);\r\n        this._d = new Date(config._d != null ? config._d.getTime() : NaN);\r\n        if (!this.isValid()) {\r\n            this._d = new Date(NaN);\r\n        }\r\n        // Prevent infinite loop in case updateOffset creates new moment\r\n        // objects.\r\n        if (updateInProgress === false) {\r\n            updateInProgress = true;\r\n            hooks.updateOffset(this);\r\n            updateInProgress = false;\r\n        }\r\n    }\r\n\r\n    function isMoment (obj) {\r\n        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);\r\n    }\r\n\r\n    function absFloor (number) {\r\n        if (number < 0) {\r\n            // -0 -> 0\r\n            return Math.ceil(number) || 0;\r\n        } else {\r\n            return Math.floor(number);\r\n        }\r\n    }\r\n\r\n    function toInt(argumentForCoercion) {\r\n        var coercedNumber = +argumentForCoercion,\r\n            value = 0;\r\n\r\n        if (coercedNumber !== 0 && isFinite(coercedNumber)) {\r\n            value = absFloor(coercedNumber);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    // compare two arrays, return the number of differences\r\n    function compareArrays(array1, array2, dontConvert) {\r\n        var len = Math.min(array1.length, array2.length),\r\n            lengthDiff = Math.abs(array1.length - array2.length),\r\n            diffs = 0,\r\n            i;\r\n        for (i = 0; i < len; i++) {\r\n            if ((dontConvert && array1[i] !== array2[i]) ||\r\n                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {\r\n                diffs++;\r\n            }\r\n        }\r\n        return diffs + lengthDiff;\r\n    }\r\n\r\n    function warn(msg) {\r\n        if (hooks.suppressDeprecationWarnings === false &&\r\n                (typeof console !==  'undefined') && console.warn) {\r\n            console.warn('Deprecation warning: ' + msg);\r\n        }\r\n    }\r\n\r\n    function deprecate(msg, fn) {\r\n        var firstTime = true;\r\n\r\n        return extend(function () {\r\n            if (hooks.deprecationHandler != null) {\r\n                hooks.deprecationHandler(null, msg);\r\n            }\r\n            if (firstTime) {\r\n                var args = [];\r\n                var arg;\r\n                for (var i = 0; i < arguments.length; i++) {\r\n                    arg = '';\r\n                    if (typeof arguments[i] === 'object') {\r\n                        arg += '\\n[' + i + '] ';\r\n                        for (var key in arguments[0]) {\r\n                            arg += key + ': ' + arguments[0][key] + ', ';\r\n                        }\r\n                        arg = arg.slice(0, -2); // Remove trailing comma and space\r\n                    } else {\r\n                        arg = arguments[i];\r\n                    }\r\n                    args.push(arg);\r\n                }\r\n                warn(msg + '\\nArguments: ' + Array.prototype.slice.call(args).join('') + '\\n' + (new Error()).stack);\r\n                firstTime = false;\r\n            }\r\n            return fn.apply(this, arguments);\r\n        }, fn);\r\n    }\r\n\r\n    var deprecations = {};\r\n\r\n    function deprecateSimple(name, msg) {\r\n        if (hooks.deprecationHandler != null) {\r\n            hooks.deprecationHandler(name, msg);\r\n        }\r\n        if (!deprecations[name]) {\r\n            warn(msg);\r\n            deprecations[name] = true;\r\n        }\r\n    }\r\n\r\n    hooks.suppressDeprecationWarnings = false;\r\n    hooks.deprecationHandler = null;\r\n\r\n    function isFunction(input) {\r\n        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';\r\n    }\r\n\r\n    function set (config) {\r\n        var prop, i;\r\n        for (i in config) {\r\n            prop = config[i];\r\n            if (isFunction(prop)) {\r\n                this[i] = prop;\r\n            } else {\r\n                this['_' + i] = prop;\r\n            }\r\n        }\r\n        this._config = config;\r\n        // Lenient ordinal parsing accepts just a number in addition to\r\n        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.\r\n        // TODO: Remove \"ordinalParse\" fallback in next major release.\r\n        this._dayOfMonthOrdinalParseLenient = new RegExp(\r\n            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +\r\n                '|' + (/\\d{1,2}/).source);\r\n    }\r\n\r\n    function mergeConfigs(parentConfig, childConfig) {\r\n        var res = extend({}, parentConfig), prop;\r\n        for (prop in childConfig) {\r\n            if (hasOwnProp(childConfig, prop)) {\r\n                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {\r\n                    res[prop] = {};\r\n                    extend(res[prop], parentConfig[prop]);\r\n                    extend(res[prop], childConfig[prop]);\r\n                } else if (childConfig[prop] != null) {\r\n                    res[prop] = childConfig[prop];\r\n                } else {\r\n                    delete res[prop];\r\n                }\r\n            }\r\n        }\r\n        for (prop in parentConfig) {\r\n            if (hasOwnProp(parentConfig, prop) &&\r\n                    !hasOwnProp(childConfig, prop) &&\r\n                    isObject(parentConfig[prop])) {\r\n                // make sure changes to properties don't modify parent config\r\n                res[prop] = extend({}, res[prop]);\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n\r\n    function Locale(config) {\r\n        if (config != null) {\r\n            this.set(config);\r\n        }\r\n    }\r\n\r\n    var keys;\r\n\r\n    if (Object.keys) {\r\n        keys = Object.keys;\r\n    } else {\r\n        keys = function (obj) {\r\n            var i, res = [];\r\n            for (i in obj) {\r\n                if (hasOwnProp(obj, i)) {\r\n                    res.push(i);\r\n                }\r\n            }\r\n            return res;\r\n        };\r\n    }\r\n\r\n    var defaultCalendar = {\r\n        sameDay : '[Today at] LT',\r\n        nextDay : '[Tomorrow at] LT',\r\n        nextWeek : 'dddd [at] LT',\r\n        lastDay : '[Yesterday at] LT',\r\n        lastWeek : '[Last] dddd [at] LT',\r\n        sameElse : 'L'\r\n    };\r\n\r\n    function calendar (key, mom, now) {\r\n        var output = this._calendar[key] || this._calendar['sameElse'];\r\n        return isFunction(output) ? output.call(mom, now) : output;\r\n    }\r\n\r\n    var defaultLongDateFormat = {\r\n        LTS  : 'h:mm:ss A',\r\n        LT   : 'h:mm A',\r\n        L    : 'MM/DD/YYYY',\r\n        LL   : 'MMMM D, YYYY',\r\n        LLL  : 'MMMM D, YYYY h:mm A',\r\n        LLLL : 'dddd, MMMM D, YYYY h:mm A'\r\n    };\r\n\r\n    function longDateFormat (key) {\r\n        var format = this._longDateFormat[key],\r\n            formatUpper = this._longDateFormat[key.toUpperCase()];\r\n\r\n        if (format || !formatUpper) {\r\n            return format;\r\n        }\r\n\r\n        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {\r\n            return val.slice(1);\r\n        });\r\n\r\n        return this._longDateFormat[key];\r\n    }\r\n\r\n    var defaultInvalidDate = 'Invalid date';\r\n\r\n    function invalidDate () {\r\n        return this._invalidDate;\r\n    }\r\n\r\n    var defaultOrdinal = '%d';\r\n    var defaultDayOfMonthOrdinalParse = /\\d{1,2}/;\r\n\r\n    function ordinal (number) {\r\n        return this._ordinal.replace('%d', number);\r\n    }\r\n\r\n    var defaultRelativeTime = {\r\n        future : 'in %s',\r\n        past   : '%s ago',\r\n        s  : 'a few seconds',\r\n        ss : '%d seconds',\r\n        m  : 'a minute',\r\n        mm : '%d minutes',\r\n        h  : 'an hour',\r\n        hh : '%d hours',\r\n        d  : 'a day',\r\n        dd : '%d days',\r\n        M  : 'a month',\r\n        MM : '%d months',\r\n        y  : 'a year',\r\n        yy : '%d years'\r\n    };\r\n\r\n    function relativeTime (number, withoutSuffix, string, isFuture) {\r\n        var output = this._relativeTime[string];\r\n        return (isFunction(output)) ?\r\n            output(number, withoutSuffix, string, isFuture) :\r\n            output.replace(/%d/i, number);\r\n    }\r\n\r\n    function pastFuture (diff, output) {\r\n        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];\r\n        return isFunction(format) ? format(output) : format.replace(/%s/i, output);\r\n    }\r\n\r\n    var aliases = {};\r\n\r\n    function addUnitAlias (unit, shorthand) {\r\n        var lowerCase = unit.toLowerCase();\r\n        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;\r\n    }\r\n\r\n    function normalizeUnits(units) {\r\n        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;\r\n    }\r\n\r\n    function normalizeObjectUnits(inputObject) {\r\n        var normalizedInput = {},\r\n            normalizedProp,\r\n            prop;\r\n\r\n        for (prop in inputObject) {\r\n            if (hasOwnProp(inputObject, prop)) {\r\n                normalizedProp = normalizeUnits(prop);\r\n                if (normalizedProp) {\r\n                    normalizedInput[normalizedProp] = inputObject[prop];\r\n                }\r\n            }\r\n        }\r\n\r\n        return normalizedInput;\r\n    }\r\n\r\n    var priorities = {};\r\n\r\n    function addUnitPriority(unit, priority) {\r\n        priorities[unit] = priority;\r\n    }\r\n\r\n    function getPrioritizedUnits(unitsObj) {\r\n        var units = [];\r\n        for (var u in unitsObj) {\r\n            units.push({unit: u, priority: priorities[u]});\r\n        }\r\n        units.sort(function (a, b) {\r\n            return a.priority - b.priority;\r\n        });\r\n        return units;\r\n    }\r\n\r\n    function zeroFill(number, targetLength, forceSign) {\r\n        var absNumber = '' + Math.abs(number),\r\n            zerosToFill = targetLength - absNumber.length,\r\n            sign = number >= 0;\r\n        return (sign ? (forceSign ? '+' : '') : '-') +\r\n            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;\r\n    }\r\n\r\n    var formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;\r\n\r\n    var localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g;\r\n\r\n    var formatFunctions = {};\r\n\r\n    var formatTokenFunctions = {};\r\n\r\n    // token:    'M'\r\n    // padded:   ['MM', 2]\r\n    // ordinal:  'Mo'\r\n    // callback: function () { this.month() + 1 }\r\n    function addFormatToken (token, padded, ordinal, callback) {\r\n        var func = callback;\r\n        if (typeof callback === 'string') {\r\n            func = function () {\r\n                return this[callback]();\r\n            };\r\n        }\r\n        if (token) {\r\n            formatTokenFunctions[token] = func;\r\n        }\r\n        if (padded) {\r\n            formatTokenFunctions[padded[0]] = function () {\r\n                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);\r\n            };\r\n        }\r\n        if (ordinal) {\r\n            formatTokenFunctions[ordinal] = function () {\r\n                return this.localeData().ordinal(func.apply(this, arguments), token);\r\n            };\r\n        }\r\n    }\r\n\r\n    function removeFormattingTokens(input) {\r\n        if (input.match(/\\[[\\s\\S]/)) {\r\n            return input.replace(/^\\[|\\]$/g, '');\r\n        }\r\n        return input.replace(/\\\\/g, '');\r\n    }\r\n\r\n    function makeFormatFunction(format) {\r\n        var array = format.match(formattingTokens), i, length;\r\n\r\n        for (i = 0, length = array.length; i < length; i++) {\r\n            if (formatTokenFunctions[array[i]]) {\r\n                array[i] = formatTokenFunctions[array[i]];\r\n            } else {\r\n                array[i] = removeFormattingTokens(array[i]);\r\n            }\r\n        }\r\n\r\n        return function (mom) {\r\n            var output = '', i;\r\n            for (i = 0; i < length; i++) {\r\n                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];\r\n            }\r\n            return output;\r\n        };\r\n    }\r\n\r\n    // format date using native date object\r\n    function formatMoment(m, format) {\r\n        if (!m.isValid()) {\r\n            return m.localeData().invalidDate();\r\n        }\r\n\r\n        format = expandFormat(format, m.localeData());\r\n        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);\r\n\r\n        return formatFunctions[format](m);\r\n    }\r\n\r\n    function expandFormat(format, locale) {\r\n        var i = 5;\r\n\r\n        function replaceLongDateFormatTokens(input) {\r\n            return locale.longDateFormat(input) || input;\r\n        }\r\n\r\n        localFormattingTokens.lastIndex = 0;\r\n        while (i >= 0 && localFormattingTokens.test(format)) {\r\n            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);\r\n            localFormattingTokens.lastIndex = 0;\r\n            i -= 1;\r\n        }\r\n\r\n        return format;\r\n    }\r\n\r\n    var match1         = /\\d/;            //       0 - 9\r\n    var match2         = /\\d\\d/;          //      00 - 99\r\n    var match3         = /\\d{3}/;         //     000 - 999\r\n    var match4         = /\\d{4}/;         //    0000 - 9999\r\n    var match6         = /[+-]?\\d{6}/;    // -999999 - 999999\r\n    var match1to2      = /\\d\\d?/;         //       0 - 99\r\n    var match3to4      = /\\d\\d\\d\\d?/;     //     999 - 9999\r\n    var match5to6      = /\\d\\d\\d\\d\\d\\d?/; //   99999 - 999999\r\n    var match1to3      = /\\d{1,3}/;       //       0 - 999\r\n    var match1to4      = /\\d{1,4}/;       //       0 - 9999\r\n    var match1to6      = /[+-]?\\d{1,6}/;  // -999999 - 999999\r\n\r\n    var matchUnsigned  = /\\d+/;           //       0 - inf\r\n    var matchSigned    = /[+-]?\\d+/;      //    -inf - inf\r\n\r\n    var matchOffset    = /Z|[+-]\\d\\d:?\\d\\d/gi; // +00:00 -00:00 +0000 -0000 or Z\r\n    var matchShortOffset = /Z|[+-]\\d\\d(?::?\\d\\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z\r\n\r\n    var matchTimestamp = /[+-]?\\d+(\\.\\d{1,3})?/; // 123456789 123456789.123\r\n\r\n    // any word (or two) characters or numbers including two/three word month in arabic.\r\n    // includes scottish gaelic two word and hyphenated months\r\n    var matchWord = /[0-9]{0,256}['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFF07\\uFF10-\\uFFEF]{1,256}|[\\u0600-\\u06FF\\/]{1,256}(\\s*?[\\u0600-\\u06FF]{1,256}){1,2}/i;\r\n\r\n    var regexes = {};\r\n\r\n    function addRegexToken (token, regex, strictRegex) {\r\n        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {\r\n            return (isStrict && strictRegex) ? strictRegex : regex;\r\n        };\r\n    }\r\n\r\n    function getParseRegexForToken (token, config) {\r\n        if (!hasOwnProp(regexes, token)) {\r\n            return new RegExp(unescapeFormat(token));\r\n        }\r\n\r\n        return regexes[token](config._strict, config._locale);\r\n    }\r\n\r\n    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\r\n    function unescapeFormat(s) {\r\n        return regexEscape(s.replace('\\\\', '').replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (matched, p1, p2, p3, p4) {\r\n            return p1 || p2 || p3 || p4;\r\n        }));\r\n    }\r\n\r\n    function regexEscape(s) {\r\n        return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\r\n    }\r\n\r\n    var tokens = {};\r\n\r\n    function addParseToken (token, callback) {\r\n        var i, func = callback;\r\n        if (typeof token === 'string') {\r\n            token = [token];\r\n        }\r\n        if (isNumber(callback)) {\r\n            func = function (input, array) {\r\n                array[callback] = toInt(input);\r\n            };\r\n        }\r\n        for (i = 0; i < token.length; i++) {\r\n            tokens[token[i]] = func;\r\n        }\r\n    }\r\n\r\n    function addWeekParseToken (token, callback) {\r\n        addParseToken(token, function (input, array, config, token) {\r\n            config._w = config._w || {};\r\n            callback(input, config._w, config, token);\r\n        });\r\n    }\r\n\r\n    function addTimeToArrayFromToken(token, input, config) {\r\n        if (input != null && hasOwnProp(tokens, token)) {\r\n            tokens[token](input, config._a, config, token);\r\n        }\r\n    }\r\n\r\n    var YEAR = 0;\r\n    var MONTH = 1;\r\n    var DATE = 2;\r\n    var HOUR = 3;\r\n    var MINUTE = 4;\r\n    var SECOND = 5;\r\n    var MILLISECOND = 6;\r\n    var WEEK = 7;\r\n    var WEEKDAY = 8;\r\n\r\n    // FORMATTING\r\n\r\n    addFormatToken('Y', 0, 0, function () {\r\n        var y = this.year();\r\n        return y <= 9999 ? '' + y : '+' + y;\r\n    });\r\n\r\n    addFormatToken(0, ['YY', 2], 0, function () {\r\n        return this.year() % 100;\r\n    });\r\n\r\n    addFormatToken(0, ['YYYY',   4],       0, 'year');\r\n    addFormatToken(0, ['YYYYY',  5],       0, 'year');\r\n    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');\r\n\r\n    // ALIASES\r\n\r\n    addUnitAlias('year', 'y');\r\n\r\n    // PRIORITIES\r\n\r\n    addUnitPriority('year', 1);\r\n\r\n    // PARSING\r\n\r\n    addRegexToken('Y',      matchSigned);\r\n    addRegexToken('YY',     match1to2, match2);\r\n    addRegexToken('YYYY',   match1to4, match4);\r\n    addRegexToken('YYYYY',  match1to6, match6);\r\n    addRegexToken('YYYYYY', match1to6, match6);\r\n\r\n    addParseToken(['YYYYY', 'YYYYYY'], YEAR);\r\n    addParseToken('YYYY', function (input, array) {\r\n        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);\r\n    });\r\n    addParseToken('YY', function (input, array) {\r\n        array[YEAR] = hooks.parseTwoDigitYear(input);\r\n    });\r\n    addParseToken('Y', function (input, array) {\r\n        array[YEAR] = parseInt(input, 10);\r\n    });\r\n\r\n    // HELPERS\r\n\r\n    function daysInYear(year) {\r\n        return isLeapYear(year) ? 366 : 365;\r\n    }\r\n\r\n    function isLeapYear(year) {\r\n        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\r\n    }\r\n\r\n    // HOOKS\r\n\r\n    hooks.parseTwoDigitYear = function (input) {\r\n        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);\r\n    };\r\n\r\n    // MOMENTS\r\n\r\n    var getSetYear = makeGetSet('FullYear', true);\r\n\r\n    function getIsLeapYear () {\r\n        return isLeapYear(this.year());\r\n    }\r\n\r\n    function makeGetSet (unit, keepTime) {\r\n        return function (value) {\r\n            if (value != null) {\r\n                set$1(this, unit, value);\r\n                hooks.updateOffset(this, keepTime);\r\n                return this;\r\n            } else {\r\n                return get(this, unit);\r\n            }\r\n        };\r\n    }\r\n\r\n    function get (mom, unit) {\r\n        return mom.isValid() ?\r\n            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;\r\n    }\r\n\r\n    function set$1 (mom, unit, value) {\r\n        if (mom.isValid() && !isNaN(value)) {\r\n            if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {\r\n                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));\r\n            }\r\n            else {\r\n                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);\r\n            }\r\n        }\r\n    }\r\n\r\n    // MOMENTS\r\n\r\n    function stringGet (units) {\r\n        units = normalizeUnits(units);\r\n        if (isFunction(this[units])) {\r\n            return this[units]();\r\n        }\r\n        return this;\r\n    }\r\n\r\n\r\n    function stringSet (units, value) {\r\n        if (typeof units === 'object') {\r\n            units = normalizeObjectUnits(units);\r\n            var prioritized = getPrioritizedUnits(units);\r\n            for (var i = 0; i < prioritized.length; i++) {\r\n                this[prioritized[i].unit](units[prioritized[i].unit]);\r\n            }\r\n        } else {\r\n            units = normalizeUnits(units);\r\n            if (isFunction(this[units])) {\r\n                return this[units](value);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    function mod(n, x) {\r\n        return ((n % x) + x) % x;\r\n    }\r\n\r\n    var indexOf;\r\n\r\n    if (Array.prototype.indexOf) {\r\n        indexOf = Array.prototype.indexOf;\r\n    } else {\r\n        indexOf = function (o) {\r\n            // I know\r\n            var i;\r\n            for (i = 0; i < this.length; ++i) {\r\n                if (this[i] === o) {\r\n                    return i;\r\n                }\r\n            }\r\n            return -1;\r\n        };\r\n    }\r\n\r\n    function daysInMonth(year, month) {\r\n        if (isNaN(year) || isNaN(month)) {\r\n            return NaN;\r\n        }\r\n        var modMonth = mod(month, 12);\r\n        year += (month - modMonth) / 12;\r\n        return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : (31 - modMonth % 7 % 2);\r\n    }\r\n\r\n    // FORMATTING\r\n\r\n    addFormatToken('M', ['MM', 2], 'Mo', function () {\r\n        return this.month() + 1;\r\n    });\r\n\r\n    addFormatToken('MMM', 0, 0, function (format) {\r\n        return this.localeData().monthsShort(this, format);\r\n    });\r\n\r\n    addFormatToken('MMMM', 0, 0, function (format) {\r\n        return this.localeData().months(this, format);\r\n    });\r\n\r\n    // ALIASES\r\n\r\n    addUnitAlias('month', 'M');\r\n\r\n    // PRIORITY\r\n\r\n    addUnitPriority('month', 8);\r\n\r\n    // PARSING\r\n\r\n    addRegexToken('M',    match1to2);\r\n    addRegexToken('MM',   match1to2, match2);\r\n    addRegexToken('MMM',  function (isStrict, locale) {\r\n        return locale.monthsShortRegex(isStrict);\r\n    });\r\n    addRegexToken('MMMM', function (isStrict, locale) {\r\n        return locale.monthsRegex(isStrict);\r\n    });\r\n\r\n    addParseToken(['M', 'MM'], function (input, array) {\r\n        array[MONTH] = toInt(input) - 1;\r\n    });\r\n\r\n    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {\r\n        var month = config._locale.monthsParse(input, token, config._strict);\r\n        // if we didn't find a month name, mark the date as invalid.\r\n        if (month != null) {\r\n            array[MONTH] = month;\r\n        } else {\r\n            getParsingFlags(config).invalidMonth = input;\r\n        }\r\n    });\r\n\r\n    // LOCALES\r\n\r\n    var MONTHS_IN_FORMAT = /D[oD]?(\\[[^\\[\\]]*\\]|\\s)+MMMM?/;\r\n    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');\r\n    function localeMonths (m, format) {\r\n        if (!m) {\r\n            return isArray(this._months) ? this._months :\r\n                this._months['standalone'];\r\n        }\r\n        return isArray(this._months) ? this._months[m.month()] :\r\n            this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];\r\n    }\r\n\r\n    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');\r\n    function localeMonthsShort (m, format) {\r\n        if (!m) {\r\n            return isArray(this._monthsShort) ? this._monthsShort :\r\n                this._monthsShort['standalone'];\r\n        }\r\n        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :\r\n            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];\r\n    }\r\n\r\n    function handleStrictParse(monthName, format, strict) {\r\n        var i, ii, mom, llc = monthName.toLocaleLowerCase();\r\n        if (!this._monthsParse) {\r\n            // this is not used\r\n            this._monthsParse = [];\r\n            this._longMonthsParse = [];\r\n            this._shortMonthsParse = [];\r\n            for (i = 0; i < 12; ++i) {\r\n                mom = createUTC([2000, i]);\r\n                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();\r\n                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();\r\n            }\r\n        }\r\n\r\n        if (strict) {\r\n            if (format === 'MMM') {\r\n                ii = indexOf.call(this._shortMonthsParse, llc);\r\n                return ii !== -1 ? ii : null;\r\n            } else {\r\n                ii = indexOf.call(this._longMonthsParse, llc);\r\n                return ii !== -1 ? ii : null;\r\n            }\r\n        } else {\r\n            if (format === 'MMM') {\r\n                ii = indexOf.call(this._shortMonthsParse, llc);\r\n                if (ii !== -1) {\r\n                    return ii;\r\n                }\r\n                ii = indexOf.call(this._longMonthsParse, llc);\r\n                return ii !== -1 ? ii : null;\r\n            } else {\r\n                ii = indexOf.call(this._longMonthsParse, llc);\r\n                if (ii !== -1) {\r\n                    return ii;\r\n                }\r\n                ii = indexOf.call(this._shortMonthsParse, llc);\r\n                return ii !== -1 ? ii : null;\r\n            }\r\n        }\r\n    }\r\n\r\n    function localeMonthsParse (monthName, format, strict) {\r\n        var i, mom, regex;\r\n\r\n        if (this._monthsParseExact) {\r\n            return handleStrictParse.call(this, monthName, format, strict);\r\n        }\r\n\r\n        if (!this._monthsParse) {\r\n            this._monthsParse = [];\r\n            this._longMonthsParse = [];\r\n            this._shortMonthsParse = [];\r\n        }\r\n\r\n        // TODO: add sorting\r\n        // Sorting makes sure if one month (or abbr) is a prefix of another\r\n        // see sorting in computeMonthsParse\r\n        for (i = 0; i < 12; i++) {\r\n            // make the regex if we don't have it already\r\n            mom = createUTC([2000, i]);\r\n            if (strict && !this._longMonthsParse[i]) {\r\n                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');\r\n                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');\r\n            }\r\n            if (!strict && !this._monthsParse[i]) {\r\n                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');\r\n                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\r\n            }\r\n            // test the regex\r\n            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {\r\n                return i;\r\n            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {\r\n                return i;\r\n            } else if (!strict && this._monthsParse[i].test(monthName)) {\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n\r\n    // MOMENTS\r\n\r\n    function setMonth (mom, value) {\r\n        var dayOfMonth;\r\n\r\n        if (!mom.isValid()) {\r\n            // No op\r\n            return mom;\r\n        }\r\n\r\n        if (typeof value === 'string') {\r\n            if (/^\\d+$/.test(value)) {\r\n                value = toInt(value);\r\n            } else {\r\n                value = mom.localeData().monthsParse(value);\r\n                // TODO: Another silent failure?\r\n                if (!isNumber(value)) {\r\n                    return mom;\r\n                }\r\n            }\r\n        }\r\n\r\n        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));\r\n        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);\r\n        return mom;\r\n    }\r\n\r\n    function getSetMonth (value) {\r\n        if (value != null) {\r\n            setMonth(this, value);\r\n            hooks.updateOffset(this, true);\r\n            return this;\r\n        } else {\r\n            return get(this, 'Month');\r\n        }\r\n    }\r\n\r\n    function getDaysInMonth () {\r\n        return daysInMonth(this.year(), this.month());\r\n    }\r\n\r\n    var defaultMonthsShortRegex = matchWord;\r\n    function monthsShortRegex (isStrict) {\r\n        if (this._monthsParseExact) {\r\n            if (!hasOwnProp(this, '_monthsRegex')) {\r\n                computeMonthsParse.call(this);\r\n            }\r\n            if (isStrict) {\r\n                return this._monthsShortStrictRegex;\r\n            } else {\r\n                return this._monthsShortRegex;\r\n            }\r\n        } else {\r\n            if (!hasOwnProp(this, '_monthsShortRegex')) {\r\n                this._monthsShortRegex = defaultMonthsShortRegex;\r\n            }\r\n            return this._monthsShortStrictRegex && isStrict ?\r\n                this._monthsShortStrictRegex : this._monthsShortRegex;\r\n        }\r\n    }\r\n\r\n    var defaultMonthsRegex = matchWord;\r\n    function monthsRegex (isStrict) {\r\n        if (this._monthsParseExact) {\r\n            if (!hasOwnProp(this, '_monthsRegex')) {\r\n                computeMonthsParse.call(this);\r\n            }\r\n            if (isStrict) {\r\n                return this._monthsStrictRegex;\r\n            } else {\r\n                return this._monthsRegex;\r\n            }\r\n        } else {\r\n            if (!hasOwnProp(this, '_monthsRegex')) {\r\n                this._monthsRegex = defaultMonthsRegex;\r\n            }\r\n            return this._monthsStrictRegex && isStrict ?\r\n                this._monthsStrictRegex : this._monthsRegex;\r\n        }\r\n    }\r\n\r\n    function computeMonthsParse () {\r\n        function cmpLenRev(a, b) {\r\n            return b.length - a.length;\r\n        }\r\n\r\n        var shortPieces = [], longPieces = [], mixedPieces = [],\r\n            i, mom;\r\n        for (i = 0; i < 12; i++) {\r\n            // make the regex if we don't have it already\r\n            mom = createUTC([2000, i]);\r\n            shortPieces.push(this.monthsShort(mom, ''));\r\n            longPieces.push(this.months(mom, ''));\r\n            mixedPieces.push(this.months(mom, ''));\r\n            mixedPieces.push(this.monthsShort(mom, ''));\r\n        }\r\n        // Sorting makes sure if one month (or abbr) is a prefix of another it\r\n        // will match the longer piece.\r\n        shortPieces.sort(cmpLenRev);\r\n        longPieces.sort(cmpLenRev);\r\n        mixedPieces.sort(cmpLenRev);\r\n        for (i = 0; i < 12; i++) {\r\n            shortPieces[i] = regexEscape(shortPieces[i]);\r\n            longPieces[i] = regexEscape(longPieces[i]);\r\n        }\r\n        for (i = 0; i < 24; i++) {\r\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\r\n        }\r\n\r\n        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\r\n        this._monthsShortRegex = this._monthsRegex;\r\n        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\r\n        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\r\n    }\r\n\r\n    function createDate (y, m, d, h, M, s, ms) {\r\n        // can't just apply() to create a date:\r\n        // https://stackoverflow.com/q/181348\r\n        var date = new Date(y, m, d, h, M, s, ms);\r\n\r\n        // the date constructor remaps years 0-99 to 1900-1999\r\n        if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {\r\n            date.setFullYear(y);\r\n        }\r\n        return date;\r\n    }\r\n\r\n    function createUTCDate (y) {\r\n        var date = new Date(Date.UTC.apply(null, arguments));\r\n\r\n        // the Date.UTC function remaps years 0-99 to 1900-1999\r\n        if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {\r\n            date.setUTCFullYear(y);\r\n        }\r\n        return date;\r\n    }\r\n\r\n    // start-of-first-week - start-of-year\r\n    function firstWeekOffset(year, dow, doy) {\r\n        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)\r\n            fwd = 7 + dow - doy,\r\n            // first-week day local weekday -- which local weekday is fwd\r\n            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;\r\n\r\n        return -fwdlw + fwd - 1;\r\n    }\r\n\r\n    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday\r\n    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {\r\n        var localWeekday = (7 + weekday - dow) % 7,\r\n            weekOffset = firstWeekOffset(year, dow, doy),\r\n            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,\r\n            resYear, resDayOfYear;\r\n\r\n        if (dayOfYear <= 0) {\r\n            resYear = year - 1;\r\n            resDayOfYear = daysInYear(resYear) + dayOfYear;\r\n        } else if (dayOfYear > daysInYear(year)) {\r\n            resYear = year + 1;\r\n            resDayOfYear = dayOfYear - daysInYear(year);\r\n        } else {\r\n            resYear = year;\r\n            resDayOfYear = dayOfYear;\r\n        }\r\n\r\n        return {\r\n            year: resYear,\r\n            dayOfYear: resDayOfYear\r\n        };\r\n    }\r\n\r\n    function weekOfYear(mom, dow, doy) {\r\n        var weekOffset = firstWeekOffset(mom.year(), dow, doy),\r\n            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,\r\n            resWeek, resYear;\r\n\r\n        if (week < 1) {\r\n            resYear = mom.year() - 1;\r\n            resWeek = week + weeksInYear(resYear, dow, doy);\r\n        } else if (week > weeksInYear(mom.year(), dow, doy)) {\r\n            resWeek = week - weeksInYear(mom.year(), dow, doy);\r\n            resYear = mom.year() + 1;\r\n        } else {\r\n            resYear = mom.year();\r\n            resWeek = week;\r\n        }\r\n\r\n        return {\r\n            week: resWeek,\r\n            year: resYear\r\n        };\r\n    }\r\n\r\n    function weeksInYear(year, dow, doy) {\r\n        var weekOffset = firstWeekOffset(year, dow, doy),\r\n            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);\r\n        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;\r\n    }\r\n\r\n    // FORMATTING\r\n\r\n    addFormatToken('w', ['ww', 2], 'wo', 'week');\r\n    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');\r\n\r\n    // ALIASES\r\n\r\n    addUnitAlias('week', 'w');\r\n    addUnitAlias('isoWeek', 'W');\r\n\r\n    // PRIORITIES\r\n\r\n    addUnitPriority('week', 5);\r\n    addUnitPriority('isoWeek', 5);\r\n\r\n    // PARSING\r\n\r\n    addRegexToken('w',  match1to2);\r\n    addRegexToken('ww', match1to2, match2);\r\n    addRegexToken('W',  match1to2);\r\n    addRegexToken('WW', match1to2, match2);\r\n\r\n    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {\r\n        week[token.substr(0, 1)] = toInt(input);\r\n    });\r\n\r\n    // HELPERS\r\n\r\n    // LOCALES\r\n\r\n    function localeWeek (mom) {\r\n        return weekOfYear(mom, this._week.dow, this._week.doy).week;\r\n    }\r\n\r\n    var defaultLocaleWeek = {\r\n        dow : 0, // Sunday is the first day of the week.\r\n        doy : 6  // The week that contains Jan 1st is the first week of the year.\r\n    };\r\n\r\n    function localeFirstDayOfWeek () {\r\n        return this._week.dow;\r\n    }\r\n\r\n    function localeFirstDayOfYear () {\r\n        return this._week.doy;\r\n    }\r\n\r\n    // MOMENTS\r\n\r\n    function getSetWeek (input) {\r\n        var week = this.localeData().week(this);\r\n        return input == null ? week : this.add((input - week) * 7, 'd');\r\n    }\r\n\r\n    function getSetISOWeek (input) {\r\n        var week = weekOfYear(this, 1, 4).week;\r\n        return input == null ? week : this.add((input - week) * 7, 'd');\r\n    }\r\n\r\n    // FORMATTING\r\n\r\n    addFormatToken('d', 0, 'do', 'day');\r\n\r\n    addFormatToken('dd', 0, 0, function (format) {\r\n        return this.localeData().weekdaysMin(this, format);\r\n    });\r\n\r\n    addFormatToken('ddd', 0, 0, function (format) {\r\n        return this.localeData().weekdaysShort(this, format);\r\n    });\r\n\r\n    addFormatToken('dddd', 0, 0, function (format) {\r\n        return this.localeData().weekdays(this, format);\r\n    });\r\n\r\n    addFormatToken('e', 0, 0, 'weekday');\r\n    addFormatToken('E', 0, 0, 'isoWeekday');\r\n\r\n    // ALIASES\r\n\r\n    addUnitAlias('day', 'd');\r\n    addUnitAlias('weekday', 'e');\r\n    addUnitAlias('isoWeekday', 'E');\r\n\r\n    // PRIORITY\r\n    addUnitPriority('day', 11);\r\n    addUnitPriority('weekday', 11);\r\n    addUnitPriority('isoWeekday', 11);\r\n\r\n    // PARSING\r\n\r\n    addRegexToken('d',    match1to2);\r\n    addRegexToken('e',    match1to2);\r\n    addRegexToken('E',    match1to2);\r\n    addRegexToken('dd',   function (isStrict, locale) {\r\n        return locale.weekdaysMinRegex(isStrict);\r\n    });\r\n    addRegexToken('ddd',   function (isStrict, locale) {\r\n        return locale.weekdaysShortRegex(isStrict);\r\n    });\r\n    addRegexToken('dddd',   function (isStrict, locale) {\r\n        return locale.weekdaysRegex(isStrict);\r\n    });\r\n\r\n    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {\r\n        var weekday = config._locale.weekdaysParse(input, token, config._strict);\r\n        // if we didn't get a weekday name, mark the date as invalid\r\n        if (weekday != null) {\r\n            week.d = weekday;\r\n        } else {\r\n            getParsingFlags(config).invalidWeekday = input;\r\n        }\r\n    });\r\n\r\n    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {\r\n        week[token] = toInt(input);\r\n    });\r\n\r\n    // HELPERS\r\n\r\n    function parseWeekday(input, locale) {\r\n        if (typeof input !== 'string') {\r\n            return input;\r\n        }\r\n\r\n        if (!isNaN(input)) {\r\n            return parseInt(input, 10);\r\n        }\r\n\r\n        input = locale.weekdaysParse(input);\r\n        if (typeof input === 'number') {\r\n            return input;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    function parseIsoWeekday(input, locale) {\r\n        if (typeof input === 'string') {\r\n            return locale.weekdaysParse(input) % 7 || 7;\r\n        }\r\n        return isNaN(input) ? null : input;\r\n    }\r\n\r\n    // LOCALES\r\n\r\n    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');\r\n    function localeWeekdays (m, format) {\r\n        if (!m) {\r\n            return isArray(this._weekdays) ? this._weekdays :\r\n                this._weekdays['standalone'];\r\n        }\r\n        return isArray(this._weekdays) ? this._weekdays[m.day()] :\r\n            this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];\r\n    }\r\n\r\n    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');\r\n    function localeWeekdaysShort (m) {\r\n        return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;\r\n    }\r\n\r\n    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');\r\n    function localeWeekdaysMin (m) {\r\n        return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;\r\n    }\r\n\r\n    function handleStrictParse$1(weekdayName, format, strict) {\r\n        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();\r\n        if (!this._weekdaysParse) {\r\n            this._weekdaysParse = [];\r\n            this._shortWeekdaysParse = [];\r\n            this._minWeekdaysParse = [];\r\n\r\n            for (i = 0; i < 7; ++i) {\r\n                mom = createUTC([2000, 1]).day(i);\r\n                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();\r\n                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();\r\n                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();\r\n            }\r\n        }\r\n\r\n        if (strict) {\r\n            if (format === 'dddd') {\r\n                ii = indexOf.call(this._weekdaysParse, llc);\r\n                return ii !== -1 ? ii : null;\r\n            } else if (format === 'ddd') {\r\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\r\n                return ii !== -1 ? ii : null;\r\n            } else {\r\n                ii = indexOf.call(this._minWeekdaysParse, llc);\r\n                return ii !== -1 ? ii : null;\r\n            }\r\n        } else {\r\n            if (format === 'dddd') {\r\n                ii = indexOf.call(this._weekdaysParse, llc);\r\n                if (ii !== -1) {\r\n                    return ii;\r\n                }\r\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\r\n                if (ii !== -1) {\r\n                    return ii;\r\n                }\r\n                ii = indexOf.call(this._minWeekdaysParse, llc);\r\n                return ii !== -1 ? ii : null;\r\n            } else if (format === 'ddd') {\r\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\r\n                if (ii !== -1) {\r\n                    return ii;\r\n                }\r\n                ii = indexOf.call(this._weekdaysParse, llc);\r\n                if (ii !== -1) {\r\n                    return ii;\r\n                }\r\n                ii = indexOf.call(this._minWeekdaysParse, llc);\r\n                return ii !== -1 ? ii : null;\r\n            } else {\r\n                ii = indexOf.call(this._minWeekdaysParse, llc);\r\n                if (ii !== -1) {\r\n                    return ii;\r\n                }\r\n                ii = indexOf.call(this._weekdaysParse, llc);\r\n                if (ii !== -1) {\r\n                    return ii;\r\n                }\r\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\r\n                return ii !== -1 ? ii : null;\r\n            }\r\n        }\r\n    }\r\n\r\n    function localeWeekdaysParse (weekdayName, format, strict) {\r\n        var i, mom, regex;\r\n\r\n        if (this._weekdaysParseExact) {\r\n            return handleStrictParse$1.call(this, weekdayName, format, strict);\r\n        }\r\n\r\n        if (!this._weekdaysParse) {\r\n            this._weekdaysParse = [];\r\n            this._minWeekdaysParse = [];\r\n            this._shortWeekdaysParse = [];\r\n            this._fullWeekdaysParse = [];\r\n        }\r\n\r\n        for (i = 0; i < 7; i++) {\r\n            // make the regex if we don't have it already\r\n\r\n            mom = createUTC([2000, 1]).day(i);\r\n            if (strict && !this._fullWeekdaysParse[i]) {\r\n                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\\\.?') + '$', 'i');\r\n                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\\\.?') + '$', 'i');\r\n                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\\\.?') + '$', 'i');\r\n            }\r\n            if (!this._weekdaysParse[i]) {\r\n                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');\r\n                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');\r\n            }\r\n            // test the regex\r\n            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {\r\n                return i;\r\n            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {\r\n                return i;\r\n            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {\r\n                return i;\r\n            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n\r\n    // MOMENTS\r\n\r\n    function getSetDayOfWeek (input) {\r\n        if (!this.isValid()) {\r\n            return input != null ? this : NaN;\r\n        }\r\n        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();\r\n        if (input != null) {\r\n            input = parseWeekday(input, this.localeData());\r\n            return this.add(input - day, 'd');\r\n        } else {\r\n            return day;\r\n        }\r\n    }\r\n\r\n    function getSetLocaleDayOfWeek (input) {\r\n        if (!this.isValid()) {\r\n            return input != null ? this : NaN;\r\n        }\r\n        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;\r\n        return input == null ? weekday : this.add(input - weekday, 'd');\r\n    }\r\n\r\n    function getSetISODayOfWeek (input) {\r\n        if (!this.isValid()) {\r\n            return input != null ? this : NaN;\r\n        }\r\n\r\n        // behaves the same as moment#day except\r\n        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)\r\n        // as a setter, sunday should belong to the previous week.\r\n\r\n        if (input != null) {\r\n            var weekday = parseIsoWeekday(input, this.localeData());\r\n            return this.day(this.day() % 7 ? weekday : weekday - 7);\r\n        } else {\r\n            return this.day() || 7;\r\n        }\r\n    }\r\n\r\n    var defaultWeekdaysRegex = matchWord;\r\n    function weekdaysRegex (isStrict) {\r\n        if (this._weekdaysParseExact) {\r\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\r\n                computeWeekdaysParse.call(this);\r\n            }\r\n            if (isStrict) {\r\n                return this._weekdaysStrictRegex;\r\n            } else {\r\n                return this._weekdaysRegex;\r\n            }\r\n        } else {\r\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\r\n                this._weekdaysRegex = defaultWeekdaysRegex;\r\n            }\r\n            return this._weekdaysStrictRegex && isStrict ?\r\n                this._weekdaysStrictRegex : this._weekdaysRegex;\r\n        }\r\n    }\r\n\r\n    var defaultWeekdaysShortRegex = matchWord;\r\n    function weekdaysShortRegex (isStrict) {\r\n        if (this._weekdaysParseExact) {\r\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\r\n                computeWeekdaysParse.call(this);\r\n            }\r\n            if (isStrict) {\r\n                return this._weekdaysShortStrictRegex;\r\n            } else {\r\n                return this._weekdaysShortRegex;\r\n            }\r\n        } else {\r\n            if (!hasOwnProp(this, '_weekdaysShortRegex')) {\r\n                this._weekdaysShortRegex = defaultWeekdaysShortRegex;\r\n            }\r\n            return this._weekdaysShortStrictRegex && isStrict ?\r\n                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;\r\n        }\r\n    }\r\n\r\n    var defaultWeekdaysMinRegex = matchWord;\r\n    function weekdaysMinRegex (isStrict) {\r\n        if (this._weekdaysParseExact) {\r\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\r\n                computeWeekdaysParse.call(this);\r\n            }\r\n            if (isStrict) {\r\n                return this._weekdaysMinStrictRegex;\r\n            } else {\r\n                return this._weekdaysMinRegex;\r\n            }\r\n        } else {\r\n            if (!hasOwnProp(this, '_weekdaysMinRegex')) {\r\n                this._weekdaysMinRegex = defaultWeekdaysMinRegex;\r\n            }\r\n            return this._weekdaysMinStrictRegex && isStrict ?\r\n                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;\r\n        }\r\n    }\r\n\r\n\r\n    function computeWeekdaysParse () {\r\n        function cmpLenRev(a, b) {\r\n            return b.length - a.length;\r\n        }\r\n\r\n        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],\r\n            i, mom, minp, shortp, longp;\r\n        for (i = 0; i < 7; i++) {\r\n            // make the regex if we don't have it already\r\n            mom = createUTC([2000, 1]).day(i);\r\n            minp = this.weekdaysMin(mom, '');\r\n            shortp = this.weekdaysShort(mom, '');\r\n            longp = this.weekdays(mom, '');\r\n            minPieces.push(minp);\r\n            shortPieces.push(shortp);\r\n            longPieces.push(longp);\r\n            mixedPieces.push(minp);\r\n            mixedPieces.push(shortp);\r\n            mixedPieces.push(longp);\r\n        }\r\n        // Sorting makes sure if one weekday (or abbr) is a prefix of another it\r\n        // will match the longer piece.\r\n        minPieces.sort(cmpLenRev);\r\n        shortPieces.sort(cmpLenRev);\r\n        longPieces.sort(cmpLenRev);\r\n        mixedPieces.sort(cmpLenRev);\r\n        for (i = 0; i < 7; i++) {\r\n            shortPieces[i] = regexEscape(shortPieces[i]);\r\n            longPieces[i] = regexEscape(longPieces[i]);\r\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\r\n        }\r\n\r\n        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\r\n        this._weekdaysShortRegex = this._weekdaysRegex;\r\n        this._weekdaysMinRegex = this._weekdaysRegex;\r\n\r\n        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\r\n        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\r\n        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');\r\n    }\r\n\r\n    // FORMATTING\r\n\r\n    function hFormat() {\r\n        return this.hours() % 12 || 12;\r\n    }\r\n\r\n    function kFormat() {\r\n        return this.hours() || 24;\r\n    }\r\n\r\n    addFormatToken('H', ['HH', 2], 0, 'hour');\r\n    addFormatToken('h', ['hh', 2], 0, hFormat);\r\n    addFormatToken('k', ['kk', 2], 0, kFormat);\r\n\r\n    addFormatToken('hmm', 0, 0, function () {\r\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);\r\n    });\r\n\r\n    addFormatToken('hmmss', 0, 0, function () {\r\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +\r\n            zeroFill(this.seconds(), 2);\r\n    });\r\n\r\n    addFormatToken('Hmm', 0, 0, function () {\r\n        return '' + this.hours() + zeroFill(this.minutes(), 2);\r\n    });\r\n\r\n    addFormatToken('Hmmss', 0, 0, function () {\r\n        return '' + this.hours() + zeroFill(this.minutes(), 2) +\r\n            zeroFill(this.seconds(), 2);\r\n    });\r\n\r\n    function meridiem (token, lowercase) {\r\n        addFormatToken(token, 0, 0, function () {\r\n            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);\r\n        });\r\n    }\r\n\r\n    meridiem('a', true);\r\n    meridiem('A', false);\r\n\r\n    // ALIASES\r\n\r\n    addUnitAlias('hour', 'h');\r\n\r\n    // PRIORITY\r\n    addUnitPriority('hour', 13);\r\n\r\n    // PARSING\r\n\r\n    function matchMeridiem (isStrict, locale) {\r\n        return locale._meridiemParse;\r\n    }\r\n\r\n    addRegexToken('a',  matchMeridiem);\r\n    addRegexToken('A',  matchMeridiem);\r\n    addRegexToken('H',  match1to2);\r\n    addRegexToken('h',  match1to2);\r\n    addRegexToken('k',  match1to2);\r\n    addRegexToken('HH', match1to2, match2);\r\n    addRegexToken('hh', match1to2, match2);\r\n    addRegexToken('kk', match1to2, match2);\r\n\r\n    addRegexToken('hmm', match3to4);\r\n    addRegexToken('hmmss', match5to6);\r\n    addRegexToken('Hmm', match3to4);\r\n    addRegexToken('Hmmss', match5to6);\r\n\r\n    addParseToken(['H', 'HH'], HOUR);\r\n    addParseToken(['k', 'kk'], function (input, array, config) {\r\n        var kInput = toInt(input);\r\n        array[HOUR] = kInput === 24 ? 0 : kInput;\r\n    });\r\n    addParseToken(['a', 'A'], function (input, array, config) {\r\n        config._isPm = config._locale.isPM(input);\r\n        config._meridiem = input;\r\n    });\r\n    addParseToken(['h', 'hh'], function (input, array, config) {\r\n        array[HOUR] = toInt(input);\r\n        getParsingFlags(config).bigHour = true;\r\n    });\r\n    addParseToken('hmm', function (input, array, config) {\r\n        var pos = input.length - 2;\r\n        array[HOUR] = toInt(input.substr(0, pos));\r\n        array[MINUTE] = toInt(input.substr(pos));\r\n        getParsingFlags(config).bigHour = true;\r\n    });\r\n    addParseToken('hmmss', function (input, array, config) {\r\n        var pos1 = input.length - 4;\r\n        var pos2 = input.length - 2;\r\n        array[HOUR] = toInt(input.substr(0, pos1));\r\n        array[MINUTE] = toInt(input.substr(pos1, 2));\r\n        array[SECOND] = toInt(input.substr(pos2));\r\n        getParsingFlags(config).bigHour = true;\r\n    });\r\n    addParseToken('Hmm', function (input, array, config) {\r\n        var pos = input.length - 2;\r\n        array[HOUR] = toInt(input.substr(0, pos));\r\n        array[MINUTE] = toInt(input.substr(pos));\r\n    });\r\n    addParseToken('Hmmss', function (input, array, config) {\r\n        var pos1 = input.length - 4;\r\n        var pos2 = input.length - 2;\r\n        array[HOUR] = toInt(input.substr(0, pos1));\r\n        array[MINUTE] = toInt(input.substr(pos1, 2));\r\n        array[SECOND] = toInt(input.substr(pos2));\r\n    });\r\n\r\n    // LOCALES\r\n\r\n    function localeIsPM (input) {\r\n        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\r\n        // Using charAt should be more compatible.\r\n        return ((input + '').toLowerCase().charAt(0) === 'p');\r\n    }\r\n\r\n    var defaultLocaleMeridiemParse = /[ap]\\.?m?\\.?/i;\r\n    function localeMeridiem (hours, minutes, isLower) {\r\n        if (hours > 11) {\r\n            return isLower ? 'pm' : 'PM';\r\n        } else {\r\n            return isLower ? 'am' : 'AM';\r\n        }\r\n    }\r\n\r\n\r\n    // MOMENTS\r\n\r\n    // Setting the hour should keep the time, because the user explicitly\r\n    // specified which hour they want. So trying to maintain the same hour (in\r\n    // a new timezone) makes sense. Adding/subtracting hours does not follow\r\n    // this rule.\r\n    var getSetHour = makeGetSet('Hours', true);\r\n\r\n    var baseConfig = {\r\n        calendar: defaultCalendar,\r\n        longDateFormat: defaultLongDateFormat,\r\n        invalidDate: defaultInvalidDate,\r\n        ordinal: defaultOrdinal,\r\n        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,\r\n        relativeTime: defaultRelativeTime,\r\n\r\n        months: defaultLocaleMonths,\r\n        monthsShort: defaultLocaleMonthsShort,\r\n\r\n        week: defaultLocaleWeek,\r\n\r\n        weekdays: defaultLocaleWeekdays,\r\n        weekdaysMin: defaultLocaleWeekdaysMin,\r\n        weekdaysShort: defaultLocaleWeekdaysShort,\r\n\r\n        meridiemParse: defaultLocaleMeridiemParse\r\n    };\r\n\r\n    // internal storage for locale config files\r\n    var locales = {};\r\n    var localeFamilies = {};\r\n    var globalLocale;\r\n\r\n    function normalizeLocale(key) {\r\n        return key ? key.toLowerCase().replace('_', '-') : key;\r\n    }\r\n\r\n    // pick the locale from the array\r\n    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each\r\n    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\r\n    function chooseLocale(names) {\r\n        var i = 0, j, next, locale, split;\r\n\r\n        while (i < names.length) {\r\n            split = normalizeLocale(names[i]).split('-');\r\n            j = split.length;\r\n            next = normalizeLocale(names[i + 1]);\r\n            next = next ? next.split('-') : null;\r\n            while (j > 0) {\r\n                locale = loadLocale(split.slice(0, j).join('-'));\r\n                if (locale) {\r\n                    return locale;\r\n                }\r\n                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {\r\n                    //the next array item is better than a shallower substring of this one\r\n                    break;\r\n                }\r\n                j--;\r\n            }\r\n            i++;\r\n        }\r\n        return globalLocale;\r\n    }\r\n\r\n    function loadLocale(name) {\r\n        var oldLocale = null;\r\n        // TODO: Find a better way to register and load all the locales in Node\r\n        if (!locales[name] && (typeof module !== 'undefined') &&\r\n                module && module.exports) {\r\n            try {\r\n                oldLocale = globalLocale._abbr;\r\n                var aliasedRequire = require;\r\n                !(function webpackMissingModule() { var e = new Error(\"Cannot find module 'undefined'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\r\n                getSetGlobalLocale(oldLocale);\r\n            } catch (e) {}\r\n        }\r\n        return locales[name];\r\n    }\r\n\r\n    // This function will load locale and then set the global locale.  If\r\n    // no arguments are passed in, it will simply return the current global\r\n    // locale key.\r\n    function getSetGlobalLocale (key, values) {\r\n        var data;\r\n        if (key) {\r\n            if (isUndefined(values)) {\r\n                data = getLocale(key);\r\n            }\r\n            else {\r\n                data = defineLocale(key, values);\r\n            }\r\n\r\n            if (data) {\r\n                // moment.duration._locale = moment._locale = data;\r\n                globalLocale = data;\r\n            }\r\n            else {\r\n                if ((typeof console !==  'undefined') && console.warn) {\r\n                    //warn user if arguments are passed but the locale could not be set\r\n                    console.warn('Locale ' + key +  ' not found. Did you forget to load it?');\r\n                }\r\n            }\r\n        }\r\n\r\n        return globalLocale._abbr;\r\n    }\r\n\r\n    function defineLocale (name, config) {\r\n        if (config !== null) {\r\n            var locale, parentConfig = baseConfig;\r\n            config.abbr = name;\r\n            if (locales[name] != null) {\r\n                deprecateSimple('defineLocaleOverride',\r\n                        'use moment.updateLocale(localeName, config) to change ' +\r\n                        'an existing locale. moment.defineLocale(localeName, ' +\r\n                        'config) should only be used for creating a new locale ' +\r\n                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');\r\n                parentConfig = locales[name]._config;\r\n            } else if (config.parentLocale != null) {\r\n                if (locales[config.parentLocale] != null) {\r\n                    parentConfig = locales[config.parentLocale]._config;\r\n                } else {\r\n                    locale = loadLocale(config.parentLocale);\r\n                    if (locale != null) {\r\n                        parentConfig = locale._config;\r\n                    } else {\r\n                        if (!localeFamilies[config.parentLocale]) {\r\n                            localeFamilies[config.parentLocale] = [];\r\n                        }\r\n                        localeFamilies[config.parentLocale].push({\r\n                            name: name,\r\n                            config: config\r\n                        });\r\n                        return null;\r\n                    }\r\n                }\r\n            }\r\n            locales[name] = new Locale(mergeConfigs(parentConfig, config));\r\n\r\n            if (localeFamilies[name]) {\r\n                localeFamilies[name].forEach(function (x) {\r\n                    defineLocale(x.name, x.config);\r\n                });\r\n            }\r\n\r\n            // backwards compat for now: also set the locale\r\n            // make sure we set the locale AFTER all child locales have been\r\n            // created, so we won't end up with the child locale set.\r\n            getSetGlobalLocale(name);\r\n\r\n\r\n            return locales[name];\r\n        } else {\r\n            // useful for testing\r\n            delete locales[name];\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function updateLocale(name, config) {\r\n        if (config != null) {\r\n            var locale, tmpLocale, parentConfig = baseConfig;\r\n            // MERGE\r\n            tmpLocale = loadLocale(name);\r\n            if (tmpLocale != null) {\r\n                parentConfig = tmpLocale._config;\r\n            }\r\n            config = mergeConfigs(parentConfig, config);\r\n            locale = new Locale(config);\r\n            locale.parentLocale = locales[name];\r\n            locales[name] = locale;\r\n\r\n            // backwards compat for now: also set the locale\r\n            getSetGlobalLocale(name);\r\n        } else {\r\n            // pass null for config to unupdate, useful for tests\r\n            if (locales[name] != null) {\r\n                if (locales[name].parentLocale != null) {\r\n                    locales[name] = locales[name].parentLocale;\r\n                } else if (locales[name] != null) {\r\n                    delete locales[name];\r\n                }\r\n            }\r\n        }\r\n        return locales[name];\r\n    }\r\n\r\n    // returns locale data\r\n    function getLocale (key) {\r\n        var locale;\r\n\r\n        if (key && key._locale && key._locale._abbr) {\r\n            key = key._locale._abbr;\r\n        }\r\n\r\n        if (!key) {\r\n            return globalLocale;\r\n        }\r\n\r\n        if (!isArray(key)) {\r\n            //short-circuit everything else\r\n            locale = loadLocale(key);\r\n            if (locale) {\r\n                return locale;\r\n            }\r\n            key = [key];\r\n        }\r\n\r\n        return chooseLocale(key);\r\n    }\r\n\r\n    function listLocales() {\r\n        return keys(locales);\r\n    }\r\n\r\n    function checkOverflow (m) {\r\n        var overflow;\r\n        var a = m._a;\r\n\r\n        if (a && getParsingFlags(m).overflow === -2) {\r\n            overflow =\r\n                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :\r\n                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :\r\n                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :\r\n                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :\r\n                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :\r\n                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :\r\n                -1;\r\n\r\n            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {\r\n                overflow = DATE;\r\n            }\r\n            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {\r\n                overflow = WEEK;\r\n            }\r\n            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {\r\n                overflow = WEEKDAY;\r\n            }\r\n\r\n            getParsingFlags(m).overflow = overflow;\r\n        }\r\n\r\n        return m;\r\n    }\r\n\r\n    // Pick the first defined of two or three arguments.\r\n    function defaults(a, b, c) {\r\n        if (a != null) {\r\n            return a;\r\n        }\r\n        if (b != null) {\r\n            return b;\r\n        }\r\n        return c;\r\n    }\r\n\r\n    function currentDateArray(config) {\r\n        // hooks is actually the exported moment object\r\n        var nowValue = new Date(hooks.now());\r\n        if (config._useUTC) {\r\n            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];\r\n        }\r\n        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];\r\n    }\r\n\r\n    // convert an array to a date.\r\n    // the array should mirror the parameters below\r\n    // note: all values past the year are optional and will default to the lowest possible value.\r\n    // [year, month, day , hour, minute, second, millisecond]\r\n    function configFromArray (config) {\r\n        var i, date, input = [], currentDate, expectedWeekday, yearToUse;\r\n\r\n        if (config._d) {\r\n            return;\r\n        }\r\n\r\n        currentDate = currentDateArray(config);\r\n\r\n        //compute day of the year from weeks and weekdays\r\n        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {\r\n            dayOfYearFromWeekInfo(config);\r\n        }\r\n\r\n        //if the day of the year is set, figure out what it is\r\n        if (config._dayOfYear != null) {\r\n            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);\r\n\r\n            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {\r\n                getParsingFlags(config)._overflowDayOfYear = true;\r\n            }\r\n\r\n            date = createUTCDate(yearToUse, 0, config._dayOfYear);\r\n            config._a[MONTH] = date.getUTCMonth();\r\n            config._a[DATE] = date.getUTCDate();\r\n        }\r\n\r\n        // Default to current date.\r\n        // * if no year, month, day of month are given, default to today\r\n        // * if day of month is given, default month and year\r\n        // * if month is given, default only year\r\n        // * if year is given, don't default anything\r\n        for (i = 0; i < 3 && config._a[i] == null; ++i) {\r\n            config._a[i] = input[i] = currentDate[i];\r\n        }\r\n\r\n        // Zero out whatever was not defaulted, including time\r\n        for (; i < 7; i++) {\r\n            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];\r\n        }\r\n\r\n        // Check for 24:00:00.000\r\n        if (config._a[HOUR] === 24 &&\r\n                config._a[MINUTE] === 0 &&\r\n                config._a[SECOND] === 0 &&\r\n                config._a[MILLISECOND] === 0) {\r\n            config._nextDay = true;\r\n            config._a[HOUR] = 0;\r\n        }\r\n\r\n        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);\r\n        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();\r\n\r\n        // Apply timezone offset from input. The actual utcOffset can be changed\r\n        // with parseZone.\r\n        if (config._tzm != null) {\r\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\r\n        }\r\n\r\n        if (config._nextDay) {\r\n            config._a[HOUR] = 24;\r\n        }\r\n\r\n        // check for mismatching day of week\r\n        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {\r\n            getParsingFlags(config).weekdayMismatch = true;\r\n        }\r\n    }\r\n\r\n    function dayOfYearFromWeekInfo(config) {\r\n        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;\r\n\r\n        w = config._w;\r\n        if (w.GG != null || w.W != null || w.E != null) {\r\n            dow = 1;\r\n            doy = 4;\r\n\r\n            // TODO: We need to take the current isoWeekYear, but that depends on\r\n            // how we interpret now (local, utc, fixed offset). So create\r\n            // a now version of current config (take local/utc/offset flags, and\r\n            // create now).\r\n            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);\r\n            week = defaults(w.W, 1);\r\n            weekday = defaults(w.E, 1);\r\n            if (weekday < 1 || weekday > 7) {\r\n                weekdayOverflow = true;\r\n            }\r\n        } else {\r\n            dow = config._locale._week.dow;\r\n            doy = config._locale._week.doy;\r\n\r\n            var curWeek = weekOfYear(createLocal(), dow, doy);\r\n\r\n            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);\r\n\r\n            // Default to current week.\r\n            week = defaults(w.w, curWeek.week);\r\n\r\n            if (w.d != null) {\r\n                // weekday -- low day numbers are considered next week\r\n                weekday = w.d;\r\n                if (weekday < 0 || weekday > 6) {\r\n                    weekdayOverflow = true;\r\n                }\r\n            } else if (w.e != null) {\r\n                // local weekday -- counting starts from begining of week\r\n                weekday = w.e + dow;\r\n                if (w.e < 0 || w.e > 6) {\r\n                    weekdayOverflow = true;\r\n                }\r\n            } else {\r\n                // default to begining of week\r\n                weekday = dow;\r\n            }\r\n        }\r\n        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {\r\n            getParsingFlags(config)._overflowWeeks = true;\r\n        } else if (weekdayOverflow != null) {\r\n            getParsingFlags(config)._overflowWeekday = true;\r\n        } else {\r\n            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);\r\n            config._a[YEAR] = temp.year;\r\n            config._dayOfYear = temp.dayOfYear;\r\n        }\r\n    }\r\n\r\n    // iso 8601 regex\r\n    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\r\n    var extendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\r\n    var basicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\r\n\r\n    var tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/;\r\n\r\n    var isoDates = [\r\n        ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/],\r\n        ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/],\r\n        ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/],\r\n        ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false],\r\n        ['YYYY-DDD', /\\d{4}-\\d{3}/],\r\n        ['YYYY-MM', /\\d{4}-\\d\\d/, false],\r\n        ['YYYYYYMMDD', /[+-]\\d{10}/],\r\n        ['YYYYMMDD', /\\d{8}/],\r\n        // YYYYMM is NOT allowed by the standard\r\n        ['GGGG[W]WWE', /\\d{4}W\\d{3}/],\r\n        ['GGGG[W]WW', /\\d{4}W\\d{2}/, false],\r\n        ['YYYYDDD', /\\d{7}/]\r\n    ];\r\n\r\n    // iso time formats and regexes\r\n    var isoTimes = [\r\n        ['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/],\r\n        ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/],\r\n        ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/],\r\n        ['HH:mm', /\\d\\d:\\d\\d/],\r\n        ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/],\r\n        ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/],\r\n        ['HHmmss', /\\d\\d\\d\\d\\d\\d/],\r\n        ['HHmm', /\\d\\d\\d\\d/],\r\n        ['HH', /\\d\\d/]\r\n    ];\r\n\r\n    var aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i;\r\n\r\n    // date from iso format\r\n    function configFromISO(config) {\r\n        var i, l,\r\n            string = config._i,\r\n            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),\r\n            allowTime, dateFormat, timeFormat, tzFormat;\r\n\r\n        if (match) {\r\n            getParsingFlags(config).iso = true;\r\n\r\n            for (i = 0, l = isoDates.length; i < l; i++) {\r\n                if (isoDates[i][1].exec(match[1])) {\r\n                    dateFormat = isoDates[i][0];\r\n                    allowTime = isoDates[i][2] !== false;\r\n                    break;\r\n                }\r\n            }\r\n            if (dateFormat == null) {\r\n                config._isValid = false;\r\n                return;\r\n            }\r\n            if (match[3]) {\r\n                for (i = 0, l = isoTimes.length; i < l; i++) {\r\n                    if (isoTimes[i][1].exec(match[3])) {\r\n                        // match[2] should be 'T' or space\r\n                        timeFormat = (match[2] || ' ') + isoTimes[i][0];\r\n                        break;\r\n                    }\r\n                }\r\n                if (timeFormat == null) {\r\n                    config._isValid = false;\r\n                    return;\r\n                }\r\n            }\r\n            if (!allowTime && timeFormat != null) {\r\n                config._isValid = false;\r\n                return;\r\n            }\r\n            if (match[4]) {\r\n                if (tzRegex.exec(match[4])) {\r\n                    tzFormat = 'Z';\r\n                } else {\r\n                    config._isValid = false;\r\n                    return;\r\n                }\r\n            }\r\n            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');\r\n            configFromStringAndFormat(config);\r\n        } else {\r\n            config._isValid = false;\r\n        }\r\n    }\r\n\r\n    // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3\r\n    var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\\d{4}))$/;\r\n\r\n    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {\r\n        var result = [\r\n            untruncateYear(yearStr),\r\n            defaultLocaleMonthsShort.indexOf(monthStr),\r\n            parseInt(dayStr, 10),\r\n            parseInt(hourStr, 10),\r\n            parseInt(minuteStr, 10)\r\n        ];\r\n\r\n        if (secondStr) {\r\n            result.push(parseInt(secondStr, 10));\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function untruncateYear(yearStr) {\r\n        var year = parseInt(yearStr, 10);\r\n        if (year <= 49) {\r\n            return 2000 + year;\r\n        } else if (year <= 999) {\r\n            return 1900 + year;\r\n        }\r\n        return year;\r\n    }\r\n\r\n    function preprocessRFC2822(s) {\r\n        // Remove comments and folding whitespace and replace multiple-spaces with a single space\r\n        return s.replace(/\\([^)]*\\)|[\\n\\t]/g, ' ').replace(/(\\s\\s+)/g, ' ').replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\r\n    }\r\n\r\n    function checkWeekday(weekdayStr, parsedInput, config) {\r\n        if (weekdayStr) {\r\n            // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.\r\n            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),\r\n                weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();\r\n            if (weekdayProvided !== weekdayActual) {\r\n                getParsingFlags(config).weekdayMismatch = true;\r\n                config._isValid = false;\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    var obsOffsets = {\r\n        UT: 0,\r\n        GMT: 0,\r\n        EDT: -4 * 60,\r\n        EST: -5 * 60,\r\n        CDT: -5 * 60,\r\n        CST: -6 * 60,\r\n        MDT: -6 * 60,\r\n        MST: -7 * 60,\r\n        PDT: -7 * 60,\r\n        PST: -8 * 60\r\n    };\r\n\r\n    function calculateOffset(obsOffset, militaryOffset, numOffset) {\r\n        if (obsOffset) {\r\n            return obsOffsets[obsOffset];\r\n        } else if (militaryOffset) {\r\n            // the only allowed military tz is Z\r\n            return 0;\r\n        } else {\r\n            var hm = parseInt(numOffset, 10);\r\n            var m = hm % 100, h = (hm - m) / 100;\r\n            return h * 60 + m;\r\n        }\r\n    }\r\n\r\n    // date and time from ref 2822 format\r\n    function configFromRFC2822(config) {\r\n        var match = rfc2822.exec(preprocessRFC2822(config._i));\r\n        if (match) {\r\n            var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);\r\n            if (!checkWeekday(match[1], parsedArray, config)) {\r\n                return;\r\n            }\r\n\r\n            config._a = parsedArray;\r\n            config._tzm = calculateOffset(match[8], match[9], match[10]);\r\n\r\n            config._d = createUTCDate.apply(null, config._a);\r\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\r\n\r\n            getParsingFlags(config).rfc2822 = true;\r\n        } else {\r\n            config._isValid = false;\r\n        }\r\n    }\r\n\r\n    // date from iso format or fallback\r\n    function configFromString(config) {\r\n        var matched = aspNetJsonRegex.exec(config._i);\r\n\r\n        if (matched !== null) {\r\n            config._d = new Date(+matched[1]);\r\n            return;\r\n        }\r\n\r\n        configFromISO(config);\r\n        if (config._isValid === false) {\r\n            delete config._isValid;\r\n        } else {\r\n            return;\r\n        }\r\n\r\n        configFromRFC2822(config);\r\n        if (config._isValid === false) {\r\n            delete config._isValid;\r\n        } else {\r\n            return;\r\n        }\r\n\r\n        // Final attempt, use Input Fallback\r\n        hooks.createFromInputFallback(config);\r\n    }\r\n\r\n    hooks.createFromInputFallback = deprecate(\r\n        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +\r\n        'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +\r\n        'discouraged and will be removed in an upcoming major release. Please refer to ' +\r\n        'http://momentjs.com/guides/#/warnings/js-date/ for more info.',\r\n        function (config) {\r\n            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));\r\n        }\r\n    );\r\n\r\n    // constant that refers to the ISO standard\r\n    hooks.ISO_8601 = function () {};\r\n\r\n    // constant that refers to the RFC 2822 form\r\n    hooks.RFC_2822 = function () {};\r\n\r\n    // date from string and format string\r\n    function configFromStringAndFormat(config) {\r\n        // TODO: Move this to another part of the creation flow to prevent circular deps\r\n        if (config._f === hooks.ISO_8601) {\r\n            configFromISO(config);\r\n            return;\r\n        }\r\n        if (config._f === hooks.RFC_2822) {\r\n            configFromRFC2822(config);\r\n            return;\r\n        }\r\n        config._a = [];\r\n        getParsingFlags(config).empty = true;\r\n\r\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`\r\n        var string = '' + config._i,\r\n            i, parsedInput, tokens, token, skipped,\r\n            stringLength = string.length,\r\n            totalParsedInputLength = 0;\r\n\r\n        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];\r\n\r\n        for (i = 0; i < tokens.length; i++) {\r\n            token = tokens[i];\r\n            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];\r\n            // console.log('token', token, 'parsedInput', parsedInput,\r\n            //         'regex', getParseRegexForToken(token, config));\r\n            if (parsedInput) {\r\n                skipped = string.substr(0, string.indexOf(parsedInput));\r\n                if (skipped.length > 0) {\r\n                    getParsingFlags(config).unusedInput.push(skipped);\r\n                }\r\n                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);\r\n                totalParsedInputLength += parsedInput.length;\r\n            }\r\n            // don't parse if it's not a known token\r\n            if (formatTokenFunctions[token]) {\r\n                if (parsedInput) {\r\n                    getParsingFlags(config).empty = false;\r\n                }\r\n                else {\r\n                    getParsingFlags(config).unusedTokens.push(token);\r\n                }\r\n                addTimeToArrayFromToken(token, parsedInput, config);\r\n            }\r\n            else if (config._strict && !parsedInput) {\r\n                getParsingFlags(config).unusedTokens.push(token);\r\n            }\r\n        }\r\n\r\n        // add remaining unparsed input length to the string\r\n        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;\r\n        if (string.length > 0) {\r\n            getParsingFlags(config).unusedInput.push(string);\r\n        }\r\n\r\n        // clear _12h flag if hour is <= 12\r\n        if (config._a[HOUR] <= 12 &&\r\n            getParsingFlags(config).bigHour === true &&\r\n            config._a[HOUR] > 0) {\r\n            getParsingFlags(config).bigHour = undefined;\r\n        }\r\n\r\n        getParsingFlags(config).parsedDateParts = config._a.slice(0);\r\n        getParsingFlags(config).meridiem = config._meridiem;\r\n        // handle meridiem\r\n        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);\r\n\r\n        configFromArray(config);\r\n        checkOverflow(config);\r\n    }\r\n\r\n\r\n    function meridiemFixWrap (locale, hour, meridiem) {\r\n        var isPm;\r\n\r\n        if (meridiem == null) {\r\n            // nothing to do\r\n            return hour;\r\n        }\r\n        if (locale.meridiemHour != null) {\r\n            return locale.meridiemHour(hour, meridiem);\r\n        } else if (locale.isPM != null) {\r\n            // Fallback\r\n            isPm = locale.isPM(meridiem);\r\n            if (isPm && hour < 12) {\r\n                hour += 12;\r\n            }\r\n            if (!isPm && hour === 12) {\r\n                hour = 0;\r\n            }\r\n            return hour;\r\n        } else {\r\n            // this is not supposed to happen\r\n            return hour;\r\n        }\r\n    }\r\n\r\n    // date from string and array of format strings\r\n    function configFromStringAndArray(config) {\r\n        var tempConfig,\r\n            bestMoment,\r\n\r\n            scoreToBeat,\r\n            i,\r\n            currentScore;\r\n\r\n        if (config._f.length === 0) {\r\n            getParsingFlags(config).invalidFormat = true;\r\n            config._d = new Date(NaN);\r\n            return;\r\n        }\r\n\r\n        for (i = 0; i < config._f.length; i++) {\r\n            currentScore = 0;\r\n            tempConfig = copyConfig({}, config);\r\n            if (config._useUTC != null) {\r\n                tempConfig._useUTC = config._useUTC;\r\n            }\r\n            tempConfig._f = config._f[i];\r\n            configFromStringAndFormat(tempConfig);\r\n\r\n            if (!isValid(tempConfig)) {\r\n                continue;\r\n            }\r\n\r\n            // if there is any input that was not parsed add a penalty for that format\r\n            currentScore += getParsingFlags(tempConfig).charsLeftOver;\r\n\r\n            //or tokens\r\n            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;\r\n\r\n            getParsingFlags(tempConfig).score = currentScore;\r\n\r\n            if (scoreToBeat == null || currentScore < scoreToBeat) {\r\n                scoreToBeat = currentScore;\r\n                bestMoment = tempConfig;\r\n            }\r\n        }\r\n\r\n        extend(config, bestMoment || tempConfig);\r\n    }\r\n\r\n    function configFromObject(config) {\r\n        if (config._d) {\r\n            return;\r\n        }\r\n\r\n        var i = normalizeObjectUnits(config._i);\r\n        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {\r\n            return obj && parseInt(obj, 10);\r\n        });\r\n\r\n        configFromArray(config);\r\n    }\r\n\r\n    function createFromConfig (config) {\r\n        var res = new Moment(checkOverflow(prepareConfig(config)));\r\n        if (res._nextDay) {\r\n            // Adding is smart enough around DST\r\n            res.add(1, 'd');\r\n            res._nextDay = undefined;\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    function prepareConfig (config) {\r\n        var input = config._i,\r\n            format = config._f;\r\n\r\n        config._locale = config._locale || getLocale(config._l);\r\n\r\n        if (input === null || (format === undefined && input === '')) {\r\n            return createInvalid({nullInput: true});\r\n        }\r\n\r\n        if (typeof input === 'string') {\r\n            config._i = input = config._locale.preparse(input);\r\n        }\r\n\r\n        if (isMoment(input)) {\r\n            return new Moment(checkOverflow(input));\r\n        } else if (isDate(input)) {\r\n            config._d = input;\r\n        } else if (isArray(format)) {\r\n            configFromStringAndArray(config);\r\n        } else if (format) {\r\n            configFromStringAndFormat(config);\r\n        }  else {\r\n            configFromInput(config);\r\n        }\r\n\r\n        if (!isValid(config)) {\r\n            config._d = null;\r\n        }\r\n\r\n        return config;\r\n    }\r\n\r\n    function configFromInput(config) {\r\n        var input = config._i;\r\n        if (isUndefined(input)) {\r\n            config._d = new Date(hooks.now());\r\n        } else if (isDate(input)) {\r\n            config._d = new Date(input.valueOf());\r\n        } else if (typeof input === 'string') {\r\n            configFromString(config);\r\n        } else if (isArray(input)) {\r\n            config._a = map(input.slice(0), function (obj) {\r\n                return parseInt(obj, 10);\r\n            });\r\n            configFromArray(config);\r\n        } else if (isObject(input)) {\r\n            configFromObject(config);\r\n        } else if (isNumber(input)) {\r\n            // from milliseconds\r\n            config._d = new Date(input);\r\n        } else {\r\n            hooks.createFromInputFallback(config);\r\n        }\r\n    }\r\n\r\n    function createLocalOrUTC (input, format, locale, strict, isUTC) {\r\n        var c = {};\r\n\r\n        if (locale === true || locale === false) {\r\n            strict = locale;\r\n            locale = undefined;\r\n        }\r\n\r\n        if ((isObject(input) && isObjectEmpty(input)) ||\r\n                (isArray(input) && input.length === 0)) {\r\n            input = undefined;\r\n        }\r\n        // object construction must be done this way.\r\n        // https://github.com/moment/moment/issues/1423\r\n        c._isAMomentObject = true;\r\n        c._useUTC = c._isUTC = isUTC;\r\n        c._l = locale;\r\n        c._i = input;\r\n        c._f = format;\r\n        c._strict = strict;\r\n\r\n        return createFromConfig(c);\r\n    }\r\n\r\n    function createLocal (input, format, locale, strict) {\r\n        return createLocalOrUTC(input, format, locale, strict, false);\r\n    }\r\n\r\n    var prototypeMin = deprecate(\r\n        'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',\r\n        function () {\r\n            var other = createLocal.apply(null, arguments);\r\n            if (this.isValid() && other.isValid()) {\r\n                return other < this ? this : other;\r\n            } else {\r\n                return createInvalid();\r\n            }\r\n        }\r\n    );\r\n\r\n    var prototypeMax = deprecate(\r\n        'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',\r\n        function () {\r\n            var other = createLocal.apply(null, arguments);\r\n            if (this.isValid() && other.isValid()) {\r\n                return other > this ? this : other;\r\n            } else {\r\n                return createInvalid();\r\n            }\r\n        }\r\n    );\r\n\r\n    // Pick a moment m from moments so that m[fn](other) is true for all\r\n    // other. This relies on the function fn to be transitive.\r\n    //\r\n    // moments should either be an array of moment objects or an array, whose\r\n    // first element is an array of moment objects.\r\n    function pickBy(fn, moments) {\r\n        var res, i;\r\n        if (moments.length === 1 && isArray(moments[0])) {\r\n            moments = moments[0];\r\n        }\r\n        if (!moments.length) {\r\n            return createLocal();\r\n        }\r\n        res = moments[0];\r\n        for (i = 1; i < moments.length; ++i) {\r\n            if (!moments[i].isValid() || moments[i][fn](res)) {\r\n                res = moments[i];\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n\r\n    // TODO: Use [].sort instead?\r\n    function min () {\r\n        var args = [].slice.call(arguments, 0);\r\n\r\n        return pickBy('isBefore', args);\r\n    }\r\n\r\n    function max () {\r\n        var args = [].slice.call(arguments, 0);\r\n\r\n        return pickBy('isAfter', args);\r\n    }\r\n\r\n    var now = function () {\r\n        return Date.now ? Date.now() : +(new Date());\r\n    };\r\n\r\n    var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];\r\n\r\n    function isDurationValid(m) {\r\n        for (var key in m) {\r\n            if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        var unitHasDecimal = false;\r\n        for (var i = 0; i < ordering.length; ++i) {\r\n            if (m[ordering[i]]) {\r\n                if (unitHasDecimal) {\r\n                    return false; // only allow non-integers for smallest unit\r\n                }\r\n                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {\r\n                    unitHasDecimal = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function isValid$1() {\r\n        return this._isValid;\r\n    }\r\n\r\n    function createInvalid$1() {\r\n        return createDuration(NaN);\r\n    }\r\n\r\n    function Duration (duration) {\r\n        var normalizedInput = normalizeObjectUnits(duration),\r\n            years = normalizedInput.year || 0,\r\n            quarters = normalizedInput.quarter || 0,\r\n            months = normalizedInput.month || 0,\r\n            weeks = normalizedInput.week || 0,\r\n            days = normalizedInput.day || 0,\r\n            hours = normalizedInput.hour || 0,\r\n            minutes = normalizedInput.minute || 0,\r\n            seconds = normalizedInput.second || 0,\r\n            milliseconds = normalizedInput.millisecond || 0;\r\n\r\n        this._isValid = isDurationValid(normalizedInput);\r\n\r\n        // representation for dateAddRemove\r\n        this._milliseconds = +milliseconds +\r\n            seconds * 1e3 + // 1000\r\n            minutes * 6e4 + // 1000 * 60\r\n            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\r\n        // Because of dateAddRemove treats 24 hours as different from a\r\n        // day when working around DST, we need to store them separately\r\n        this._days = +days +\r\n            weeks * 7;\r\n        // It is impossible to translate months into days without knowing\r\n        // which months you are are talking about, so we have to store\r\n        // it separately.\r\n        this._months = +months +\r\n            quarters * 3 +\r\n            years * 12;\r\n\r\n        this._data = {};\r\n\r\n        this._locale = getLocale();\r\n\r\n        this._bubble();\r\n    }\r\n\r\n    function isDuration (obj) {\r\n        return obj instanceof Duration;\r\n    }\r\n\r\n    function absRound (number) {\r\n        if (number < 0) {\r\n            return Math.round(-1 * number) * -1;\r\n        } else {\r\n            return Math.round(number);\r\n        }\r\n    }\r\n\r\n    // FORMATTING\r\n\r\n    function offset (token, separator) {\r\n        addFormatToken(token, 0, 0, function () {\r\n            var offset = this.utcOffset();\r\n            var sign = '+';\r\n            if (offset < 0) {\r\n                offset = -offset;\r\n                sign = '-';\r\n            }\r\n            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);\r\n        });\r\n    }\r\n\r\n    offset('Z', ':');\r\n    offset('ZZ', '');\r\n\r\n    // PARSING\r\n\r\n    addRegexToken('Z',  matchShortOffset);\r\n    addRegexToken('ZZ', matchShortOffset);\r\n    addParseToken(['Z', 'ZZ'], function (input, array, config) {\r\n        config._useUTC = true;\r\n        config._tzm = offsetFromString(matchShortOffset, input);\r\n    });\r\n\r\n    // HELPERS\r\n\r\n    // timezone chunker\r\n    // '+10:00' > ['10',  '00']\r\n    // '-1530'  > ['-15', '30']\r\n    var chunkOffset = /([\\+\\-]|\\d\\d)/gi;\r\n\r\n    function offsetFromString(matcher, string) {\r\n        var matches = (string || '').match(matcher);\r\n\r\n        if (matches === null) {\r\n            return null;\r\n        }\r\n\r\n        var chunk   = matches[matches.length - 1] || [];\r\n        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];\r\n        var minutes = +(parts[1] * 60) + toInt(parts[2]);\r\n\r\n        return minutes === 0 ?\r\n          0 :\r\n          parts[0] === '+' ? minutes : -minutes;\r\n    }\r\n\r\n    // Return a moment from input, that is local/utc/zone equivalent to model.\r\n    function cloneWithOffset(input, model) {\r\n        var res, diff;\r\n        if (model._isUTC) {\r\n            res = model.clone();\r\n            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();\r\n            // Use low-level api, because this fn is low-level api.\r\n            res._d.setTime(res._d.valueOf() + diff);\r\n            hooks.updateOffset(res, false);\r\n            return res;\r\n        } else {\r\n            return createLocal(input).local();\r\n        }\r\n    }\r\n\r\n    function getDateOffset (m) {\r\n        // On Firefox.24 Date#getTimezoneOffset returns a floating point.\r\n        // https://github.com/moment/moment/pull/1871\r\n        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;\r\n    }\r\n\r\n    // HOOKS\r\n\r\n    // This function will be called whenever a moment is mutated.\r\n    // It is intended to keep the offset in sync with the timezone.\r\n    hooks.updateOffset = function () {};\r\n\r\n    // MOMENTS\r\n\r\n    // keepLocalTime = true means only change the timezone, without\r\n    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->\r\n    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset\r\n    // +0200, so we adjust the time as needed, to be valid.\r\n    //\r\n    // Keeping the time actually adds/subtracts (one hour)\r\n    // from the actual represented time. That is why we call updateOffset\r\n    // a second time. In case it wants us to change the offset again\r\n    // _changeInProgress == true case, then we have to adjust, because\r\n    // there is no such time in the given timezone.\r\n    function getSetOffset (input, keepLocalTime, keepMinutes) {\r\n        var offset = this._offset || 0,\r\n            localAdjust;\r\n        if (!this.isValid()) {\r\n            return input != null ? this : NaN;\r\n        }\r\n        if (input != null) {\r\n            if (typeof input === 'string') {\r\n                input = offsetFromString(matchShortOffset, input);\r\n                if (input === null) {\r\n                    return this;\r\n                }\r\n            } else if (Math.abs(input) < 16 && !keepMinutes) {\r\n                input = input * 60;\r\n            }\r\n            if (!this._isUTC && keepLocalTime) {\r\n                localAdjust = getDateOffset(this);\r\n            }\r\n            this._offset = input;\r\n            this._isUTC = true;\r\n            if (localAdjust != null) {\r\n                this.add(localAdjust, 'm');\r\n            }\r\n            if (offset !== input) {\r\n                if (!keepLocalTime || this._changeInProgress) {\r\n                    addSubtract(this, createDuration(input - offset, 'm'), 1, false);\r\n                } else if (!this._changeInProgress) {\r\n                    this._changeInProgress = true;\r\n                    hooks.updateOffset(this, true);\r\n                    this._changeInProgress = null;\r\n                }\r\n            }\r\n            return this;\r\n        } else {\r\n            return this._isUTC ? offset : getDateOffset(this);\r\n        }\r\n    }\r\n\r\n    function getSetZone (input, keepLocalTime) {\r\n        if (input != null) {\r\n            if (typeof input !== 'string') {\r\n                input = -input;\r\n            }\r\n\r\n            this.utcOffset(input, keepLocalTime);\r\n\r\n            return this;\r\n        } else {\r\n            return -this.utcOffset();\r\n        }\r\n    }\r\n\r\n    function setOffsetToUTC (keepLocalTime) {\r\n        return this.utcOffset(0, keepLocalTime);\r\n    }\r\n\r\n    function setOffsetToLocal (keepLocalTime) {\r\n        if (this._isUTC) {\r\n            this.utcOffset(0, keepLocalTime);\r\n            this._isUTC = false;\r\n\r\n            if (keepLocalTime) {\r\n                this.subtract(getDateOffset(this), 'm');\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    function setOffsetToParsedOffset () {\r\n        if (this._tzm != null) {\r\n            this.utcOffset(this._tzm, false, true);\r\n        } else if (typeof this._i === 'string') {\r\n            var tZone = offsetFromString(matchOffset, this._i);\r\n            if (tZone != null) {\r\n                this.utcOffset(tZone);\r\n            }\r\n            else {\r\n                this.utcOffset(0, true);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    function hasAlignedHourOffset (input) {\r\n        if (!this.isValid()) {\r\n            return false;\r\n        }\r\n        input = input ? createLocal(input).utcOffset() : 0;\r\n\r\n        return (this.utcOffset() - input) % 60 === 0;\r\n    }\r\n\r\n    function isDaylightSavingTime () {\r\n        return (\r\n            this.utcOffset() > this.clone().month(0).utcOffset() ||\r\n            this.utcOffset() > this.clone().month(5).utcOffset()\r\n        );\r\n    }\r\n\r\n    function isDaylightSavingTimeShifted () {\r\n        if (!isUndefined(this._isDSTShifted)) {\r\n            return this._isDSTShifted;\r\n        }\r\n\r\n        var c = {};\r\n\r\n        copyConfig(c, this);\r\n        c = prepareConfig(c);\r\n\r\n        if (c._a) {\r\n            var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);\r\n            this._isDSTShifted = this.isValid() &&\r\n                compareArrays(c._a, other.toArray()) > 0;\r\n        } else {\r\n            this._isDSTShifted = false;\r\n        }\r\n\r\n        return this._isDSTShifted;\r\n    }\r\n\r\n    function isLocal () {\r\n        return this.isValid() ? !this._isUTC : false;\r\n    }\r\n\r\n    function isUtcOffset () {\r\n        return this.isValid() ? this._isUTC : false;\r\n    }\r\n\r\n    function isUtc () {\r\n        return this.isValid() ? this._isUTC && this._offset === 0 : false;\r\n    }\r\n\r\n    // ASP.NET json date format regex\r\n    var aspNetRegex = /^(\\-|\\+)?(?:(\\d*)[. ])?(\\d+)\\:(\\d+)(?:\\:(\\d+)(\\.\\d*)?)?$/;\r\n\r\n    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\r\n    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\r\n    // and further modified to allow for strings containing both week and day\r\n    var isoRegex = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\r\n\r\n    function createDuration (input, key) {\r\n        var duration = input,\r\n            // matching against regexp is expensive, do it on demand\r\n            match = null,\r\n            sign,\r\n            ret,\r\n            diffRes;\r\n\r\n        if (isDuration(input)) {\r\n            duration = {\r\n                ms : input._milliseconds,\r\n                d  : input._days,\r\n                M  : input._months\r\n            };\r\n        } else if (isNumber(input)) {\r\n            duration = {};\r\n            if (key) {\r\n                duration[key] = input;\r\n            } else {\r\n                duration.milliseconds = input;\r\n            }\r\n        } else if (!!(match = aspNetRegex.exec(input))) {\r\n            sign = (match[1] === '-') ? -1 : 1;\r\n            duration = {\r\n                y  : 0,\r\n                d  : toInt(match[DATE])                         * sign,\r\n                h  : toInt(match[HOUR])                         * sign,\r\n                m  : toInt(match[MINUTE])                       * sign,\r\n                s  : toInt(match[SECOND])                       * sign,\r\n                ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match\r\n            };\r\n        } else if (!!(match = isoRegex.exec(input))) {\r\n            sign = (match[1] === '-') ? -1 : (match[1] === '+') ? 1 : 1;\r\n            duration = {\r\n                y : parseIso(match[2], sign),\r\n                M : parseIso(match[3], sign),\r\n                w : parseIso(match[4], sign),\r\n                d : parseIso(match[5], sign),\r\n                h : parseIso(match[6], sign),\r\n                m : parseIso(match[7], sign),\r\n                s : parseIso(match[8], sign)\r\n            };\r\n        } else if (duration == null) {// checks for null or undefined\r\n            duration = {};\r\n        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {\r\n            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));\r\n\r\n            duration = {};\r\n            duration.ms = diffRes.milliseconds;\r\n            duration.M = diffRes.months;\r\n        }\r\n\r\n        ret = new Duration(duration);\r\n\r\n        if (isDuration(input) && hasOwnProp(input, '_locale')) {\r\n            ret._locale = input._locale;\r\n        }\r\n\r\n        return ret;\r\n    }\r\n\r\n    createDuration.fn = Duration.prototype;\r\n    createDuration.invalid = createInvalid$1;\r\n\r\n    function parseIso (inp, sign) {\r\n        // We'd normally use ~~inp for this, but unfortunately it also\r\n        // converts floats to ints.\r\n        // inp may be undefined, so careful calling replace on it.\r\n        var res = inp && parseFloat(inp.replace(',', '.'));\r\n        // apply sign while we're at it\r\n        return (isNaN(res) ? 0 : res) * sign;\r\n    }\r\n\r\n    function positiveMomentsDifference(base, other) {\r\n        var res = {milliseconds: 0, months: 0};\r\n\r\n        res.months = other.month() - base.month() +\r\n            (other.year() - base.year()) * 12;\r\n        if (base.clone().add(res.months, 'M').isAfter(other)) {\r\n            --res.months;\r\n        }\r\n\r\n        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));\r\n\r\n        return res;\r\n    }\r\n\r\n    function momentsDifference(base, other) {\r\n        var res;\r\n        if (!(base.isValid() && other.isValid())) {\r\n            return {milliseconds: 0, months: 0};\r\n        }\r\n\r\n        other = cloneWithOffset(other, base);\r\n        if (base.isBefore(other)) {\r\n            res = positiveMomentsDifference(base, other);\r\n        } else {\r\n            res = positiveMomentsDifference(other, base);\r\n            res.milliseconds = -res.milliseconds;\r\n            res.months = -res.months;\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    // TODO: remove 'name' arg after deprecation is removed\r\n    function createAdder(direction, name) {\r\n        return function (val, period) {\r\n            var dur, tmp;\r\n            //invert the arguments, but complain about it\r\n            if (period !== null && !isNaN(+period)) {\r\n                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +\r\n                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');\r\n                tmp = val; val = period; period = tmp;\r\n            }\r\n\r\n            val = typeof val === 'string' ? +val : val;\r\n            dur = createDuration(val, period);\r\n            addSubtract(this, dur, direction);\r\n            return this;\r\n        };\r\n    }\r\n\r\n    function addSubtract (mom, duration, isAdding, updateOffset) {\r\n        var milliseconds = duration._milliseconds,\r\n            days = absRound(duration._days),\r\n            months = absRound(duration._months);\r\n\r\n        if (!mom.isValid()) {\r\n            // No op\r\n            return;\r\n        }\r\n\r\n        updateOffset = updateOffset == null ? true : updateOffset;\r\n\r\n        if (months) {\r\n            setMonth(mom, get(mom, 'Month') + months * isAdding);\r\n        }\r\n        if (days) {\r\n            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);\r\n        }\r\n        if (milliseconds) {\r\n            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);\r\n        }\r\n        if (updateOffset) {\r\n            hooks.updateOffset(mom, days || months);\r\n        }\r\n    }\r\n\r\n    var add      = createAdder(1, 'add');\r\n    var subtract = createAdder(-1, 'subtract');\r\n\r\n    function getCalendarFormat(myMoment, now) {\r\n        var diff = myMoment.diff(now, 'days', true);\r\n        return diff < -6 ? 'sameElse' :\r\n                diff < -1 ? 'lastWeek' :\r\n                diff < 0 ? 'lastDay' :\r\n                diff < 1 ? 'sameDay' :\r\n                diff < 2 ? 'nextDay' :\r\n                diff < 7 ? 'nextWeek' : 'sameElse';\r\n    }\r\n\r\n    function calendar$1 (time, formats) {\r\n        // We want to compare the start of today, vs this.\r\n        // Getting start-of-today depends on whether we're local/utc/offset or not.\r\n        var now = time || createLocal(),\r\n            sod = cloneWithOffset(now, this).startOf('day'),\r\n            format = hooks.calendarFormat(this, sod) || 'sameElse';\r\n\r\n        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);\r\n\r\n        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));\r\n    }\r\n\r\n    function clone () {\r\n        return new Moment(this);\r\n    }\r\n\r\n    function isAfter (input, units) {\r\n        var localInput = isMoment(input) ? input : createLocal(input);\r\n        if (!(this.isValid() && localInput.isValid())) {\r\n            return false;\r\n        }\r\n        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');\r\n        if (units === 'millisecond') {\r\n            return this.valueOf() > localInput.valueOf();\r\n        } else {\r\n            return localInput.valueOf() < this.clone().startOf(units).valueOf();\r\n        }\r\n    }\r\n\r\n    function isBefore (input, units) {\r\n        var localInput = isMoment(input) ? input : createLocal(input);\r\n        if (!(this.isValid() && localInput.isValid())) {\r\n            return false;\r\n        }\r\n        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');\r\n        if (units === 'millisecond') {\r\n            return this.valueOf() < localInput.valueOf();\r\n        } else {\r\n            return this.clone().endOf(units).valueOf() < localInput.valueOf();\r\n        }\r\n    }\r\n\r\n    function isBetween (from, to, units, inclusivity) {\r\n        inclusivity = inclusivity || '()';\r\n        return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&\r\n            (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));\r\n    }\r\n\r\n    function isSame (input, units) {\r\n        var localInput = isMoment(input) ? input : createLocal(input),\r\n            inputMs;\r\n        if (!(this.isValid() && localInput.isValid())) {\r\n            return false;\r\n        }\r\n        units = normalizeUnits(units || 'millisecond');\r\n        if (units === 'millisecond') {\r\n            return this.valueOf() === localInput.valueOf();\r\n        } else {\r\n            inputMs = localInput.valueOf();\r\n            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();\r\n        }\r\n    }\r\n\r\n    function isSameOrAfter (input, units) {\r\n        return this.isSame(input, units) || this.isAfter(input,units);\r\n    }\r\n\r\n    function isSameOrBefore (input, units) {\r\n        return this.isSame(input, units) || this.isBefore(input,units);\r\n    }\r\n\r\n    function diff (input, units, asFloat) {\r\n        var that,\r\n            zoneDelta,\r\n            output;\r\n\r\n        if (!this.isValid()) {\r\n            return NaN;\r\n        }\r\n\r\n        that = cloneWithOffset(input, this);\r\n\r\n        if (!that.isValid()) {\r\n            return NaN;\r\n        }\r\n\r\n        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;\r\n\r\n        units = normalizeUnits(units);\r\n\r\n        switch (units) {\r\n            case 'year': output = monthDiff(this, that) / 12; break;\r\n            case 'month': output = monthDiff(this, that); break;\r\n            case 'quarter': output = monthDiff(this, that) / 3; break;\r\n            case 'second': output = (this - that) / 1e3; break; // 1000\r\n            case 'minute': output = (this - that) / 6e4; break; // 1000 * 60\r\n            case 'hour': output = (this - that) / 36e5; break; // 1000 * 60 * 60\r\n            case 'day': output = (this - that - zoneDelta) / 864e5; break; // 1000 * 60 * 60 * 24, negate dst\r\n            case 'week': output = (this - that - zoneDelta) / 6048e5; break; // 1000 * 60 * 60 * 24 * 7, negate dst\r\n            default: output = this - that;\r\n        }\r\n\r\n        return asFloat ? output : absFloor(output);\r\n    }\r\n\r\n    function monthDiff (a, b) {\r\n        // difference in months\r\n        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),\r\n            // b is in (anchor - 1 month, anchor + 1 month)\r\n            anchor = a.clone().add(wholeMonthDiff, 'months'),\r\n            anchor2, adjust;\r\n\r\n        if (b - anchor < 0) {\r\n            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');\r\n            // linear across the month\r\n            adjust = (b - anchor) / (anchor - anchor2);\r\n        } else {\r\n            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');\r\n            // linear across the month\r\n            adjust = (b - anchor) / (anchor2 - anchor);\r\n        }\r\n\r\n        //check for negative zero, return zero if negative zero\r\n        return -(wholeMonthDiff + adjust) || 0;\r\n    }\r\n\r\n    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';\r\n    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';\r\n\r\n    function toString () {\r\n        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');\r\n    }\r\n\r\n    function toISOString(keepOffset) {\r\n        if (!this.isValid()) {\r\n            return null;\r\n        }\r\n        var utc = keepOffset !== true;\r\n        var m = utc ? this.clone().utc() : this;\r\n        if (m.year() < 0 || m.year() > 9999) {\r\n            return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');\r\n        }\r\n        if (isFunction(Date.prototype.toISOString)) {\r\n            // native implementation is ~50x faster, use it when we can\r\n            if (utc) {\r\n                return this.toDate().toISOString();\r\n            } else {\r\n                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));\r\n            }\r\n        }\r\n        return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');\r\n    }\r\n\r\n    /**\r\n     * Return a human readable representation of a moment that can\r\n     * also be evaluated to get a new moment which is the same\r\n     *\r\n     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects\r\n     */\r\n    function inspect () {\r\n        if (!this.isValid()) {\r\n            return 'moment.invalid(/* ' + this._i + ' */)';\r\n        }\r\n        var func = 'moment';\r\n        var zone = '';\r\n        if (!this.isLocal()) {\r\n            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';\r\n            zone = 'Z';\r\n        }\r\n        var prefix = '[' + func + '(\"]';\r\n        var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';\r\n        var datetime = '-MM-DD[T]HH:mm:ss.SSS';\r\n        var suffix = zone + '[\")]';\r\n\r\n        return this.format(prefix + year + datetime + suffix);\r\n    }\r\n\r\n    function format (inputString) {\r\n        if (!inputString) {\r\n            inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;\r\n        }\r\n        var output = formatMoment(this, inputString);\r\n        return this.localeData().postformat(output);\r\n    }\r\n\r\n    function from (time, withoutSuffix) {\r\n        if (this.isValid() &&\r\n                ((isMoment(time) && time.isValid()) ||\r\n                 createLocal(time).isValid())) {\r\n            return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);\r\n        } else {\r\n            return this.localeData().invalidDate();\r\n        }\r\n    }\r\n\r\n    function fromNow (withoutSuffix) {\r\n        return this.from(createLocal(), withoutSuffix);\r\n    }\r\n\r\n    function to (time, withoutSuffix) {\r\n        if (this.isValid() &&\r\n                ((isMoment(time) && time.isValid()) ||\r\n                 createLocal(time).isValid())) {\r\n            return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);\r\n        } else {\r\n            return this.localeData().invalidDate();\r\n        }\r\n    }\r\n\r\n    function toNow (withoutSuffix) {\r\n        return this.to(createLocal(), withoutSuffix);\r\n    }\r\n\r\n    // If passed a locale key, it will set the locale for this\r\n    // instance.  Otherwise, it will return the locale configuration\r\n    // variables for this instance.\r\n    function locale (key) {\r\n        var newLocaleData;\r\n\r\n        if (key === undefined) {\r\n            return this._locale._abbr;\r\n        } else {\r\n            newLocaleData = getLocale(key);\r\n            if (newLocaleData != null) {\r\n                this._locale = newLocaleData;\r\n            }\r\n            return this;\r\n        }\r\n    }\r\n\r\n    var lang = deprecate(\r\n        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',\r\n        function (key) {\r\n            if (key === undefined) {\r\n                return this.localeData();\r\n            } else {\r\n                return this.locale(key);\r\n            }\r\n        }\r\n    );\r\n\r\n    function localeData () {\r\n        return this._locale;\r\n    }\r\n\r\n    function startOf (units) {\r\n        units = normalizeUnits(units);\r\n        // the following switch intentionally omits break keywords\r\n        // to utilize falling through the cases.\r\n        switch (units) {\r\n            case 'year':\r\n                this.month(0);\r\n                /* falls through */\r\n            case 'quarter':\r\n            case 'month':\r\n                this.date(1);\r\n                /* falls through */\r\n            case 'week':\r\n            case 'isoWeek':\r\n            case 'day':\r\n            case 'date':\r\n                this.hours(0);\r\n                /* falls through */\r\n            case 'hour':\r\n                this.minutes(0);\r\n                /* falls through */\r\n            case 'minute':\r\n                this.seconds(0);\r\n                /* falls through */\r\n            case 'second':\r\n                this.milliseconds(0);\r\n        }\r\n\r\n        // weeks are a special case\r\n        if (units === 'week') {\r\n            this.weekday(0);\r\n        }\r\n        if (units === 'isoWeek') {\r\n            this.isoWeekday(1);\r\n        }\r\n\r\n        // quarters are also special\r\n        if (units === 'quarter') {\r\n            this.month(Math.floor(this.month() / 3) * 3);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    function endOf (units) {\r\n        units = normalizeUnits(units);\r\n        if (units === undefined || units === 'millisecond') {\r\n            return this;\r\n        }\r\n\r\n        // 'date' is an alias for 'day', so it should be considered as such.\r\n        if (units === 'date') {\r\n            units = 'day';\r\n        }\r\n\r\n        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');\r\n    }\r\n\r\n    function valueOf () {\r\n        return this._d.valueOf() - ((this._offset || 0) * 60000);\r\n    }\r\n\r\n    function unix () {\r\n        return Math.floor(this.valueOf() / 1000);\r\n    }\r\n\r\n    function toDate () {\r\n        return new Date(this.valueOf());\r\n    }\r\n\r\n    function toArray () {\r\n        var m = this;\r\n        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];\r\n    }\r\n\r\n    function toObject () {\r\n        var m = this;\r\n        return {\r\n            years: m.year(),\r\n            months: m.month(),\r\n            date: m.date(),\r\n            hours: m.hours(),\r\n            minutes: m.minutes(),\r\n            seconds: m.seconds(),\r\n            milliseconds: m.milliseconds()\r\n        };\r\n    }\r\n\r\n    function toJSON () {\r\n        // new Date(NaN).toJSON() === null\r\n        return this.isValid() ? this.toISOString() : null;\r\n    }\r\n\r\n    function isValid$2 () {\r\n        return isValid(this);\r\n    }\r\n\r\n    function parsingFlags () {\r\n        return extend({}, getParsingFlags(this));\r\n    }\r\n\r\n    function invalidAt () {\r\n        return getParsingFlags(this).overflow;\r\n    }\r\n\r\n    function creationData() {\r\n        return {\r\n            input: this._i,\r\n            format: this._f,\r\n            locale: this._locale,\r\n            isUTC: this._isUTC,\r\n            strict: this._strict\r\n        };\r\n    }\r\n\r\n    // FORMATTING\r\n\r\n    addFormatToken(0, ['gg', 2], 0, function () {\r\n        return this.weekYear() % 100;\r\n    });\r\n\r\n    addFormatToken(0, ['GG', 2], 0, function () {\r\n        return this.isoWeekYear() % 100;\r\n    });\r\n\r\n    function addWeekYearFormatToken (token, getter) {\r\n        addFormatToken(0, [token, token.length], 0, getter);\r\n    }\r\n\r\n    addWeekYearFormatToken('gggg',     'weekYear');\r\n    addWeekYearFormatToken('ggggg',    'weekYear');\r\n    addWeekYearFormatToken('GGGG',  'isoWeekYear');\r\n    addWeekYearFormatToken('GGGGG', 'isoWeekYear');\r\n\r\n    // ALIASES\r\n\r\n    addUnitAlias('weekYear', 'gg');\r\n    addUnitAlias('isoWeekYear', 'GG');\r\n\r\n    // PRIORITY\r\n\r\n    addUnitPriority('weekYear', 1);\r\n    addUnitPriority('isoWeekYear', 1);\r\n\r\n\r\n    // PARSING\r\n\r\n    addRegexToken('G',      matchSigned);\r\n    addRegexToken('g',      matchSigned);\r\n    addRegexToken('GG',     match1to2, match2);\r\n    addRegexToken('gg',     match1to2, match2);\r\n    addRegexToken('GGGG',   match1to4, match4);\r\n    addRegexToken('gggg',   match1to4, match4);\r\n    addRegexToken('GGGGG',  match1to6, match6);\r\n    addRegexToken('ggggg',  match1to6, match6);\r\n\r\n    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {\r\n        week[token.substr(0, 2)] = toInt(input);\r\n    });\r\n\r\n    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {\r\n        week[token] = hooks.parseTwoDigitYear(input);\r\n    });\r\n\r\n    // MOMENTS\r\n\r\n    function getSetWeekYear (input) {\r\n        return getSetWeekYearHelper.call(this,\r\n                input,\r\n                this.week(),\r\n                this.weekday(),\r\n                this.localeData()._week.dow,\r\n                this.localeData()._week.doy);\r\n    }\r\n\r\n    function getSetISOWeekYear (input) {\r\n        return getSetWeekYearHelper.call(this,\r\n                input, this.isoWeek(), this.isoWeekday(), 1, 4);\r\n    }\r\n\r\n    function getISOWeeksInYear () {\r\n        return weeksInYear(this.year(), 1, 4);\r\n    }\r\n\r\n    function getWeeksInYear () {\r\n        var weekInfo = this.localeData()._week;\r\n        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);\r\n    }\r\n\r\n    function getSetWeekYearHelper(input, week, weekday, dow, doy) {\r\n        var weeksTarget;\r\n        if (input == null) {\r\n            return weekOfYear(this, dow, doy).year;\r\n        } else {\r\n            weeksTarget = weeksInYear(input, dow, doy);\r\n            if (week > weeksTarget) {\r\n                week = weeksTarget;\r\n            }\r\n            return setWeekAll.call(this, input, week, weekday, dow, doy);\r\n        }\r\n    }\r\n\r\n    function setWeekAll(weekYear, week, weekday, dow, doy) {\r\n        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),\r\n            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);\r\n\r\n        this.year(date.getUTCFullYear());\r\n        this.month(date.getUTCMonth());\r\n        this.date(date.getUTCDate());\r\n        return this;\r\n    }\r\n\r\n    // FORMATTING\r\n\r\n    addFormatToken('Q', 0, 'Qo', 'quarter');\r\n\r\n    // ALIASES\r\n\r\n    addUnitAlias('quarter', 'Q');\r\n\r\n    // PRIORITY\r\n\r\n    addUnitPriority('quarter', 7);\r\n\r\n    // PARSING\r\n\r\n    addRegexToken('Q', match1);\r\n    addParseToken('Q', function (input, array) {\r\n        array[MONTH] = (toInt(input) - 1) * 3;\r\n    });\r\n\r\n    // MOMENTS\r\n\r\n    function getSetQuarter (input) {\r\n        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);\r\n    }\r\n\r\n    // FORMATTING\r\n\r\n    addFormatToken('D', ['DD', 2], 'Do', 'date');\r\n\r\n    // ALIASES\r\n\r\n    addUnitAlias('date', 'D');\r\n\r\n    // PRIORITY\r\n    addUnitPriority('date', 9);\r\n\r\n    // PARSING\r\n\r\n    addRegexToken('D',  match1to2);\r\n    addRegexToken('DD', match1to2, match2);\r\n    addRegexToken('Do', function (isStrict, locale) {\r\n        // TODO: Remove \"ordinalParse\" fallback in next major release.\r\n        return isStrict ?\r\n          (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :\r\n          locale._dayOfMonthOrdinalParseLenient;\r\n    });\r\n\r\n    addParseToken(['D', 'DD'], DATE);\r\n    addParseToken('Do', function (input, array) {\r\n        array[DATE] = toInt(input.match(match1to2)[0]);\r\n    });\r\n\r\n    // MOMENTS\r\n\r\n    var getSetDayOfMonth = makeGetSet('Date', true);\r\n\r\n    // FORMATTING\r\n\r\n    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');\r\n\r\n    // ALIASES\r\n\r\n    addUnitAlias('dayOfYear', 'DDD');\r\n\r\n    // PRIORITY\r\n    addUnitPriority('dayOfYear', 4);\r\n\r\n    // PARSING\r\n\r\n    addRegexToken('DDD',  match1to3);\r\n    addRegexToken('DDDD', match3);\r\n    addParseToken(['DDD', 'DDDD'], function (input, array, config) {\r\n        config._dayOfYear = toInt(input);\r\n    });\r\n\r\n    // HELPERS\r\n\r\n    // MOMENTS\r\n\r\n    function getSetDayOfYear (input) {\r\n        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;\r\n        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');\r\n    }\r\n\r\n    // FORMATTING\r\n\r\n    addFormatToken('m', ['mm', 2], 0, 'minute');\r\n\r\n    // ALIASES\r\n\r\n    addUnitAlias('minute', 'm');\r\n\r\n    // PRIORITY\r\n\r\n    addUnitPriority('minute', 14);\r\n\r\n    // PARSING\r\n\r\n    addRegexToken('m',  match1to2);\r\n    addRegexToken('mm', match1to2, match2);\r\n    addParseToken(['m', 'mm'], MINUTE);\r\n\r\n    // MOMENTS\r\n\r\n    var getSetMinute = makeGetSet('Minutes', false);\r\n\r\n    // FORMATTING\r\n\r\n    addFormatToken('s', ['ss', 2], 0, 'second');\r\n\r\n    // ALIASES\r\n\r\n    addUnitAlias('second', 's');\r\n\r\n    // PRIORITY\r\n\r\n    addUnitPriority('second', 15);\r\n\r\n    // PARSING\r\n\r\n    addRegexToken('s',  match1to2);\r\n    addRegexToken('ss', match1to2, match2);\r\n    addParseToken(['s', 'ss'], SECOND);\r\n\r\n    // MOMENTS\r\n\r\n    var getSetSecond = makeGetSet('Seconds', false);\r\n\r\n    // FORMATTING\r\n\r\n    addFormatToken('S', 0, 0, function () {\r\n        return ~~(this.millisecond() / 100);\r\n    });\r\n\r\n    addFormatToken(0, ['SS', 2], 0, function () {\r\n        return ~~(this.millisecond() / 10);\r\n    });\r\n\r\n    addFormatToken(0, ['SSS', 3], 0, 'millisecond');\r\n    addFormatToken(0, ['SSSS', 4], 0, function () {\r\n        return this.millisecond() * 10;\r\n    });\r\n    addFormatToken(0, ['SSSSS', 5], 0, function () {\r\n        return this.millisecond() * 100;\r\n    });\r\n    addFormatToken(0, ['SSSSSS', 6], 0, function () {\r\n        return this.millisecond() * 1000;\r\n    });\r\n    addFormatToken(0, ['SSSSSSS', 7], 0, function () {\r\n        return this.millisecond() * 10000;\r\n    });\r\n    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {\r\n        return this.millisecond() * 100000;\r\n    });\r\n    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {\r\n        return this.millisecond() * 1000000;\r\n    });\r\n\r\n\r\n    // ALIASES\r\n\r\n    addUnitAlias('millisecond', 'ms');\r\n\r\n    // PRIORITY\r\n\r\n    addUnitPriority('millisecond', 16);\r\n\r\n    // PARSING\r\n\r\n    addRegexToken('S',    match1to3, match1);\r\n    addRegexToken('SS',   match1to3, match2);\r\n    addRegexToken('SSS',  match1to3, match3);\r\n\r\n    var token;\r\n    for (token = 'SSSS'; token.length <= 9; token += 'S') {\r\n        addRegexToken(token, matchUnsigned);\r\n    }\r\n\r\n    function parseMs(input, array) {\r\n        array[MILLISECOND] = toInt(('0.' + input) * 1000);\r\n    }\r\n\r\n    for (token = 'S'; token.length <= 9; token += 'S') {\r\n        addParseToken(token, parseMs);\r\n    }\r\n    // MOMENTS\r\n\r\n    var getSetMillisecond = makeGetSet('Milliseconds', false);\r\n\r\n    // FORMATTING\r\n\r\n    addFormatToken('z',  0, 0, 'zoneAbbr');\r\n    addFormatToken('zz', 0, 0, 'zoneName');\r\n\r\n    // MOMENTS\r\n\r\n    function getZoneAbbr () {\r\n        return this._isUTC ? 'UTC' : '';\r\n    }\r\n\r\n    function getZoneName () {\r\n        return this._isUTC ? 'Coordinated Universal Time' : '';\r\n    }\r\n\r\n    var proto = Moment.prototype;\r\n\r\n    proto.add               = add;\r\n    proto.calendar          = calendar$1;\r\n    proto.clone             = clone;\r\n    proto.diff              = diff;\r\n    proto.endOf             = endOf;\r\n    proto.format            = format;\r\n    proto.from              = from;\r\n    proto.fromNow           = fromNow;\r\n    proto.to                = to;\r\n    proto.toNow             = toNow;\r\n    proto.get               = stringGet;\r\n    proto.invalidAt         = invalidAt;\r\n    proto.isAfter           = isAfter;\r\n    proto.isBefore          = isBefore;\r\n    proto.isBetween         = isBetween;\r\n    proto.isSame            = isSame;\r\n    proto.isSameOrAfter     = isSameOrAfter;\r\n    proto.isSameOrBefore    = isSameOrBefore;\r\n    proto.isValid           = isValid$2;\r\n    proto.lang              = lang;\r\n    proto.locale            = locale;\r\n    proto.localeData        = localeData;\r\n    proto.max               = prototypeMax;\r\n    proto.min               = prototypeMin;\r\n    proto.parsingFlags      = parsingFlags;\r\n    proto.set               = stringSet;\r\n    proto.startOf           = startOf;\r\n    proto.subtract          = subtract;\r\n    proto.toArray           = toArray;\r\n    proto.toObject          = toObject;\r\n    proto.toDate            = toDate;\r\n    proto.toISOString       = toISOString;\r\n    proto.inspect           = inspect;\r\n    proto.toJSON            = toJSON;\r\n    proto.toString          = toString;\r\n    proto.unix              = unix;\r\n    proto.valueOf           = valueOf;\r\n    proto.creationData      = creationData;\r\n    proto.year       = getSetYear;\r\n    proto.isLeapYear = getIsLeapYear;\r\n    proto.weekYear    = getSetWeekYear;\r\n    proto.isoWeekYear = getSetISOWeekYear;\r\n    proto.quarter = proto.quarters = getSetQuarter;\r\n    proto.month       = getSetMonth;\r\n    proto.daysInMonth = getDaysInMonth;\r\n    proto.week           = proto.weeks        = getSetWeek;\r\n    proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;\r\n    proto.weeksInYear    = getWeeksInYear;\r\n    proto.isoWeeksInYear = getISOWeeksInYear;\r\n    proto.date       = getSetDayOfMonth;\r\n    proto.day        = proto.days             = getSetDayOfWeek;\r\n    proto.weekday    = getSetLocaleDayOfWeek;\r\n    proto.isoWeekday = getSetISODayOfWeek;\r\n    proto.dayOfYear  = getSetDayOfYear;\r\n    proto.hour = proto.hours = getSetHour;\r\n    proto.minute = proto.minutes = getSetMinute;\r\n    proto.second = proto.seconds = getSetSecond;\r\n    proto.millisecond = proto.milliseconds = getSetMillisecond;\r\n    proto.utcOffset            = getSetOffset;\r\n    proto.utc                  = setOffsetToUTC;\r\n    proto.local                = setOffsetToLocal;\r\n    proto.parseZone            = setOffsetToParsedOffset;\r\n    proto.hasAlignedHourOffset = hasAlignedHourOffset;\r\n    proto.isDST                = isDaylightSavingTime;\r\n    proto.isLocal              = isLocal;\r\n    proto.isUtcOffset          = isUtcOffset;\r\n    proto.isUtc                = isUtc;\r\n    proto.isUTC                = isUtc;\r\n    proto.zoneAbbr = getZoneAbbr;\r\n    proto.zoneName = getZoneName;\r\n    proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);\r\n    proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);\r\n    proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);\r\n    proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);\r\n    proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);\r\n\r\n    function createUnix (input) {\r\n        return createLocal(input * 1000);\r\n    }\r\n\r\n    function createInZone () {\r\n        return createLocal.apply(null, arguments).parseZone();\r\n    }\r\n\r\n    function preParsePostFormat (string) {\r\n        return string;\r\n    }\r\n\r\n    var proto$1 = Locale.prototype;\r\n\r\n    proto$1.calendar        = calendar;\r\n    proto$1.longDateFormat  = longDateFormat;\r\n    proto$1.invalidDate     = invalidDate;\r\n    proto$1.ordinal         = ordinal;\r\n    proto$1.preparse        = preParsePostFormat;\r\n    proto$1.postformat      = preParsePostFormat;\r\n    proto$1.relativeTime    = relativeTime;\r\n    proto$1.pastFuture      = pastFuture;\r\n    proto$1.set             = set;\r\n\r\n    proto$1.months            =        localeMonths;\r\n    proto$1.monthsShort       =        localeMonthsShort;\r\n    proto$1.monthsParse       =        localeMonthsParse;\r\n    proto$1.monthsRegex       = monthsRegex;\r\n    proto$1.monthsShortRegex  = monthsShortRegex;\r\n    proto$1.week = localeWeek;\r\n    proto$1.firstDayOfYear = localeFirstDayOfYear;\r\n    proto$1.firstDayOfWeek = localeFirstDayOfWeek;\r\n\r\n    proto$1.weekdays       =        localeWeekdays;\r\n    proto$1.weekdaysMin    =        localeWeekdaysMin;\r\n    proto$1.weekdaysShort  =        localeWeekdaysShort;\r\n    proto$1.weekdaysParse  =        localeWeekdaysParse;\r\n\r\n    proto$1.weekdaysRegex       =        weekdaysRegex;\r\n    proto$1.weekdaysShortRegex  =        weekdaysShortRegex;\r\n    proto$1.weekdaysMinRegex    =        weekdaysMinRegex;\r\n\r\n    proto$1.isPM = localeIsPM;\r\n    proto$1.meridiem = localeMeridiem;\r\n\r\n    function get$1 (format, index, field, setter) {\r\n        var locale = getLocale();\r\n        var utc = createUTC().set(setter, index);\r\n        return locale[field](utc, format);\r\n    }\r\n\r\n    function listMonthsImpl (format, index, field) {\r\n        if (isNumber(format)) {\r\n            index = format;\r\n            format = undefined;\r\n        }\r\n\r\n        format = format || '';\r\n\r\n        if (index != null) {\r\n            return get$1(format, index, field, 'month');\r\n        }\r\n\r\n        var i;\r\n        var out = [];\r\n        for (i = 0; i < 12; i++) {\r\n            out[i] = get$1(format, i, field, 'month');\r\n        }\r\n        return out;\r\n    }\r\n\r\n    // ()\r\n    // (5)\r\n    // (fmt, 5)\r\n    // (fmt)\r\n    // (true)\r\n    // (true, 5)\r\n    // (true, fmt, 5)\r\n    // (true, fmt)\r\n    function listWeekdaysImpl (localeSorted, format, index, field) {\r\n        if (typeof localeSorted === 'boolean') {\r\n            if (isNumber(format)) {\r\n                index = format;\r\n                format = undefined;\r\n            }\r\n\r\n            format = format || '';\r\n        } else {\r\n            format = localeSorted;\r\n            index = format;\r\n            localeSorted = false;\r\n\r\n            if (isNumber(format)) {\r\n                index = format;\r\n                format = undefined;\r\n            }\r\n\r\n            format = format || '';\r\n        }\r\n\r\n        var locale = getLocale(),\r\n            shift = localeSorted ? locale._week.dow : 0;\r\n\r\n        if (index != null) {\r\n            return get$1(format, (index + shift) % 7, field, 'day');\r\n        }\r\n\r\n        var i;\r\n        var out = [];\r\n        for (i = 0; i < 7; i++) {\r\n            out[i] = get$1(format, (i + shift) % 7, field, 'day');\r\n        }\r\n        return out;\r\n    }\r\n\r\n    function listMonths (format, index) {\r\n        return listMonthsImpl(format, index, 'months');\r\n    }\r\n\r\n    function listMonthsShort (format, index) {\r\n        return listMonthsImpl(format, index, 'monthsShort');\r\n    }\r\n\r\n    function listWeekdays (localeSorted, format, index) {\r\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');\r\n    }\r\n\r\n    function listWeekdaysShort (localeSorted, format, index) {\r\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');\r\n    }\r\n\r\n    function listWeekdaysMin (localeSorted, format, index) {\r\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');\r\n    }\r\n\r\n    getSetGlobalLocale('en', {\r\n        dayOfMonthOrdinalParse: /\\d{1,2}(th|st|nd|rd)/,\r\n        ordinal : function (number) {\r\n            var b = number % 10,\r\n                output = (toInt(number % 100 / 10) === 1) ? 'th' :\r\n                (b === 1) ? 'st' :\r\n                (b === 2) ? 'nd' :\r\n                (b === 3) ? 'rd' : 'th';\r\n            return number + output;\r\n        }\r\n    });\r\n\r\n    // Side effect imports\r\n\r\n    hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);\r\n    hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);\r\n\r\n    var mathAbs = Math.abs;\r\n\r\n    function abs () {\r\n        var data           = this._data;\r\n\r\n        this._milliseconds = mathAbs(this._milliseconds);\r\n        this._days         = mathAbs(this._days);\r\n        this._months       = mathAbs(this._months);\r\n\r\n        data.milliseconds  = mathAbs(data.milliseconds);\r\n        data.seconds       = mathAbs(data.seconds);\r\n        data.minutes       = mathAbs(data.minutes);\r\n        data.hours         = mathAbs(data.hours);\r\n        data.months        = mathAbs(data.months);\r\n        data.years         = mathAbs(data.years);\r\n\r\n        return this;\r\n    }\r\n\r\n    function addSubtract$1 (duration, input, value, direction) {\r\n        var other = createDuration(input, value);\r\n\r\n        duration._milliseconds += direction * other._milliseconds;\r\n        duration._days         += direction * other._days;\r\n        duration._months       += direction * other._months;\r\n\r\n        return duration._bubble();\r\n    }\r\n\r\n    // supports only 2.0-style add(1, 's') or add(duration)\r\n    function add$1 (input, value) {\r\n        return addSubtract$1(this, input, value, 1);\r\n    }\r\n\r\n    // supports only 2.0-style subtract(1, 's') or subtract(duration)\r\n    function subtract$1 (input, value) {\r\n        return addSubtract$1(this, input, value, -1);\r\n    }\r\n\r\n    function absCeil (number) {\r\n        if (number < 0) {\r\n            return Math.floor(number);\r\n        } else {\r\n            return Math.ceil(number);\r\n        }\r\n    }\r\n\r\n    function bubble () {\r\n        var milliseconds = this._milliseconds;\r\n        var days         = this._days;\r\n        var months       = this._months;\r\n        var data         = this._data;\r\n        var seconds, minutes, hours, years, monthsFromDays;\r\n\r\n        // if we have a mix of positive and negative values, bubble down first\r\n        // check: https://github.com/moment/moment/issues/2166\r\n        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||\r\n                (milliseconds <= 0 && days <= 0 && months <= 0))) {\r\n            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;\r\n            days = 0;\r\n            months = 0;\r\n        }\r\n\r\n        // The following code bubbles up values, see the tests for\r\n        // examples of what that means.\r\n        data.milliseconds = milliseconds % 1000;\r\n\r\n        seconds           = absFloor(milliseconds / 1000);\r\n        data.seconds      = seconds % 60;\r\n\r\n        minutes           = absFloor(seconds / 60);\r\n        data.minutes      = minutes % 60;\r\n\r\n        hours             = absFloor(minutes / 60);\r\n        data.hours        = hours % 24;\r\n\r\n        days += absFloor(hours / 24);\r\n\r\n        // convert days to months\r\n        monthsFromDays = absFloor(daysToMonths(days));\r\n        months += monthsFromDays;\r\n        days -= absCeil(monthsToDays(monthsFromDays));\r\n\r\n        // 12 months -> 1 year\r\n        years = absFloor(months / 12);\r\n        months %= 12;\r\n\r\n        data.days   = days;\r\n        data.months = months;\r\n        data.years  = years;\r\n\r\n        return this;\r\n    }\r\n\r\n    function daysToMonths (days) {\r\n        // 400 years have 146097 days (taking into account leap year rules)\r\n        // 400 years have 12 months === 4800\r\n        return days * 4800 / 146097;\r\n    }\r\n\r\n    function monthsToDays (months) {\r\n        // the reverse of daysToMonths\r\n        return months * 146097 / 4800;\r\n    }\r\n\r\n    function as (units) {\r\n        if (!this.isValid()) {\r\n            return NaN;\r\n        }\r\n        var days;\r\n        var months;\r\n        var milliseconds = this._milliseconds;\r\n\r\n        units = normalizeUnits(units);\r\n\r\n        if (units === 'month' || units === 'year') {\r\n            days   = this._days   + milliseconds / 864e5;\r\n            months = this._months + daysToMonths(days);\r\n            return units === 'month' ? months : months / 12;\r\n        } else {\r\n            // handle milliseconds separately because of floating point math errors (issue #1867)\r\n            days = this._days + Math.round(monthsToDays(this._months));\r\n            switch (units) {\r\n                case 'week'   : return days / 7     + milliseconds / 6048e5;\r\n                case 'day'    : return days         + milliseconds / 864e5;\r\n                case 'hour'   : return days * 24    + milliseconds / 36e5;\r\n                case 'minute' : return days * 1440  + milliseconds / 6e4;\r\n                case 'second' : return days * 86400 + milliseconds / 1000;\r\n                // Math.floor prevents floating point math errors here\r\n                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;\r\n                default: throw new Error('Unknown unit ' + units);\r\n            }\r\n        }\r\n    }\r\n\r\n    // TODO: Use this.as('ms')?\r\n    function valueOf$1 () {\r\n        if (!this.isValid()) {\r\n            return NaN;\r\n        }\r\n        return (\r\n            this._milliseconds +\r\n            this._days * 864e5 +\r\n            (this._months % 12) * 2592e6 +\r\n            toInt(this._months / 12) * 31536e6\r\n        );\r\n    }\r\n\r\n    function makeAs (alias) {\r\n        return function () {\r\n            return this.as(alias);\r\n        };\r\n    }\r\n\r\n    var asMilliseconds = makeAs('ms');\r\n    var asSeconds      = makeAs('s');\r\n    var asMinutes      = makeAs('m');\r\n    var asHours        = makeAs('h');\r\n    var asDays         = makeAs('d');\r\n    var asWeeks        = makeAs('w');\r\n    var asMonths       = makeAs('M');\r\n    var asYears        = makeAs('y');\r\n\r\n    function clone$1 () {\r\n        return createDuration(this);\r\n    }\r\n\r\n    function get$2 (units) {\r\n        units = normalizeUnits(units);\r\n        return this.isValid() ? this[units + 's']() : NaN;\r\n    }\r\n\r\n    function makeGetter(name) {\r\n        return function () {\r\n            return this.isValid() ? this._data[name] : NaN;\r\n        };\r\n    }\r\n\r\n    var milliseconds = makeGetter('milliseconds');\r\n    var seconds      = makeGetter('seconds');\r\n    var minutes      = makeGetter('minutes');\r\n    var hours        = makeGetter('hours');\r\n    var days         = makeGetter('days');\r\n    var months       = makeGetter('months');\r\n    var years        = makeGetter('years');\r\n\r\n    function weeks () {\r\n        return absFloor(this.days() / 7);\r\n    }\r\n\r\n    var round = Math.round;\r\n    var thresholds = {\r\n        ss: 44,         // a few seconds to seconds\r\n        s : 45,         // seconds to minute\r\n        m : 45,         // minutes to hour\r\n        h : 22,         // hours to day\r\n        d : 26,         // days to month\r\n        M : 11          // months to year\r\n    };\r\n\r\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\r\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {\r\n        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);\r\n    }\r\n\r\n    function relativeTime$1 (posNegDuration, withoutSuffix, locale) {\r\n        var duration = createDuration(posNegDuration).abs();\r\n        var seconds  = round(duration.as('s'));\r\n        var minutes  = round(duration.as('m'));\r\n        var hours    = round(duration.as('h'));\r\n        var days     = round(duration.as('d'));\r\n        var months   = round(duration.as('M'));\r\n        var years    = round(duration.as('y'));\r\n\r\n        var a = seconds <= thresholds.ss && ['s', seconds]  ||\r\n                seconds < thresholds.s   && ['ss', seconds] ||\r\n                minutes <= 1             && ['m']           ||\r\n                minutes < thresholds.m   && ['mm', minutes] ||\r\n                hours   <= 1             && ['h']           ||\r\n                hours   < thresholds.h   && ['hh', hours]   ||\r\n                days    <= 1             && ['d']           ||\r\n                days    < thresholds.d   && ['dd', days]    ||\r\n                months  <= 1             && ['M']           ||\r\n                months  < thresholds.M   && ['MM', months]  ||\r\n                years   <= 1             && ['y']           || ['yy', years];\r\n\r\n        a[2] = withoutSuffix;\r\n        a[3] = +posNegDuration > 0;\r\n        a[4] = locale;\r\n        return substituteTimeAgo.apply(null, a);\r\n    }\r\n\r\n    // This function allows you to set the rounding function for relative time strings\r\n    function getSetRelativeTimeRounding (roundingFunction) {\r\n        if (roundingFunction === undefined) {\r\n            return round;\r\n        }\r\n        if (typeof(roundingFunction) === 'function') {\r\n            round = roundingFunction;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // This function allows you to set a threshold for relative time strings\r\n    function getSetRelativeTimeThreshold (threshold, limit) {\r\n        if (thresholds[threshold] === undefined) {\r\n            return false;\r\n        }\r\n        if (limit === undefined) {\r\n            return thresholds[threshold];\r\n        }\r\n        thresholds[threshold] = limit;\r\n        if (threshold === 's') {\r\n            thresholds.ss = limit - 1;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function humanize (withSuffix) {\r\n        if (!this.isValid()) {\r\n            return this.localeData().invalidDate();\r\n        }\r\n\r\n        var locale = this.localeData();\r\n        var output = relativeTime$1(this, !withSuffix, locale);\r\n\r\n        if (withSuffix) {\r\n            output = locale.pastFuture(+this, output);\r\n        }\r\n\r\n        return locale.postformat(output);\r\n    }\r\n\r\n    var abs$1 = Math.abs;\r\n\r\n    function sign(x) {\r\n        return ((x > 0) - (x < 0)) || +x;\r\n    }\r\n\r\n    function toISOString$1() {\r\n        // for ISO strings we do not use the normal bubbling rules:\r\n        //  * milliseconds bubble up until they become hours\r\n        //  * days do not bubble at all\r\n        //  * months bubble up until they become years\r\n        // This is because there is no context-free conversion between hours and days\r\n        // (think of clock changes)\r\n        // and also not between days and months (28-31 days per month)\r\n        if (!this.isValid()) {\r\n            return this.localeData().invalidDate();\r\n        }\r\n\r\n        var seconds = abs$1(this._milliseconds) / 1000;\r\n        var days         = abs$1(this._days);\r\n        var months       = abs$1(this._months);\r\n        var minutes, hours, years;\r\n\r\n        // 3600 seconds -> 60 minutes -> 1 hour\r\n        minutes           = absFloor(seconds / 60);\r\n        hours             = absFloor(minutes / 60);\r\n        seconds %= 60;\r\n        minutes %= 60;\r\n\r\n        // 12 months -> 1 year\r\n        years  = absFloor(months / 12);\r\n        months %= 12;\r\n\r\n\r\n        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js\r\n        var Y = years;\r\n        var M = months;\r\n        var D = days;\r\n        var h = hours;\r\n        var m = minutes;\r\n        var s = seconds ? seconds.toFixed(3).replace(/\\.?0+$/, '') : '';\r\n        var total = this.asSeconds();\r\n\r\n        if (!total) {\r\n            // this is the same as C#'s (Noda) and python (isodate)...\r\n            // but not other JS (goog.date)\r\n            return 'P0D';\r\n        }\r\n\r\n        var totalSign = total < 0 ? '-' : '';\r\n        var ymSign = sign(this._months) !== sign(total) ? '-' : '';\r\n        var daysSign = sign(this._days) !== sign(total) ? '-' : '';\r\n        var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';\r\n\r\n        return totalSign + 'P' +\r\n            (Y ? ymSign + Y + 'Y' : '') +\r\n            (M ? ymSign + M + 'M' : '') +\r\n            (D ? daysSign + D + 'D' : '') +\r\n            ((h || m || s) ? 'T' : '') +\r\n            (h ? hmsSign + h + 'H' : '') +\r\n            (m ? hmsSign + m + 'M' : '') +\r\n            (s ? hmsSign + s + 'S' : '');\r\n    }\r\n\r\n    var proto$2 = Duration.prototype;\r\n\r\n    proto$2.isValid        = isValid$1;\r\n    proto$2.abs            = abs;\r\n    proto$2.add            = add$1;\r\n    proto$2.subtract       = subtract$1;\r\n    proto$2.as             = as;\r\n    proto$2.asMilliseconds = asMilliseconds;\r\n    proto$2.asSeconds      = asSeconds;\r\n    proto$2.asMinutes      = asMinutes;\r\n    proto$2.asHours        = asHours;\r\n    proto$2.asDays         = asDays;\r\n    proto$2.asWeeks        = asWeeks;\r\n    proto$2.asMonths       = asMonths;\r\n    proto$2.asYears        = asYears;\r\n    proto$2.valueOf        = valueOf$1;\r\n    proto$2._bubble        = bubble;\r\n    proto$2.clone          = clone$1;\r\n    proto$2.get            = get$2;\r\n    proto$2.milliseconds   = milliseconds;\r\n    proto$2.seconds        = seconds;\r\n    proto$2.minutes        = minutes;\r\n    proto$2.hours          = hours;\r\n    proto$2.days           = days;\r\n    proto$2.weeks          = weeks;\r\n    proto$2.months         = months;\r\n    proto$2.years          = years;\r\n    proto$2.humanize       = humanize;\r\n    proto$2.toISOString    = toISOString$1;\r\n    proto$2.toString       = toISOString$1;\r\n    proto$2.toJSON         = toISOString$1;\r\n    proto$2.locale         = locale;\r\n    proto$2.localeData     = localeData;\r\n\r\n    proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);\r\n    proto$2.lang = lang;\r\n\r\n    // Side effect imports\r\n\r\n    // FORMATTING\r\n\r\n    addFormatToken('X', 0, 0, 'unix');\r\n    addFormatToken('x', 0, 0, 'valueOf');\r\n\r\n    // PARSING\r\n\r\n    addRegexToken('x', matchSigned);\r\n    addRegexToken('X', matchTimestamp);\r\n    addParseToken('X', function (input, array, config) {\r\n        config._d = new Date(parseFloat(input, 10) * 1000);\r\n    });\r\n    addParseToken('x', function (input, array, config) {\r\n        config._d = new Date(toInt(input));\r\n    });\r\n\r\n    // Side effect imports\r\n\r\n\r\n    hooks.version = '2.22.2';\r\n\r\n    setHookCallback(createLocal);\r\n\r\n    hooks.fn                    = proto;\r\n    hooks.min                   = min;\r\n    hooks.max                   = max;\r\n    hooks.now                   = now;\r\n    hooks.utc                   = createUTC;\r\n    hooks.unix                  = createUnix;\r\n    hooks.months                = listMonths;\r\n    hooks.isDate                = isDate;\r\n    hooks.locale                = getSetGlobalLocale;\r\n    hooks.invalid               = createInvalid;\r\n    hooks.duration              = createDuration;\r\n    hooks.isMoment              = isMoment;\r\n    hooks.weekdays              = listWeekdays;\r\n    hooks.parseZone             = createInZone;\r\n    hooks.localeData            = getLocale;\r\n    hooks.isDuration            = isDuration;\r\n    hooks.monthsShort           = listMonthsShort;\r\n    hooks.weekdaysMin           = listWeekdaysMin;\r\n    hooks.defineLocale          = defineLocale;\r\n    hooks.updateLocale          = updateLocale;\r\n    hooks.locales               = listLocales;\r\n    hooks.weekdaysShort         = listWeekdaysShort;\r\n    hooks.normalizeUnits        = normalizeUnits;\r\n    hooks.relativeTimeRounding  = getSetRelativeTimeRounding;\r\n    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;\r\n    hooks.calendarFormat        = getCalendarFormat;\r\n    hooks.prototype             = proto;\r\n\r\n    // currently HTML5 input type only supports 24-hour formats\r\n    hooks.HTML5_FMT = {\r\n        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',             // <input type=\"datetime-local\" />\r\n        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',  // <input type=\"datetime-local\" step=\"1\" />\r\n        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',   // <input type=\"datetime-local\" step=\"0.001\" />\r\n        DATE: 'YYYY-MM-DD',                             // <input type=\"date\" />\r\n        TIME: 'HH:mm',                                  // <input type=\"time\" />\r\n        TIME_SECONDS: 'HH:mm:ss',                       // <input type=\"time\" step=\"1\" />\r\n        TIME_MS: 'HH:mm:ss.SSS',                        // <input type=\"time\" step=\"0.001\" />\r\n        WEEK: 'YYYY-[W]WW',                             // <input type=\"week\" />\r\n        MONTH: 'YYYY-MM'                                // <input type=\"month\" />\r\n    };\r\n\r\n    return hooks;\r\n\r\n})));\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../node_modules/webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./libs/mymonero-app-js/local_modules/mymonero_core_js/cryptonote_utils/moment.js\n");

/***/ }),

/***/ "./libs/mymonero-app-js/local_modules/mymonero_core_js/cryptonote_utils/money_format_utils.js":
/*!****************************************************************************************************!*\
  !*** ./libs/mymonero-app-js/local_modules/mymonero_core_js/cryptonote_utils/money_format_utils.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("// Copyright (c) 2014-2018, MyMonero.com\r\n//\r\n// All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without modification, are\r\n// permitted provided that the following conditions are met:\r\n//\r\n// 1. Redistributions of source code must retain the above copyright notice, this list of\r\n//\tconditions and the following disclaimer.\r\n//\r\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list\r\n//\tof conditions and the following disclaimer in the documentation and/or other\r\n//\tmaterials provided with the distribution.\r\n//\r\n// 3. Neither the name of the copyright holder nor the names of its contributors may be\r\n//\tused to endorse or promote products derived from this software without specific\r\n//\tprior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY\r\n// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\r\n// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\r\n// THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\r\n// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\r\n// THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n//\r\nconst JSBigInt = __webpack_require__(/*! ./biginteger */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/cryptonote_utils/biginteger.js\").BigInteger;\r\n//\r\nmodule.exports = function(currencyConfig)\r\n{\r\n\t// `currencyConfig` needs coinUnitPlaces, and coinSymbol\r\n\tvar config = {}; // shallow copy of initConfig\r\n\t{\r\n\t\tfor (var key in currencyConfig) {\r\n\t\t\tconfig[key] = currencyConfig[key];\r\n\t\t}\r\n\t\tconfig.coinUnits = new JSBigInt(10).pow(config.coinUnitPlaces);\r\n\t}\r\n\tthis.formatMoneyFull = function(units) {\r\n\t\tunits = units.toString();\r\n\t\tvar symbol = units[0] === \"-\" ? \"-\" : \"\";\r\n\t\tif (symbol === \"-\") {\r\n\t\t\tunits = units.slice(1);\r\n\t\t}\r\n\t\tvar decimal;\r\n\t\tif (units.length >= config.coinUnitPlaces) {\r\n\t\t\tdecimal = units.substr(\r\n\t\t\t\tunits.length - config.coinUnitPlaces,\r\n\t\t\t\tconfig.coinUnitPlaces\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\tdecimal = padLeft(units, config.coinUnitPlaces, \"0\");\r\n\t\t}\r\n\t\treturn (\r\n\t\t\tsymbol +\r\n\t\t\t(units.substr(0, units.length - config.coinUnitPlaces) || \"0\") +\r\n\t\t\t\".\" +\r\n\t\t\tdecimal\r\n\t\t);\r\n\t};\r\n\r\n\tthis.formatMoneyFullSymbol = function(units) {\r\n\t\treturn this.formatMoneyFull(units) + \" \" + config.coinSymbol;\r\n\t};\r\n\r\n\tfunction padLeft(str, len, char) {\r\n\t\twhile (str.length < len) str = char + str;\r\n\t\treturn str;\r\n\t}\r\n\tfunction trimRight(str, char) {\r\n\t\twhile (str[str.length - 1] == char) str = str.slice(0, -1);\r\n\t\treturn str;\r\n\t}\r\n\tthis.formatMoney = function(units) {\r\n\t\tvar f = trimRight(this.formatMoneyFull(units), \"0\");\r\n\t\tif (f[f.length - 1] === \".\") {\r\n\t\t\treturn f.slice(0, f.length - 1);\r\n\t\t}\r\n\t\treturn f;\r\n\t};\r\n\r\n\tthis.formatMoneySymbol = function(units) {\r\n\t\treturn this.formatMoney(units) + \" \" + config.coinSymbol;\r\n\t};\r\n\r\n\tthis.parseMoney = function(str) {\r\n\t\tif (!str) return JSBigInt.ZERO;\r\n\t\tvar negative = str[0] === \"-\";\r\n\t\tif (negative) {\r\n\t\t\tstr = str.slice(1);\r\n\t\t}\r\n\t\tvar decimalIndex = str.indexOf(\".\");\r\n\t\tif (decimalIndex == -1) {\r\n\t\t\tif (negative) {\r\n\t\t\t\treturn JSBigInt.multiply(str, config.coinUnits).negate();\r\n\t\t\t}\r\n\t\t\treturn JSBigInt.multiply(str, config.coinUnits);\r\n\t\t}\r\n\t\tif (decimalIndex + config.coinUnitPlaces + 1 < str.length) {\r\n\t\t\tstr = str.substr(0, decimalIndex + config.coinUnitPlaces + 1);\r\n\t\t}\r\n\t\tif (negative) {\r\n\t\t\treturn new JSBigInt(str.substr(0, decimalIndex))\r\n\t\t\t\t.exp10(config.coinUnitPlaces)\r\n\t\t\t\t.add(\r\n\t\t\t\t\tnew JSBigInt(str.substr(decimalIndex + 1)).exp10(\r\n\t\t\t\t\t\tdecimalIndex + config.coinUnitPlaces - str.length + 1,\r\n\t\t\t\t\t),\r\n\t\t\t\t).negate;\r\n\t\t}\r\n\t\treturn new JSBigInt(str.substr(0, decimalIndex))\r\n\t\t\t.exp10(config.coinUnitPlaces)\r\n\t\t\t.add(\r\n\t\t\t\tnew JSBigInt(str.substr(decimalIndex + 1)).exp10(\r\n\t\t\t\t\tdecimalIndex + config.coinUnitPlaces - str.length + 1,\r\n\t\t\t\t),\r\n\t\t\t);\r\n\t};\r\n\r\n\treturn this;\r\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9saWJzL215bW9uZXJvLWFwcC1qcy9sb2NhbF9tb2R1bGVzL215bW9uZXJvX2NvcmVfanMvY3J5cHRvbm90ZV91dGlscy9tb25leV9mb3JtYXRfdXRpbHMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9saWJzL215bW9uZXJvLWFwcC1qcy9sb2NhbF9tb2R1bGVzL215bW9uZXJvX2NvcmVfanMvY3J5cHRvbm90ZV91dGlscy9tb25leV9mb3JtYXRfdXRpbHMuanM/NGJkNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTQtMjAxOCwgTXlNb25lcm8uY29tXHJcbi8vXHJcbi8vIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vXHJcbi8vIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIGFyZVxyXG4vLyBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcclxuLy9cclxuLy8gMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3Qgb2ZcclxuLy9cdGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cclxuLy9cclxuLy8gMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3RcclxuLy9cdG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXJcclxuLy9cdG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXHJcbi8vXHJcbi8vIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIGNvcHlyaWdodCBob2xkZXIgbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZVxyXG4vL1x0dXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpY1xyXG4vL1x0cHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxyXG4vL1xyXG4vLyBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkQgQU5ZXHJcbi8vIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRlxyXG4vLyBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTFxyXG4vLyBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCxcclxuLy8gU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLFxyXG4vLyBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcclxuLy8gSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsXHJcbi8vIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRlxyXG4vLyBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXHJcbi8vXHJcbmNvbnN0IEpTQmlnSW50ID0gcmVxdWlyZShcIi4vYmlnaW50ZWdlclwiKS5CaWdJbnRlZ2VyO1xyXG4vL1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGN1cnJlbmN5Q29uZmlnKVxyXG57XHJcblx0Ly8gYGN1cnJlbmN5Q29uZmlnYCBuZWVkcyBjb2luVW5pdFBsYWNlcywgYW5kIGNvaW5TeW1ib2xcclxuXHR2YXIgY29uZmlnID0ge307IC8vIHNoYWxsb3cgY29weSBvZiBpbml0Q29uZmlnXHJcblx0e1xyXG5cdFx0Zm9yICh2YXIga2V5IGluIGN1cnJlbmN5Q29uZmlnKSB7XHJcblx0XHRcdGNvbmZpZ1trZXldID0gY3VycmVuY3lDb25maWdba2V5XTtcclxuXHRcdH1cclxuXHRcdGNvbmZpZy5jb2luVW5pdHMgPSBuZXcgSlNCaWdJbnQoMTApLnBvdyhjb25maWcuY29pblVuaXRQbGFjZXMpO1xyXG5cdH1cclxuXHR0aGlzLmZvcm1hdE1vbmV5RnVsbCA9IGZ1bmN0aW9uKHVuaXRzKSB7XHJcblx0XHR1bml0cyA9IHVuaXRzLnRvU3RyaW5nKCk7XHJcblx0XHR2YXIgc3ltYm9sID0gdW5pdHNbMF0gPT09IFwiLVwiID8gXCItXCIgOiBcIlwiO1xyXG5cdFx0aWYgKHN5bWJvbCA9PT0gXCItXCIpIHtcclxuXHRcdFx0dW5pdHMgPSB1bml0cy5zbGljZSgxKTtcclxuXHRcdH1cclxuXHRcdHZhciBkZWNpbWFsO1xyXG5cdFx0aWYgKHVuaXRzLmxlbmd0aCA+PSBjb25maWcuY29pblVuaXRQbGFjZXMpIHtcclxuXHRcdFx0ZGVjaW1hbCA9IHVuaXRzLnN1YnN0cihcclxuXHRcdFx0XHR1bml0cy5sZW5ndGggLSBjb25maWcuY29pblVuaXRQbGFjZXMsXHJcblx0XHRcdFx0Y29uZmlnLmNvaW5Vbml0UGxhY2VzXHJcblx0XHRcdCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRkZWNpbWFsID0gcGFkTGVmdCh1bml0cywgY29uZmlnLmNvaW5Vbml0UGxhY2VzLCBcIjBcIik7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHRzeW1ib2wgK1xyXG5cdFx0XHQodW5pdHMuc3Vic3RyKDAsIHVuaXRzLmxlbmd0aCAtIGNvbmZpZy5jb2luVW5pdFBsYWNlcykgfHwgXCIwXCIpICtcclxuXHRcdFx0XCIuXCIgK1xyXG5cdFx0XHRkZWNpbWFsXHJcblx0XHQpO1xyXG5cdH07XHJcblxyXG5cdHRoaXMuZm9ybWF0TW9uZXlGdWxsU3ltYm9sID0gZnVuY3Rpb24odW5pdHMpIHtcclxuXHRcdHJldHVybiB0aGlzLmZvcm1hdE1vbmV5RnVsbCh1bml0cykgKyBcIiBcIiArIGNvbmZpZy5jb2luU3ltYm9sO1xyXG5cdH07XHJcblxyXG5cdGZ1bmN0aW9uIHBhZExlZnQoc3RyLCBsZW4sIGNoYXIpIHtcclxuXHRcdHdoaWxlIChzdHIubGVuZ3RoIDwgbGVuKSBzdHIgPSBjaGFyICsgc3RyO1xyXG5cdFx0cmV0dXJuIHN0cjtcclxuXHR9XHJcblx0ZnVuY3Rpb24gdHJpbVJpZ2h0KHN0ciwgY2hhcikge1xyXG5cdFx0d2hpbGUgKHN0cltzdHIubGVuZ3RoIC0gMV0gPT0gY2hhcikgc3RyID0gc3RyLnNsaWNlKDAsIC0xKTtcclxuXHRcdHJldHVybiBzdHI7XHJcblx0fVxyXG5cdHRoaXMuZm9ybWF0TW9uZXkgPSBmdW5jdGlvbih1bml0cykge1xyXG5cdFx0dmFyIGYgPSB0cmltUmlnaHQodGhpcy5mb3JtYXRNb25leUZ1bGwodW5pdHMpLCBcIjBcIik7XHJcblx0XHRpZiAoZltmLmxlbmd0aCAtIDFdID09PSBcIi5cIikge1xyXG5cdFx0XHRyZXR1cm4gZi5zbGljZSgwLCBmLmxlbmd0aCAtIDEpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGY7XHJcblx0fTtcclxuXHJcblx0dGhpcy5mb3JtYXRNb25leVN5bWJvbCA9IGZ1bmN0aW9uKHVuaXRzKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5mb3JtYXRNb25leSh1bml0cykgKyBcIiBcIiArIGNvbmZpZy5jb2luU3ltYm9sO1xyXG5cdH07XHJcblxyXG5cdHRoaXMucGFyc2VNb25leSA9IGZ1bmN0aW9uKHN0cikge1xyXG5cdFx0aWYgKCFzdHIpIHJldHVybiBKU0JpZ0ludC5aRVJPO1xyXG5cdFx0dmFyIG5lZ2F0aXZlID0gc3RyWzBdID09PSBcIi1cIjtcclxuXHRcdGlmIChuZWdhdGl2ZSkge1xyXG5cdFx0XHRzdHIgPSBzdHIuc2xpY2UoMSk7XHJcblx0XHR9XHJcblx0XHR2YXIgZGVjaW1hbEluZGV4ID0gc3RyLmluZGV4T2YoXCIuXCIpO1xyXG5cdFx0aWYgKGRlY2ltYWxJbmRleCA9PSAtMSkge1xyXG5cdFx0XHRpZiAobmVnYXRpdmUpIHtcclxuXHRcdFx0XHRyZXR1cm4gSlNCaWdJbnQubXVsdGlwbHkoc3RyLCBjb25maWcuY29pblVuaXRzKS5uZWdhdGUoKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gSlNCaWdJbnQubXVsdGlwbHkoc3RyLCBjb25maWcuY29pblVuaXRzKTtcclxuXHRcdH1cclxuXHRcdGlmIChkZWNpbWFsSW5kZXggKyBjb25maWcuY29pblVuaXRQbGFjZXMgKyAxIDwgc3RyLmxlbmd0aCkge1xyXG5cdFx0XHRzdHIgPSBzdHIuc3Vic3RyKDAsIGRlY2ltYWxJbmRleCArIGNvbmZpZy5jb2luVW5pdFBsYWNlcyArIDEpO1xyXG5cdFx0fVxyXG5cdFx0aWYgKG5lZ2F0aXZlKSB7XHJcblx0XHRcdHJldHVybiBuZXcgSlNCaWdJbnQoc3RyLnN1YnN0cigwLCBkZWNpbWFsSW5kZXgpKVxyXG5cdFx0XHRcdC5leHAxMChjb25maWcuY29pblVuaXRQbGFjZXMpXHJcblx0XHRcdFx0LmFkZChcclxuXHRcdFx0XHRcdG5ldyBKU0JpZ0ludChzdHIuc3Vic3RyKGRlY2ltYWxJbmRleCArIDEpKS5leHAxMChcclxuXHRcdFx0XHRcdFx0ZGVjaW1hbEluZGV4ICsgY29uZmlnLmNvaW5Vbml0UGxhY2VzIC0gc3RyLmxlbmd0aCArIDEsXHJcblx0XHRcdFx0XHQpLFxyXG5cdFx0XHRcdCkubmVnYXRlO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIG5ldyBKU0JpZ0ludChzdHIuc3Vic3RyKDAsIGRlY2ltYWxJbmRleCkpXHJcblx0XHRcdC5leHAxMChjb25maWcuY29pblVuaXRQbGFjZXMpXHJcblx0XHRcdC5hZGQoXHJcblx0XHRcdFx0bmV3IEpTQmlnSW50KHN0ci5zdWJzdHIoZGVjaW1hbEluZGV4ICsgMSkpLmV4cDEwKFxyXG5cdFx0XHRcdFx0ZGVjaW1hbEluZGV4ICsgY29uZmlnLmNvaW5Vbml0UGxhY2VzIC0gc3RyLmxlbmd0aCArIDEsXHJcblx0XHRcdFx0KSxcclxuXHRcdFx0KTtcclxuXHR9O1xyXG5cclxuXHRyZXR1cm4gdGhpcztcclxufTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./libs/mymonero-app-js/local_modules/mymonero_core_js/cryptonote_utils/money_format_utils.js\n");

/***/ }),

/***/ "./libs/mymonero-app-js/local_modules/mymonero_core_js/cryptonote_utils/nettype.js":
/*!*****************************************************************************************!*\
  !*** ./libs/mymonero-app-js/local_modules/mymonero_core_js/cryptonote_utils/nettype.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright (c) 2014-2018, MyMonero.com\r\n//\r\n// All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without modification, are\r\n// permitted provided that the following conditions are met:\r\n//\r\n// 1. Redistributions of source code must retain the above copyright notice, this list of\r\n//\tconditions and the following disclaimer.\r\n//\r\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list\r\n//\tof conditions and the following disclaimer in the documentation and/or other\r\n//\tmaterials provided with the distribution.\r\n//\r\n// 3. Neither the name of the copyright holder nor the names of its contributors may be\r\n//\tused to endorse or promote products derived from this software without specific\r\n//\tprior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY\r\n// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\r\n// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\r\n// THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\r\n// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\r\n// THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n\r\n\r\n\r\nvar network_type = {\r\n\tMAINNET: 0,\r\n\tTESTNET: 1,\r\n\tSTAGENET: 2,\r\n\tFAKECHAIN: 3,\r\n\tUNDEFINED: 4\r\n};\r\nexports.network_type = network_type;\r\nexports.nettype_to_API_string = function(nettype)\r\n{\r\n\tswitch (nettype) {\r\n\t\tcase network_type.MAINNET:\r\n\t\t\treturn \"MAINNET\"\r\n\t\tcase network_type.TESTNET:\r\n\t\t\treturn \"TESTNET\"\r\n\t\tcase network_type.STAGENET:\r\n\t\t\treturn \"STAGENET\"\r\n\t\tcase network_type.FAKECHAIN:\r\n\t\t\treturn \"FAKECHAIN\"\r\n\t\tcase network_type.UNDEFINED:\r\n\t\t\treturn \"UNDEFINED\"\r\n\t}\r\n\tthrow \"Unrecognized nettype\"\r\n}\r\n//\r\nvar __MAINNET_CRYPTONOTE_PUBLIC_ADDRESS_BASE58_PREFIX = 18;\r\nvar __MAINNET_CRYPTONOTE_PUBLIC_INTEGRATED_ADDRESS_BASE58_PREFIX = 19;\r\nvar __MAINNET_CRYPTONOTE_PUBLIC_SUBADDRESS_BASE58_PREFIX = 42;\r\n//\r\nvar __TESTNET_CRYPTONOTE_PUBLIC_ADDRESS_BASE58_PREFIX = 53;\r\nvar __TESTNET_CRYPTONOTE_PUBLIC_INTEGRATED_ADDRESS_BASE58_PREFIX = 54;\r\nvar __TESTNET_CRYPTONOTE_PUBLIC_SUBADDRESS_BASE58_PREFIX = 63;\r\n//\r\nvar __STAGENET_CRYPTONOTE_PUBLIC_ADDRESS_BASE58_PREFIX = 24;\r\nvar __STAGENET_CRYPTONOTE_PUBLIC_INTEGRATED_ADDRESS_BASE58_PREFIX = 25;\r\nvar __STAGENET_CRYPTONOTE_PUBLIC_SUBADDRESS_BASE58_PREFIX = 36;\r\n//\r\nfunction cryptonoteBase58PrefixForStandardAddressOn(nettype) {\r\n\tif (nettype == null || typeof nettype === \"undefined\") {\r\n\t\tconsole.warn(\"Unexpected nil nettype\");\r\n\t}\r\n\tif (nettype == network_type.MAINNET) {\r\n\t\treturn __MAINNET_CRYPTONOTE_PUBLIC_ADDRESS_BASE58_PREFIX;\r\n\t} else if (nettype == network_type.TESTNET) {\r\n\t\treturn __TESTNET_CRYPTONOTE_PUBLIC_ADDRESS_BASE58_PREFIX;\r\n\t} else if (nettype == network_type.STAGENET) {\r\n\t\treturn __STAGENET_CRYPTONOTE_PUBLIC_ADDRESS_BASE58_PREFIX;\r\n\t}\r\n\tthrow \"Illegal nettype\";\r\n}\r\nfunction cryptonoteBase58PrefixForIntegratedAddressOn(nettype) {\r\n\tif (nettype == null || typeof nettype === \"undefined\") {\r\n\t\tconsole.warn(\"Unexpected nil nettype\");\r\n\t}\r\n\tif (nettype == network_type.MAINNET) {\r\n\t\treturn __MAINNET_CRYPTONOTE_PUBLIC_INTEGRATED_ADDRESS_BASE58_PREFIX;\r\n\t} else if (nettype == network_type.TESTNET) {\r\n\t\treturn __TESTNET_CRYPTONOTE_PUBLIC_INTEGRATED_ADDRESS_BASE58_PREFIX;\r\n\t} else if (nettype == network_type.STAGENET) {\r\n\t\treturn __STAGENET_CRYPTONOTE_PUBLIC_INTEGRATED_ADDRESS_BASE58_PREFIX;\r\n\t}\r\n\tthrow \"Illegal nettype\";\r\n}\r\nfunction cryptonoteBase58PrefixForSubAddressOn(nettype) {\r\n\tif (nettype == null || typeof nettype === \"undefined\") {\r\n\t\tconsole.warn(\"Unexpected nil nettype\");\r\n\t}\r\n\tif (nettype == network_type.MAINNET) {\r\n\t\treturn __MAINNET_CRYPTONOTE_PUBLIC_SUBADDRESS_BASE58_PREFIX;\r\n\t} else if (nettype == network_type.TESTNET) {\r\n\t\treturn __TESTNET_CRYPTONOTE_PUBLIC_SUBADDRESS_BASE58_PREFIX;\r\n\t} else if (nettype == network_type.STAGENET) {\r\n\t\treturn __STAGENET_CRYPTONOTE_PUBLIC_SUBADDRESS_BASE58_PREFIX;\r\n\t}\r\n\tthrow \"Illegal nettype\";\r\n}\r\n//\r\nexports.cryptonoteBase58PrefixForStandardAddressOn = cryptonoteBase58PrefixForStandardAddressOn;\r\nexports.cryptonoteBase58PrefixForIntegratedAddressOn = cryptonoteBase58PrefixForIntegratedAddressOn;\r\nexports.cryptonoteBase58PrefixForSubAddressOn = cryptonoteBase58PrefixForSubAddressOn;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9saWJzL215bW9uZXJvLWFwcC1qcy9sb2NhbF9tb2R1bGVzL215bW9uZXJvX2NvcmVfanMvY3J5cHRvbm90ZV91dGlscy9uZXR0eXBlLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbGlicy9teW1vbmVyby1hcHAtanMvbG9jYWxfbW9kdWxlcy9teW1vbmVyb19jb3JlX2pzL2NyeXB0b25vdGVfdXRpbHMvbmV0dHlwZS5qcz84NjI0Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAxNC0yMDE4LCBNeU1vbmVyby5jb21cclxuLy9cclxuLy8gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy9cclxuLy8gUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgYXJlXHJcbi8vIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxyXG4vL1xyXG4vLyAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgbGlzdCBvZlxyXG4vL1x0Y29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxyXG4vL1xyXG4vLyAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgbGlzdFxyXG4vL1x0b2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlclxyXG4vL1x0bWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cclxuLy9cclxuLy8gMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgY29weXJpZ2h0IGhvbGRlciBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlXHJcbi8vXHR1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljXHJcbi8vXHRwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXHJcbi8vXHJcbi8vIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORCBBTllcclxuLy8gRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GXHJcbi8vIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMXHJcbi8vIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLFxyXG4vLyBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sXHJcbi8vIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xyXG4vLyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCxcclxuLy8gU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GXHJcbi8vIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cclxuXHJcblwidXNlIHN0cmljdFwiO1xyXG5cclxudmFyIG5ldHdvcmtfdHlwZSA9IHtcclxuXHRNQUlOTkVUOiAwLFxyXG5cdFRFU1RORVQ6IDEsXHJcblx0U1RBR0VORVQ6IDIsXHJcblx0RkFLRUNIQUlOOiAzLFxyXG5cdFVOREVGSU5FRDogNFxyXG59O1xyXG5leHBvcnRzLm5ldHdvcmtfdHlwZSA9IG5ldHdvcmtfdHlwZTtcclxuZXhwb3J0cy5uZXR0eXBlX3RvX0FQSV9zdHJpbmcgPSBmdW5jdGlvbihuZXR0eXBlKVxyXG57XHJcblx0c3dpdGNoIChuZXR0eXBlKSB7XHJcblx0XHRjYXNlIG5ldHdvcmtfdHlwZS5NQUlOTkVUOlxyXG5cdFx0XHRyZXR1cm4gXCJNQUlOTkVUXCJcclxuXHRcdGNhc2UgbmV0d29ya190eXBlLlRFU1RORVQ6XHJcblx0XHRcdHJldHVybiBcIlRFU1RORVRcIlxyXG5cdFx0Y2FzZSBuZXR3b3JrX3R5cGUuU1RBR0VORVQ6XHJcblx0XHRcdHJldHVybiBcIlNUQUdFTkVUXCJcclxuXHRcdGNhc2UgbmV0d29ya190eXBlLkZBS0VDSEFJTjpcclxuXHRcdFx0cmV0dXJuIFwiRkFLRUNIQUlOXCJcclxuXHRcdGNhc2UgbmV0d29ya190eXBlLlVOREVGSU5FRDpcclxuXHRcdFx0cmV0dXJuIFwiVU5ERUZJTkVEXCJcclxuXHR9XHJcblx0dGhyb3cgXCJVbnJlY29nbml6ZWQgbmV0dHlwZVwiXHJcbn1cclxuLy9cclxudmFyIF9fTUFJTk5FVF9DUllQVE9OT1RFX1BVQkxJQ19BRERSRVNTX0JBU0U1OF9QUkVGSVggPSAxODtcclxudmFyIF9fTUFJTk5FVF9DUllQVE9OT1RFX1BVQkxJQ19JTlRFR1JBVEVEX0FERFJFU1NfQkFTRTU4X1BSRUZJWCA9IDE5O1xyXG52YXIgX19NQUlOTkVUX0NSWVBUT05PVEVfUFVCTElDX1NVQkFERFJFU1NfQkFTRTU4X1BSRUZJWCA9IDQyO1xyXG4vL1xyXG52YXIgX19URVNUTkVUX0NSWVBUT05PVEVfUFVCTElDX0FERFJFU1NfQkFTRTU4X1BSRUZJWCA9IDUzO1xyXG52YXIgX19URVNUTkVUX0NSWVBUT05PVEVfUFVCTElDX0lOVEVHUkFURURfQUREUkVTU19CQVNFNThfUFJFRklYID0gNTQ7XHJcbnZhciBfX1RFU1RORVRfQ1JZUFRPTk9URV9QVUJMSUNfU1VCQUREUkVTU19CQVNFNThfUFJFRklYID0gNjM7XHJcbi8vXHJcbnZhciBfX1NUQUdFTkVUX0NSWVBUT05PVEVfUFVCTElDX0FERFJFU1NfQkFTRTU4X1BSRUZJWCA9IDI0O1xyXG52YXIgX19TVEFHRU5FVF9DUllQVE9OT1RFX1BVQkxJQ19JTlRFR1JBVEVEX0FERFJFU1NfQkFTRTU4X1BSRUZJWCA9IDI1O1xyXG52YXIgX19TVEFHRU5FVF9DUllQVE9OT1RFX1BVQkxJQ19TVUJBRERSRVNTX0JBU0U1OF9QUkVGSVggPSAzNjtcclxuLy9cclxuZnVuY3Rpb24gY3J5cHRvbm90ZUJhc2U1OFByZWZpeEZvclN0YW5kYXJkQWRkcmVzc09uKG5ldHR5cGUpIHtcclxuXHRpZiAobmV0dHlwZSA9PSBudWxsIHx8IHR5cGVvZiBuZXR0eXBlID09PSBcInVuZGVmaW5lZFwiKSB7XHJcblx0XHRjb25zb2xlLndhcm4oXCJVbmV4cGVjdGVkIG5pbCBuZXR0eXBlXCIpO1xyXG5cdH1cclxuXHRpZiAobmV0dHlwZSA9PSBuZXR3b3JrX3R5cGUuTUFJTk5FVCkge1xyXG5cdFx0cmV0dXJuIF9fTUFJTk5FVF9DUllQVE9OT1RFX1BVQkxJQ19BRERSRVNTX0JBU0U1OF9QUkVGSVg7XHJcblx0fSBlbHNlIGlmIChuZXR0eXBlID09IG5ldHdvcmtfdHlwZS5URVNUTkVUKSB7XHJcblx0XHRyZXR1cm4gX19URVNUTkVUX0NSWVBUT05PVEVfUFVCTElDX0FERFJFU1NfQkFTRTU4X1BSRUZJWDtcclxuXHR9IGVsc2UgaWYgKG5ldHR5cGUgPT0gbmV0d29ya190eXBlLlNUQUdFTkVUKSB7XHJcblx0XHRyZXR1cm4gX19TVEFHRU5FVF9DUllQVE9OT1RFX1BVQkxJQ19BRERSRVNTX0JBU0U1OF9QUkVGSVg7XHJcblx0fVxyXG5cdHRocm93IFwiSWxsZWdhbCBuZXR0eXBlXCI7XHJcbn1cclxuZnVuY3Rpb24gY3J5cHRvbm90ZUJhc2U1OFByZWZpeEZvckludGVncmF0ZWRBZGRyZXNzT24obmV0dHlwZSkge1xyXG5cdGlmIChuZXR0eXBlID09IG51bGwgfHwgdHlwZW9mIG5ldHR5cGUgPT09IFwidW5kZWZpbmVkXCIpIHtcclxuXHRcdGNvbnNvbGUud2FybihcIlVuZXhwZWN0ZWQgbmlsIG5ldHR5cGVcIik7XHJcblx0fVxyXG5cdGlmIChuZXR0eXBlID09IG5ldHdvcmtfdHlwZS5NQUlOTkVUKSB7XHJcblx0XHRyZXR1cm4gX19NQUlOTkVUX0NSWVBUT05PVEVfUFVCTElDX0lOVEVHUkFURURfQUREUkVTU19CQVNFNThfUFJFRklYO1xyXG5cdH0gZWxzZSBpZiAobmV0dHlwZSA9PSBuZXR3b3JrX3R5cGUuVEVTVE5FVCkge1xyXG5cdFx0cmV0dXJuIF9fVEVTVE5FVF9DUllQVE9OT1RFX1BVQkxJQ19JTlRFR1JBVEVEX0FERFJFU1NfQkFTRTU4X1BSRUZJWDtcclxuXHR9IGVsc2UgaWYgKG5ldHR5cGUgPT0gbmV0d29ya190eXBlLlNUQUdFTkVUKSB7XHJcblx0XHRyZXR1cm4gX19TVEFHRU5FVF9DUllQVE9OT1RFX1BVQkxJQ19JTlRFR1JBVEVEX0FERFJFU1NfQkFTRTU4X1BSRUZJWDtcclxuXHR9XHJcblx0dGhyb3cgXCJJbGxlZ2FsIG5ldHR5cGVcIjtcclxufVxyXG5mdW5jdGlvbiBjcnlwdG9ub3RlQmFzZTU4UHJlZml4Rm9yU3ViQWRkcmVzc09uKG5ldHR5cGUpIHtcclxuXHRpZiAobmV0dHlwZSA9PSBudWxsIHx8IHR5cGVvZiBuZXR0eXBlID09PSBcInVuZGVmaW5lZFwiKSB7XHJcblx0XHRjb25zb2xlLndhcm4oXCJVbmV4cGVjdGVkIG5pbCBuZXR0eXBlXCIpO1xyXG5cdH1cclxuXHRpZiAobmV0dHlwZSA9PSBuZXR3b3JrX3R5cGUuTUFJTk5FVCkge1xyXG5cdFx0cmV0dXJuIF9fTUFJTk5FVF9DUllQVE9OT1RFX1BVQkxJQ19TVUJBRERSRVNTX0JBU0U1OF9QUkVGSVg7XHJcblx0fSBlbHNlIGlmIChuZXR0eXBlID09IG5ldHdvcmtfdHlwZS5URVNUTkVUKSB7XHJcblx0XHRyZXR1cm4gX19URVNUTkVUX0NSWVBUT05PVEVfUFVCTElDX1NVQkFERFJFU1NfQkFTRTU4X1BSRUZJWDtcclxuXHR9IGVsc2UgaWYgKG5ldHR5cGUgPT0gbmV0d29ya190eXBlLlNUQUdFTkVUKSB7XHJcblx0XHRyZXR1cm4gX19TVEFHRU5FVF9DUllQVE9OT1RFX1BVQkxJQ19TVUJBRERSRVNTX0JBU0U1OF9QUkVGSVg7XHJcblx0fVxyXG5cdHRocm93IFwiSWxsZWdhbCBuZXR0eXBlXCI7XHJcbn1cclxuLy9cclxuZXhwb3J0cy5jcnlwdG9ub3RlQmFzZTU4UHJlZml4Rm9yU3RhbmRhcmRBZGRyZXNzT24gPSBjcnlwdG9ub3RlQmFzZTU4UHJlZml4Rm9yU3RhbmRhcmRBZGRyZXNzT247XHJcbmV4cG9ydHMuY3J5cHRvbm90ZUJhc2U1OFByZWZpeEZvckludGVncmF0ZWRBZGRyZXNzT24gPSBjcnlwdG9ub3RlQmFzZTU4UHJlZml4Rm9ySW50ZWdyYXRlZEFkZHJlc3NPbjtcclxuZXhwb3J0cy5jcnlwdG9ub3RlQmFzZTU4UHJlZml4Rm9yU3ViQWRkcmVzc09uID0gY3J5cHRvbm90ZUJhc2U1OFByZWZpeEZvclN1YkFkZHJlc3NPbjtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./libs/mymonero-app-js/local_modules/mymonero_core_js/cryptonote_utils/nettype.js\n");

/***/ }),

/***/ "./libs/mymonero-app-js/local_modules/mymonero_core_js/hostAPI/net_service_utils.js":
/*!******************************************************************************************!*\
  !*** ./libs/mymonero-app-js/local_modules/mymonero_core_js/hostAPI/net_service_utils.js ***!
  \******************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright (c) 2014-2018, MyMonero.com\r\n//\r\n// All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without modification, are\r\n// permitted provided that the following conditions are met:\r\n//\r\n// 1. Redistributions of source code must retain the above copyright notice, this list of\r\n//\tconditions and the following disclaimer.\r\n//\r\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list\r\n//\tof conditions and the following disclaimer in the documentation and/or other\r\n//\tmaterials provided with the distribution.\r\n//\r\n// 3. Neither the name of the copyright holder nor the names of its contributors may be\r\n//\tused to endorse or promote products derived from this software without specific\r\n//\tprior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY\r\n// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\r\n// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\r\n// THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\r\n// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\r\n// THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n//\r\n\r\n//\r\nconst response_parser_utils = __webpack_require__(/*! ./response_parser_utils */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/hostAPI/response_parser_utils.js\");\r\nconst JSBigInt = __webpack_require__(/*! ../cryptonote_utils/biginteger */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/cryptonote_utils/biginteger.js\").BigInteger; // important: grab defined export\r\n//\r\nfunction New_ParametersForWalletRequest(address, view_key__private) {\r\n\treturn {\r\n\t\taddress: address,\r\n\t\tview_key: view_key__private,\r\n\t};\r\n}\r\nexports.New_ParametersForWalletRequest = New_ParametersForWalletRequest;\r\n//\r\nfunction AddUserAgentParamters(\r\n\tparameters,\r\n\tappUserAgent_product,\r\n\tappUserAgent_version,\r\n) {\r\n\t// setting these on params instead of as header field User-Agent so as to retain all info found in User-Agent, such as platform… and these are set so server has option to control delivery\r\n\tparameters[\"app_name\"] = appUserAgent_product;\r\n\tparameters[\"app_version\"] = appUserAgent_version;\r\n}\r\nexports.AddUserAgentParamters = AddUserAgentParamters;\r\n//\r\nfunction HTTPRequest(\r\n\trequest_conformant_module, // such as 'request' or 'xhr' .. TODO: consider switching to 'fetch'\r\n\tapiAddress_authority, // authority means [subdomain.]host.…[:…] with no trailing slash\r\n\tendpointPath,\r\n\tfinal_parameters,\r\n\tfn,\r\n) {\r\n\t// fn: (err?, data?) -> new Request\r\n\tif (typeof final_parameters == \"undefined\" || final_parameters == null) {\r\n\t\tthrow \"final_parameters must not be nil\";\r\n\t\t// return null\r\n\t}\r\n\tconst completeURL =\r\n\t\t_new_APIAddress_baseURLString(apiAddress_authority) + endpointPath;\r\n\tconsole.log(\"📡  \" + completeURL);\r\n\t//\r\n\tconst request_options = _new_requestOptions_base(\r\n\t\t\"POST\",\r\n\t\tcompleteURL,\r\n\t\tfinal_parameters,\r\n\t);\r\n\tconst requestHandle = request_conformant_module(request_options, function(\r\n\t\terr_orProgressEvent,\r\n\t\tres,\r\n\t\tbody,\r\n\t) {\r\n\t\t_new_HTTPRequestHandlerFunctionCallingFn(fn)(\r\n\t\t\t// <- called manually instead of directly passed to request_conformant_module call to enable passing completeURL\r\n\t\t\tcompleteURL,\r\n\t\t\terr_orProgressEvent,\r\n\t\t\tres,\r\n\t\t\tbody,\r\n\t\t);\r\n\t});\r\n\t//\r\n\treturn requestHandle;\r\n}\r\nexports.HTTPRequest = HTTPRequest;\r\n//\r\nfunction _new_APIAddress_baseURLString(\r\n\tapiAddress_authority, // authority means [subdomain.]host.…[:…]\r\n) {\r\n\treturn \"https\" + \"://\" + apiAddress_authority + \"/\";\r\n}\r\nfunction _new_requestOptions_base(methodName, completeURL, json_parameters) {\r\n\treturn {\r\n\t\tmethod: methodName,\r\n\t\turl: completeURL,\r\n\t\theaders: {\r\n\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\tAccept: \"application/json\",\r\n\t\t},\r\n\t\tjson: json_parameters,\r\n\t\tuseXDR: true, // CORS\r\n\t\twithCredentials: true, // CORS\r\n\t};\r\n}\r\nfunction _new_HTTPRequestHandlerFunctionCallingFn(fn) {\r\n\treturn function(completeURL, err_orProgressEvent, res, body) {\r\n\t\t// err appears to actually be a ProgressEvent\r\n\t\tvar err = null;\r\n\t\tconst statusCode = typeof res !== \"undefined\" ? res.statusCode : -1;\r\n\t\tif (statusCode == 0 || statusCode == -1) {\r\n\t\t\t// we'll treat 0 as a lack of internet connection.. unless there's a better way to make use of err_orProgressEvent which is apparently going to be typeof ProgressEvent here\r\n\t\t\terr = new Error(\"Connection Failure\");\r\n\t\t} else if (statusCode !== 200) {\r\n\t\t\tconst body_Error =\r\n\t\t\t\tbody && typeof body == \"object\" ? body.Error : undefined;\r\n\t\t\tconst statusMessage =\r\n\t\t\t\tres && res.statusMessage ? res.statusMessage : undefined;\r\n\t\t\tif (typeof body_Error !== \"undefined\" && body_Error) {\r\n\t\t\t\terr = new Error(body_Error);\r\n\t\t\t} else if (typeof statusMessage !== \"undefined\" && statusMessage) {\r\n\t\t\t\terr = new Error(statusMessage);\r\n\t\t\t} else {\r\n\t\t\t\terr = new Error(\"Unknown \" + statusCode + \" error\");\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (err) {\r\n\t\t\tconsole.error(\"❌  \" + err);\r\n\t\t\t// console.error(\"Body:\", body)\r\n\t\t\tfn(err, null);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar json;\r\n\t\tif (typeof body === \"string\") {\r\n\t\t\ttry {\r\n\t\t\t\tjson = JSON.parse(body);\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconsole.error(\r\n\t\t\t\t\t\"❌  HostedMoneroAPIClient Error: Unable to parse json with exception:\",\r\n\t\t\t\t\te,\r\n\t\t\t\t\t\"\\nbody:\",\r\n\t\t\t\t\tbody,\r\n\t\t\t\t);\r\n\t\t\t\tfn(e, null);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tjson = body;\r\n\t\t}\r\n\t\tconsole.log(\"✅  \" + completeURL + \" \" + statusCode);\r\n\t\tfn(null, json);\r\n\t};\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./libs/mymonero-app-js/local_modules/mymonero_core_js/hostAPI/net_service_utils.js\n");

/***/ }),

/***/ "./libs/mymonero-app-js/local_modules/mymonero_core_js/hostAPI/response_parser_utils.js":
/*!**********************************************************************************************!*\
  !*** ./libs/mymonero-app-js/local_modules/mymonero_core_js/hostAPI/response_parser_utils.js ***!
  \**********************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright (c) 2014-2018, MyMonero.com\r\n//\r\n// All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without modification, are\r\n// permitted provided that the following conditions are met:\r\n//\r\n// 1. Redistributions of source code must retain the above copyright notice, this list of\r\n//\tconditions and the following disclaimer.\r\n//\r\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list\r\n//\tof conditions and the following disclaimer in the documentation and/or other\r\n//\tmaterials provided with the distribution.\r\n//\r\n// 3. Neither the name of the copyright holder nor the names of its contributors may be\r\n//\tused to endorse or promote products derived from this software without specific\r\n//\tprior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY\r\n// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\r\n// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\r\n// THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\r\n// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\r\n// THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n//\r\n\r\n//\r\nconst JSBigInt = __webpack_require__(/*! ../cryptonote_utils/biginteger */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/cryptonote_utils/biginteger.js\").BigInteger;\r\nconst monero_amount_format_utils = __webpack_require__(/*! ../monero_utils/monero_amount_format_utils */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_amount_format_utils.js\");\r\nconst monero_keyImage_cache_utils = __webpack_require__(/*! ../monero_utils/monero_keyImage_cache_utils */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_keyImage_cache_utils.js\");\r\n//\r\nfunction Parsed_AddressInfo__sync(\r\n\tkeyImage_cache,\r\n\tdata,\r\n\taddress,\r\n\tview_key__private,\r\n\tspend_key__public,\r\n\tspend_key__private,\r\n\tmonero_utils,\r\n) {\r\n\t// -> returnValuesByKey\r\n\tconst total_received = new JSBigInt(data.total_received || 0);\r\n\tconst locked_balance = new JSBigInt(data.locked_funds || 0);\r\n\tvar total_sent = new JSBigInt(data.total_sent || 0); // will be modified in place\r\n\t//\r\n\tconst account_scanned_tx_height = data.scanned_height || 0;\r\n\tconst account_scanned_block_height = data.scanned_block_height || 0;\r\n\tconst account_scan_start_height = data.start_height || 0;\r\n\tconst transaction_height = data.transaction_height || 0;\r\n\tconst blockchain_height = data.blockchain_height || 0;\r\n\tconst spent_outputs = data.spent_outputs || [];\r\n\t//\r\n\tfor (let spent_output of spent_outputs) {\r\n\t\tvar key_image = monero_keyImage_cache_utils.Lazy_KeyImage(\r\n\t\t\tkeyImage_cache,\r\n\t\t\tspent_output.tx_pub_key,\r\n\t\t\tspent_output.out_index,\r\n\t\t\taddress,\r\n\t\t\tview_key__private,\r\n\t\t\tspend_key__public,\r\n\t\t\tspend_key__private,\r\n\t\t\tmonero_utils,\r\n\t\t);\r\n\t\tif (spent_output.key_image !== key_image) {\r\n\t\t\t// console.log('💬  Output used as mixin (' + spent_output.key_image + '/' + key_image + ')')\r\n\t\t\ttotal_sent = new JSBigInt(total_sent).subtract(spent_output.amount);\r\n\t\t}\r\n\t}\r\n\t//\r\n\tconst ratesBySymbol = data.rates || {}; // jic it's not there\r\n\t//\r\n\tconst returnValuesByKey = {\r\n\t\ttotal_received_String: total_received\r\n\t\t\t? total_received.toString()\r\n\t\t\t: null,\r\n\t\tlocked_balance_String: locked_balance\r\n\t\t\t? locked_balance.toString()\r\n\t\t\t: null,\r\n\t\ttotal_sent_String: total_sent ? total_sent.toString() : null,\r\n\t\t// ^serialized JSBigInt\r\n\t\tspent_outputs: spent_outputs,\r\n\t\taccount_scanned_tx_height: account_scanned_tx_height,\r\n\t\taccount_scanned_block_height: account_scanned_block_height,\r\n\t\taccount_scan_start_height: account_scan_start_height,\r\n\t\ttransaction_height: transaction_height,\r\n\t\tblockchain_height: blockchain_height,\r\n\t\t//\r\n\t\tratesBySymbol: ratesBySymbol,\r\n\t};\r\n\treturn returnValuesByKey;\r\n}\r\nfunction Parsed_AddressInfo__sync__keyImageManaged(\r\n\tdata,\r\n\taddress,\r\n\tview_key__private,\r\n\tspend_key__public,\r\n\tspend_key__private,\r\n\tmonero_utils,\r\n) {\r\n\t// -> returnValuesByKey\r\n\tconst keyImageCache = monero_keyImage_cache_utils.Lazy_KeyImageCacheForWalletWith(\r\n\t\taddress,\r\n\t);\r\n\treturn Parsed_AddressInfo__sync(\r\n\t\tkeyImageCache,\r\n\t\tdata,\r\n\t\taddress,\r\n\t\tview_key__private,\r\n\t\tspend_key__public,\r\n\t\tspend_key__private,\r\n\t\tmonero_utils,\r\n\t);\r\n}\r\nfunction Parsed_AddressInfo(\r\n\tkeyImage_cache,\r\n\tdata,\r\n\taddress,\r\n\tview_key__private,\r\n\tspend_key__public,\r\n\tspend_key__private,\r\n\tmonero_utils,\r\n\tfn, // (err?, returnValuesByKey) -> Void\r\n) {\r\n\tconst returnValuesByKey = Parsed_AddressInfo__sync(\r\n\t\tkeyImage_cache,\r\n\t\tdata,\r\n\t\taddress,\r\n\t\tview_key__private,\r\n\t\tspend_key__public,\r\n\t\tspend_key__private,\r\n\t\tmonero_utils,\r\n\t);\r\n\tfn(null, returnValuesByKey);\r\n}\r\nfunction Parsed_AddressInfo__keyImageManaged(\r\n\tdata,\r\n\taddress,\r\n\tview_key__private,\r\n\tspend_key__public,\r\n\tspend_key__private,\r\n\tmonero_utils,\r\n\tfn,\r\n) {\r\n\t// -> returnValuesByKey\r\n\tParsed_AddressInfo(\r\n\t\tmonero_keyImage_cache_utils.Lazy_KeyImageCacheForWalletWith(address),\r\n\t\tdata,\r\n\t\taddress,\r\n\t\tview_key__private,\r\n\t\tspend_key__public,\r\n\t\tspend_key__private,\r\n\t\tmonero_utils,\r\n\t\tfn,\r\n\t);\r\n}\r\nexports.Parsed_AddressInfo = Parsed_AddressInfo;\r\nexports.Parsed_AddressInfo__keyImageManaged = Parsed_AddressInfo__keyImageManaged; // in case you can't send a mutable key image cache dictionary\r\nexports.Parsed_AddressInfo__sync__keyImageManaged = Parsed_AddressInfo__sync__keyImageManaged; // in case you can't send a mutable key image cache dictionary\r\nexports.Parsed_AddressInfo__sync = Parsed_AddressInfo__sync;\r\n//\r\nfunction Parsed_AddressTransactions(\r\n\tkeyImage_cache,\r\n\tdata,\r\n\taddress,\r\n\tview_key__private,\r\n\tspend_key__public,\r\n\tspend_key__private,\r\n\tmonero_utils,\r\n\tfn, // (err?, returnValuesByKey) -> Void\r\n) {\r\n\tconst returnValuesByKey = Parsed_AddressTransactions__sync(\r\n\t\tkeyImage_cache,\r\n\t\tdata,\r\n\t\taddress,\r\n\t\tview_key__private,\r\n\t\tspend_key__public,\r\n\t\tspend_key__private,\r\n\t\tmonero_utils,\r\n\t);\r\n\tfn(null, returnValuesByKey);\r\n}\r\nfunction Parsed_AddressTransactions__sync(\r\n\tkeyImage_cache,\r\n\tdata,\r\n\taddress,\r\n\tview_key__private,\r\n\tspend_key__public,\r\n\tspend_key__private,\r\n\tmonero_utils,\r\n) {\r\n\tconst account_scanned_height = data.scanned_height || 0;\r\n\tconst account_scanned_block_height = data.scanned_block_height || 0;\r\n\tconst account_scan_start_height = data.start_height || 0;\r\n\tconst transaction_height = data.transaction_height || 0;\r\n\tconst blockchain_height = data.blockchain_height || 0;\r\n\t//\r\n\tconst transactions = data.transactions || [];\r\n\t//\r\n\t// TODO: rewrite this with more clarity if possible\r\n\tfor (let i = 0; i < transactions.length; ++i) {\r\n\t\tif ((transactions[i].spent_outputs || []).length > 0) {\r\n\t\t\tfor (var j = 0; j < transactions[i].spent_outputs.length; ++j) {\r\n\t\t\t\tvar key_image = monero_keyImage_cache_utils.Lazy_KeyImage(\r\n\t\t\t\t\tkeyImage_cache,\r\n\t\t\t\t\ttransactions[i].spent_outputs[j].tx_pub_key,\r\n\t\t\t\t\ttransactions[i].spent_outputs[j].out_index,\r\n\t\t\t\t\taddress,\r\n\t\t\t\t\tview_key__private,\r\n\t\t\t\t\tspend_key__public,\r\n\t\t\t\t\tspend_key__private,\r\n\t\t\t\t\tmonero_utils,\r\n\t\t\t\t);\r\n\t\t\t\tif (transactions[i].spent_outputs[j].key_image !== key_image) {\r\n\t\t\t\t\t// console.log('Output used as mixin, ignoring (' + transactions[i].spent_outputs[j].key_image + '/' + key_image + ')')\r\n\t\t\t\t\ttransactions[i].total_sent = new JSBigInt(\r\n\t\t\t\t\t\ttransactions[i].total_sent,\r\n\t\t\t\t\t)\r\n\t\t\t\t\t\t.subtract(transactions[i].spent_outputs[j].amount)\r\n\t\t\t\t\t\t.toString();\r\n\t\t\t\t\ttransactions[i].spent_outputs.splice(j, 1);\r\n\t\t\t\t\tj--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (\r\n\t\t\tnew JSBigInt(transactions[i].total_received || 0)\r\n\t\t\t\t.add(transactions[i].total_sent || 0)\r\n\t\t\t\t.compare(0) <= 0\r\n\t\t) {\r\n\t\t\ttransactions.splice(i, 1);\r\n\t\t\ti--;\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\ttransactions[i].amount = new JSBigInt(\r\n\t\t\ttransactions[i].total_received || 0,\r\n\t\t)\r\n\t\t\t.subtract(transactions[i].total_sent || 0)\r\n\t\t\t.toString();\r\n\t\ttransactions[i].approx_float_amount = parseFloat(\r\n\t\t\tmonero_amount_format_utils.formatMoney(transactions[i].amount),\r\n\t\t);\r\n\t\ttransactions[i].timestamp = transactions[i].timestamp;\r\n\t\tconst record__payment_id = transactions[i].payment_id;\r\n\t\tif (typeof record__payment_id !== \"undefined\" && record__payment_id) {\r\n\t\t\tif (record__payment_id.length == 16) {\r\n\t\t\t\t// short (encrypted) pid\r\n\t\t\t\tif (transactions[i].approx_float_amount < 0) {\r\n\t\t\t\t\t// outgoing\r\n\t\t\t\t\tdelete transactions[i][\"payment_id\"]; // need to filter these out .. because the server can't filter out short (encrypted) pids on outgoing txs\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\ttransactions.sort(function(a, b) {\r\n\t\tif (a.mempool == true) {\r\n\t\t\tif (b.mempool != true) {\r\n\t\t\t\treturn -1; // a first\r\n\t\t\t}\r\n\t\t\t// both mempool - fall back to .id compare\r\n\t\t} else if (b.mempool == true) {\r\n\t\t\treturn 1; // b first\r\n\t\t}\r\n\t\treturn b.id - a.id;\r\n\t});\r\n\t// prepare transactions to be serialized\r\n\tfor (let transaction of transactions) {\r\n\t\ttransaction.amount = transaction.amount.toString(); // JSBigInt -> String\r\n\t\tif (\r\n\t\t\ttypeof transaction.total_sent !== \"undefined\" &&\r\n\t\t\ttransaction.total_sent !== null\r\n\t\t) {\r\n\t\t\ttransaction.total_sent = transaction.total_sent.toString();\r\n\t\t}\r\n\t}\r\n\t// on the other side, we convert transactions timestamp to Date obj\r\n\tconst returnValuesByKey = {\r\n\t\taccount_scanned_height: account_scanned_height,\r\n\t\taccount_scanned_block_height: account_scanned_block_height,\r\n\t\taccount_scan_start_height: account_scan_start_height,\r\n\t\ttransaction_height: transaction_height,\r\n\t\tblockchain_height: blockchain_height,\r\n\t\tserialized_transactions: transactions,\r\n\t};\r\n\treturn returnValuesByKey;\r\n}\r\nfunction Parsed_AddressTransactions__sync__keyImageManaged(\r\n\tdata,\r\n\taddress,\r\n\tview_key__private,\r\n\tspend_key__public,\r\n\tspend_key__private,\r\n\tmonero_utils,\r\n) {\r\n\tconst keyImageCache = monero_keyImage_cache_utils.Lazy_KeyImageCacheForWalletWith(\r\n\t\taddress,\r\n\t);\r\n\treturn Parsed_AddressTransactions__sync(\r\n\t\tkeyImageCache,\r\n\t\tdata,\r\n\t\taddress,\r\n\t\tview_key__private,\r\n\t\tspend_key__public,\r\n\t\tspend_key__private,\r\n\t\tmonero_utils,\r\n\t);\r\n}\r\nfunction Parsed_AddressTransactions__keyImageManaged(\r\n\tdata,\r\n\taddress,\r\n\tview_key__private,\r\n\tspend_key__public,\r\n\tspend_key__private,\r\n\tmonero_utils,\r\n\tfn,\r\n) {\r\n\tParsed_AddressTransactions(\r\n\t\tmonero_keyImage_cache_utils.Lazy_KeyImageCacheForWalletWith(address),\r\n\t\tdata,\r\n\t\taddress,\r\n\t\tview_key__private,\r\n\t\tspend_key__public,\r\n\t\tspend_key__private,\r\n\t\tmonero_utils,\r\n\t\tfn,\r\n\t);\r\n}\r\nexports.Parsed_AddressTransactions = Parsed_AddressTransactions;\r\nexports.Parsed_AddressTransactions__keyImageManaged = Parsed_AddressTransactions__keyImageManaged;\r\nexports.Parsed_AddressTransactions__sync = Parsed_AddressTransactions__sync;\r\nexports.Parsed_AddressTransactions__sync__keyImageManaged = Parsed_AddressTransactions__sync__keyImageManaged;\r\n//\r\nfunction Parsed_UnspentOuts(\r\n\tkeyImage_cache,\r\n\tdata,\r\n\taddress,\r\n\tview_key__private,\r\n\tspend_key__public,\r\n\tspend_key__private,\r\n\tmonero_utils,\r\n\tfn, // (err?, returnValuesByKey)\r\n) {\r\n\tconst returnValuesByKey = Parsed_UnspentOuts__sync(\r\n\t\tkeyImage_cache,\r\n\t\tdata,\r\n\t\taddress,\r\n\t\tview_key__private,\r\n\t\tspend_key__public,\r\n\t\tspend_key__private,\r\n\t\tmonero_utils,\r\n\t);\r\n\tfn(null, returnValuesByKey);\r\n}\r\nfunction Parsed_UnspentOuts__sync(\r\n\tkeyImage_cache,\r\n\tdata,\r\n\taddress,\r\n\tview_key__private,\r\n\tspend_key__public,\r\n\tspend_key__private,\r\n\tmonero_utils\r\n) {\r\n\tconst data_outputs = data.outputs;\r\n\tconst finalized_unspentOutputs = data.outputs || []; // to finalize:\r\n\tfor (var i = 0; i < finalized_unspentOutputs.length; i++) {\r\n\t\tconst unspent_output = finalized_unspentOutputs[i];\r\n\t\tif (\r\n\t\t\tunspent_output === null ||\r\n\t\t\ttypeof unspent_output === \"undefined\" ||\r\n\t\t\t!unspent_output // just preserving what was in the original code\r\n\t\t) {\r\n\t\t\tthrow \"unspent_output at index \" + i + \" was null\";\r\n\t\t}\r\n\t\tconst spend_key_images = unspent_output.spend_key_images;\r\n\t\tif (\r\n\t\t\tspend_key_images === null ||\r\n\t\t\ttypeof spend_key_images === \"undefined\"\r\n\t\t) {\r\n\t\t\tthrow \"spend_key_images of unspent_output at index \" +\r\n\t\t\t\ti +\r\n\t\t\t\t\" was null\";\r\n\t\t}\r\n\t\tfor (var j = 0; j < spend_key_images.length; j++) {\r\n\t\t\tconst finalized_unspentOutput_atI_beforeSplice =\r\n\t\t\t\tfinalized_unspentOutputs[i];\r\n\t\t\tif (\r\n\t\t\t\t!finalized_unspentOutput_atI_beforeSplice ||\r\n\t\t\t\ttypeof finalized_unspentOutput_atI_beforeSplice === \"undefined\"\r\n\t\t\t) {\r\n\t\t\t\t// console.warn(\r\n\t\t\t\t// \t`This unspent output at i ${i} was literally undefined! Skipping.`,\r\n\t\t\t\t// ); // NOTE: Looks like the i-- code below should exit earlier if this is necessary\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tconst beforeSplice__tx_pub_key =\r\n\t\t\t\tfinalized_unspentOutput_atI_beforeSplice.tx_pub_key;\r\n\t\t\tconst beforeSplice__index =\r\n\t\t\t\tfinalized_unspentOutput_atI_beforeSplice.index;\r\n\t\t\tif (\r\n\t\t\t\ttypeof beforeSplice__tx_pub_key === \"undefined\" ||\r\n\t\t\t\t!beforeSplice__tx_pub_key\r\n\t\t\t) {\r\n\t\t\t\tconsole.warn(\r\n\t\t\t\t\t\"This unspent out was missing a tx_pub_key! Skipping.\",\r\n\t\t\t\t\tfinalized_unspentOutput_atI_beforeSplice,\r\n\t\t\t\t);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tvar key_image = monero_keyImage_cache_utils.Lazy_KeyImage(\r\n\t\t\t\tkeyImage_cache,\r\n\t\t\t\tbeforeSplice__tx_pub_key,\r\n\t\t\t\tbeforeSplice__index,\r\n\t\t\t\taddress,\r\n\t\t\t\tview_key__private,\r\n\t\t\t\tspend_key__public,\r\n\t\t\t\tspend_key__private,\r\n\t\t\t\tmonero_utils\r\n\t\t\t);\r\n\t\t\tif (\r\n\t\t\t\tkey_image ===\r\n\t\t\t\tfinalized_unspentOutput_atI_beforeSplice.spend_key_images[j]\r\n\t\t\t) {\r\n\t\t\t\t// console.log(\"💬  Output was spent; key image: \" + key_image + \" amount: \" + monero_amount_format_utils.formatMoneyFull(finalized_unspentOutputs[i].amount));\r\n\t\t\t\t// Remove output from list\r\n\t\t\t\tfinalized_unspentOutputs.splice(i, 1);\r\n\t\t\t\tconst finalized_unspentOutput_atI_afterSplice =\r\n\t\t\t\t\tfinalized_unspentOutputs[i];\r\n\t\t\t\tif (finalized_unspentOutput_atI_afterSplice) {\r\n\t\t\t\t\tj =\r\n\t\t\t\t\t\tfinalized_unspentOutput_atI_afterSplice.spend_key_images\r\n\t\t\t\t\t\t\t.length;\r\n\t\t\t\t}\r\n\t\t\t\ti--;\r\n\t\t\t} else {\r\n\t\t\t\t// console.log(\r\n\t\t\t\t// \t\"💬  Output used as mixin (\" +\r\n\t\t\t\t// \t\tkey_image +\r\n\t\t\t\t// \t\t\"/\" +\r\n\t\t\t\t// \t\tfinalized_unspentOutputs[i].spend_key_images[j] +\r\n\t\t\t\t// \t\t\")\",\r\n\t\t\t\t// );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t// console.log(\"Unspent outs: \" + JSON.stringify(finalized_unspentOutputs));\r\n\tvar final__per_byte_fee__string;\r\n\tif (typeof data.per_byte_fee !== 'undefined' && data.per_byte_fee) {\r\n\t\tfinal__per_byte_fee__string = data.per_byte_fee // (is already string)\r\n\t} else { // per_byte_fee not yet deployed - fall back to per_kb_fee\r\n\t\tif (typeof data.per_kb_fee == 'undefined' || !data.per_kb_fee) {\r\n\t\t\tthrow \"Expected data.per_kb_fee or data.per_byte_fee\"\r\n\t\t}\r\n\t\tfinal__per_byte_fee__string = (new JSBigInt(data.per_kb_fee)).divide(1024).toString() // scale from kib to b and convert back to string\r\n\t}\r\n\tif (typeof final__per_byte_fee__string == 'undefined' || !final__per_byte_fee__string) {\r\n\t\tthrow \"Unable to derive per_byte_fee string\"\r\n\t}\r\n\tconst returnValuesByKey = {\r\n\t\tunspentOutputs: finalized_unspentOutputs,\r\n\t\tper_byte_fee__string: final__per_byte_fee__string, // String\r\n\t};\r\n\treturn returnValuesByKey;\r\n}\r\nfunction Parsed_UnspentOuts__sync__keyImageManaged(\r\n\tdata,\r\n\taddress,\r\n\tview_key__private,\r\n\tspend_key__public,\r\n\tspend_key__private,\r\n\tmonero_utils,\r\n) {\r\n\tconst keyImageCache = monero_keyImage_cache_utils.Lazy_KeyImageCacheForWalletWith(\r\n\t\taddress,\r\n\t);\r\n\treturn Parsed_UnspentOuts__sync(\r\n\t\tkeyImageCache,\r\n\t\tdata,\r\n\t\taddress,\r\n\t\tview_key__private,\r\n\t\tspend_key__public,\r\n\t\tspend_key__private,\r\n\t\tmonero_utils,\r\n\t);\r\n}\r\nfunction Parsed_UnspentOuts__keyImageManaged(\r\n\tdata,\r\n\taddress,\r\n\tview_key__private,\r\n\tspend_key__public,\r\n\tspend_key__private,\r\n\tmonero_utils,\r\n\tfn,\r\n) {\r\n\tParsed_UnspentOuts(\r\n\t\tmonero_keyImage_cache_utils.Lazy_KeyImageCacheForWalletWith(address),\r\n\t\tdata,\r\n\t\taddress,\r\n\t\tview_key__private,\r\n\t\tspend_key__public,\r\n\t\tspend_key__private,\r\n\t\tmonero_utils,\r\n\t\tfn,\r\n\t);\r\n}\r\nexports.Parsed_UnspentOuts = Parsed_UnspentOuts;\r\nexports.Parsed_UnspentOuts__keyImageManaged = Parsed_UnspentOuts__keyImageManaged;\r\nexports.Parsed_UnspentOuts__sync = Parsed_UnspentOuts__sync;\r\nexports.Parsed_UnspentOuts__sync__keyImageManaged = Parsed_UnspentOuts__sync__keyImageManaged;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./libs/mymonero-app-js/local_modules/mymonero_core_js/hostAPI/response_parser_utils.js\n");

/***/ }),

/***/ "./libs/mymonero-app-js/local_modules/mymonero_core_js/index.js":
/*!**********************************************************************!*\
  !*** ./libs/mymonero-app-js/local_modules/mymonero_core_js/index.js ***!
  \**********************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright (c) 2014-2018, MyMonero.com\r\n//\r\n// All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without modification, are\r\n// permitted provided that the following conditions are met:\r\n//\r\n// 1. Redistributions of source code must retain the above copyright notice, this list of\r\n//\tconditions and the following disclaimer.\r\n//\r\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list\r\n//\tof conditions and the following disclaimer in the documentation and/or other\r\n//\tmaterials provided with the distribution.\r\n//\r\n// 3. Neither the name of the copyright holder nor the names of its contributors may be\r\n//\tused to endorse or promote products derived from this software without specific\r\n//\tprior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY\r\n// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\r\n// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\r\n// THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\r\n// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\r\n// THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n//\r\n\r\n//\r\n// NOTE: The main downside to using an index.js file like this is that it will pull in all the code - rather than the consumer requiring code module-by-module\r\n// It's of course possible to construct your own stripped-down index.[custom name].js file for, e.g., special webpack bundling usages.\r\nconst mymonero_core_js = {};\r\nmymonero_core_js.monero_utils_promise = __webpack_require__(/*! ./monero_utils/monero_utils */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_utils.js\")(); // NOTE: This is actually a promise. Call .then(function(monero_utils) { }) to actually use\r\nmymonero_core_js.monero_config = __webpack_require__(/*! ./monero_utils/monero_config */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_config.js\");\r\nmymonero_core_js.monero_txParsing_utils = __webpack_require__(/*! ./monero_utils/monero_txParsing_utils */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_txParsing_utils.js\");\r\nmymonero_core_js.monero_sendingFunds_utils = __webpack_require__(/*! ./monero_utils/monero_sendingFunds_utils */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_sendingFunds_utils.js\");\r\nmymonero_core_js.monero_requestURI_utils = __webpack_require__(/*! ./monero_utils/monero_requestURI_utils */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_requestURI_utils.js\");\r\nmymonero_core_js.monero_keyImage_cache_utils = __webpack_require__(/*! ./monero_utils/monero_keyImage_cache_utils */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_keyImage_cache_utils.js\");\r\nmymonero_core_js.monero_paymentID_utils = __webpack_require__(/*! ./monero_utils/monero_paymentID_utils */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_paymentID_utils.js\");\r\nmymonero_core_js.monero_amount_format_utils = __webpack_require__(/*! ./monero_utils/monero_amount_format_utils */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_amount_format_utils.js\");\r\nmymonero_core_js.api_response_parser_utils = __webpack_require__(/*! ./hostAPI/response_parser_utils */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/hostAPI/response_parser_utils.js\");\r\n//\r\nmymonero_core_js.nettype_utils = __webpack_require__(/*! ./cryptonote_utils/nettype */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/cryptonote_utils/nettype.js\");\r\nmymonero_core_js.JSBigInt = __webpack_require__(/*! ./cryptonote_utils/biginteger */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/cryptonote_utils/biginteger.js\").BigInteger; // so that it is available to a hypothetical consumer's language-bridging web context for constructing string arguments to the above modules\r\n//\r\nmodule.exports = mymonero_core_js;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9saWJzL215bW9uZXJvLWFwcC1qcy9sb2NhbF9tb2R1bGVzL215bW9uZXJvX2NvcmVfanMvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9saWJzL215bW9uZXJvLWFwcC1qcy9sb2NhbF9tb2R1bGVzL215bW9uZXJvX2NvcmVfanMvaW5kZXguanM/ZWYyMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTQtMjAxOCwgTXlNb25lcm8uY29tXHJcbi8vXHJcbi8vIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vXHJcbi8vIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIGFyZVxyXG4vLyBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcclxuLy9cclxuLy8gMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3Qgb2ZcclxuLy9cdGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cclxuLy9cclxuLy8gMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3RcclxuLy9cdG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXJcclxuLy9cdG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXHJcbi8vXHJcbi8vIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIGNvcHlyaWdodCBob2xkZXIgbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZVxyXG4vL1x0dXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpY1xyXG4vL1x0cHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxyXG4vL1xyXG4vLyBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkQgQU5ZXHJcbi8vIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRlxyXG4vLyBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTFxyXG4vLyBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCxcclxuLy8gU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLFxyXG4vLyBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcclxuLy8gSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsXHJcbi8vIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRlxyXG4vLyBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXHJcbi8vXHJcblwidXNlIHN0cmljdFwiO1xyXG4vL1xyXG4vLyBOT1RFOiBUaGUgbWFpbiBkb3duc2lkZSB0byB1c2luZyBhbiBpbmRleC5qcyBmaWxlIGxpa2UgdGhpcyBpcyB0aGF0IGl0IHdpbGwgcHVsbCBpbiBhbGwgdGhlIGNvZGUgLSByYXRoZXIgdGhhbiB0aGUgY29uc3VtZXIgcmVxdWlyaW5nIGNvZGUgbW9kdWxlLWJ5LW1vZHVsZVxyXG4vLyBJdCdzIG9mIGNvdXJzZSBwb3NzaWJsZSB0byBjb25zdHJ1Y3QgeW91ciBvd24gc3RyaXBwZWQtZG93biBpbmRleC5bY3VzdG9tIG5hbWVdLmpzIGZpbGUgZm9yLCBlLmcuLCBzcGVjaWFsIHdlYnBhY2sgYnVuZGxpbmcgdXNhZ2VzLlxyXG5jb25zdCBteW1vbmVyb19jb3JlX2pzID0ge307XHJcbm15bW9uZXJvX2NvcmVfanMubW9uZXJvX3V0aWxzX3Byb21pc2UgPSByZXF1aXJlKFwiLi9tb25lcm9fdXRpbHMvbW9uZXJvX3V0aWxzXCIpKCk7IC8vIE5PVEU6IFRoaXMgaXMgYWN0dWFsbHkgYSBwcm9taXNlLiBDYWxsIC50aGVuKGZ1bmN0aW9uKG1vbmVyb191dGlscykgeyB9KSB0byBhY3R1YWxseSB1c2VcclxubXltb25lcm9fY29yZV9qcy5tb25lcm9fY29uZmlnID0gcmVxdWlyZShcIi4vbW9uZXJvX3V0aWxzL21vbmVyb19jb25maWdcIik7XHJcbm15bW9uZXJvX2NvcmVfanMubW9uZXJvX3R4UGFyc2luZ191dGlscyA9IHJlcXVpcmUoXCIuL21vbmVyb191dGlscy9tb25lcm9fdHhQYXJzaW5nX3V0aWxzXCIpO1xyXG5teW1vbmVyb19jb3JlX2pzLm1vbmVyb19zZW5kaW5nRnVuZHNfdXRpbHMgPSByZXF1aXJlKFwiLi9tb25lcm9fdXRpbHMvbW9uZXJvX3NlbmRpbmdGdW5kc191dGlsc1wiKTtcclxubXltb25lcm9fY29yZV9qcy5tb25lcm9fcmVxdWVzdFVSSV91dGlscyA9IHJlcXVpcmUoXCIuL21vbmVyb191dGlscy9tb25lcm9fcmVxdWVzdFVSSV91dGlsc1wiKTtcclxubXltb25lcm9fY29yZV9qcy5tb25lcm9fa2V5SW1hZ2VfY2FjaGVfdXRpbHMgPSByZXF1aXJlKFwiLi9tb25lcm9fdXRpbHMvbW9uZXJvX2tleUltYWdlX2NhY2hlX3V0aWxzXCIpO1xyXG5teW1vbmVyb19jb3JlX2pzLm1vbmVyb19wYXltZW50SURfdXRpbHMgPSByZXF1aXJlKFwiLi9tb25lcm9fdXRpbHMvbW9uZXJvX3BheW1lbnRJRF91dGlsc1wiKTtcclxubXltb25lcm9fY29yZV9qcy5tb25lcm9fYW1vdW50X2Zvcm1hdF91dGlscyA9IHJlcXVpcmUoXCIuL21vbmVyb191dGlscy9tb25lcm9fYW1vdW50X2Zvcm1hdF91dGlsc1wiKTtcclxubXltb25lcm9fY29yZV9qcy5hcGlfcmVzcG9uc2VfcGFyc2VyX3V0aWxzID0gcmVxdWlyZShcIi4vaG9zdEFQSS9yZXNwb25zZV9wYXJzZXJfdXRpbHNcIik7XHJcbi8vXHJcbm15bW9uZXJvX2NvcmVfanMubmV0dHlwZV91dGlscyA9IHJlcXVpcmUoXCIuL2NyeXB0b25vdGVfdXRpbHMvbmV0dHlwZVwiKTtcclxubXltb25lcm9fY29yZV9qcy5KU0JpZ0ludCA9IHJlcXVpcmUoXCIuL2NyeXB0b25vdGVfdXRpbHMvYmlnaW50ZWdlclwiKS5CaWdJbnRlZ2VyOyAvLyBzbyB0aGF0IGl0IGlzIGF2YWlsYWJsZSB0byBhIGh5cG90aGV0aWNhbCBjb25zdW1lcidzIGxhbmd1YWdlLWJyaWRnaW5nIHdlYiBjb250ZXh0IGZvciBjb25zdHJ1Y3Rpbmcgc3RyaW5nIGFyZ3VtZW50cyB0byB0aGUgYWJvdmUgbW9kdWxlc1xyXG4vL1xyXG5tb2R1bGUuZXhwb3J0cyA9IG15bW9uZXJvX2NvcmVfanM7XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./libs/mymonero-app-js/local_modules/mymonero_core_js/index.js\n");

/***/ }),

/***/ "./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/MyMoneroCoreBridge.js":
/*!************************************************************************************************!*\
  !*** ./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/MyMoneroCoreBridge.js ***!
  \************************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process, __dirname) {// Copyright (c) 2014-2018, MyMonero.com\r\n//\r\n// All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without modification, are\r\n// permitted provided that the following conditions are met:\r\n//\r\n// 1. Redistributions of source code must retain the above copyright notice, this list of\r\n//\tconditions and the following disclaimer.\r\n//\r\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list\r\n//\tof conditions and the following disclaimer in the documentation and/or other\r\n//\tmaterials provided with the distribution.\r\n//\r\n// 3. Neither the name of the copyright holder nor the names of its contributors may be\r\n//\tused to endorse or promote products derived from this software without specific\r\n//\tprior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY\r\n// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\r\n// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\r\n// THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\r\n// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\r\n// THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n\r\n// Original Author: Lucas Jones\r\n// Modified to remove jQuery dep and support modular inclusion of deps by Paul Shapiro (2016)\r\n// Modified to add RingCT support by luigi1111 (2017)\r\n//\r\n// v--- These should maybe be injected into a context and supplied to currencyConfig for future platforms\r\nconst JSBigInt = __webpack_require__(/*! ../cryptonote_utils/biginteger */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/cryptonote_utils/biginteger.js\").BigInteger;\r\nconst nettype_utils = __webpack_require__(/*! ../cryptonote_utils/nettype */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/cryptonote_utils/nettype.js\");\r\nconst monero_config = __webpack_require__(/*! ./monero_config */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_config.js\");\r\nconst monero_amount_format_utils = __webpack_require__(/*! ../cryptonote_utils/money_format_utils */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/cryptonote_utils/money_format_utils.js\")(monero_config);\r\n//\r\nfunction ret_val_boolstring_to_bool(boolstring)\r\n{\r\n\tif (typeof boolstring !== \"string\") {\r\n\t\tthrow \"ret_val_boolstring_to_bool expected string input\"\r\n\t}\r\n\tif (boolstring === \"true\") {\r\n\t\treturn true\r\n\t} else if (boolstring === \"false\") {\r\n\t\treturn false\r\n\t}\r\n\tthrow \"ret_val_boolstring_to_bool given illegal input\"\r\n}\r\nfunction api_safe_wordset_name(wordset_name)\r\n{\r\n\t// convert all lowercase, legacy values to core-cpp compatible\r\n\tif (wordset_name == \"english\") {\r\n\t\treturn \"English\"\r\n\t} else if (wordset_name == \"spanish\") {\r\n\t\treturn \"Español\"\r\n\t} else if (wordset_name == \"portuguese\") {\r\n\t\treturn \"Português\"\r\n\t} else if (wordset_name == \"japanese\") {\r\n\t\treturn \"日本語\"\r\n\t}\r\n\treturn wordset_name // must be a value returned by core-cpp\r\n}\r\nfunction bridge_sanitized__spendable_out(raw__out)\r\n{\r\n\tconst sanitary__output = \r\n\t{\r\n\t\tamount: raw__out.amount.toString(),\r\n\t\tpublic_key: raw__out.public_key,\r\n\t\tglobal_index: \"\" + raw__out.global_index,\r\n\t\tindex: \"\" + raw__out.index,\r\n\t\ttx_pub_key: raw__out.tx_pub_key\r\n\t};\r\n\tif (raw__out.rct && typeof raw__out.rct !== 'undefined') {\r\n\t\tsanitary__output.rct = raw__out.rct;\r\n\t}\r\n\treturn sanitary__output;\r\n}\r\n//\r\nclass MyMoneroCoreBridge\r\n{\r\n\tconstructor(this_Module)\r\n\t{\r\n\t\tthis.Module = this_Module;\r\n\t}\r\n\t//\r\n\t//\r\n\tis_subaddress(addr, nettype) {\r\n\t\tconst args =\r\n\t\t{\r\n\t\t\taddress: addr,\r\n\t\t\tnettype_string: nettype_utils.nettype_to_API_string(nettype)\r\n\t\t};\r\n\t\tconst args_str = JSON.stringify(args);\r\n\t\tconst ret_string = this.Module.is_subaddress(args_str);\r\n\t\tconst ret = JSON.parse(ret_string);\r\n\t\tif (typeof ret.err_msg !== 'undefined' && ret.err_msg) {\r\n\t\t\treturn { err_msg: ret.err_msg }\r\n\t\t}\r\n\t\treturn ret_val_boolstring_to_bool(ret.retVal);\r\n\t}\r\n\r\n\tis_integrated_address(addr, nettype) {\r\n\t\tconst args =\r\n\t\t{\r\n\t\t\taddress: addr,\r\n\t\t\tnettype_string: nettype_utils.nettype_to_API_string(nettype)\r\n\t\t};\r\n\t\tconst args_str = JSON.stringify(args);\r\n\t\tconst ret_string = this.Module.is_integrated_address(args_str);\r\n\t\tconst ret = JSON.parse(ret_string);\r\n\t\tif (typeof ret.err_msg !== 'undefined' && ret.err_msg) {\r\n\t\t\treturn { err_msg: ret.err_msg }\r\n\t\t}\r\n\t\treturn ret_val_boolstring_to_bool(ret.retVal);\r\n\t}\r\n\r\n\tnew_payment_id() {\r\n\t\tconst args = {};\r\n\t\tconst args_str = JSON.stringify(args);\r\n\t\tconst ret_string = this.Module.new_payment_id(args_str);\r\n\t\tconst ret = JSON.parse(ret_string);\r\n\t\tif (typeof ret.err_msg !== 'undefined' && ret.err_msg) {\r\n\t\t\treturn { err_msg: ret.err_msg }\r\n\t\t}\r\n\t\treturn ret.retVal;\r\n\t}\r\n\r\n\tnew__int_addr_from_addr_and_short_pid(\r\n\t\taddress,\r\n\t\tshort_pid,\r\n\t\tnettype\r\n\t) {\r\n\t\tif (!short_pid || short_pid.length != 16) {\r\n\t\t\treturn { err_msg: \"expected valid short_pid\" };\r\n\t\t}\r\n\t\tconst args =\r\n\t\t{\r\n\t\t\taddress: address,\r\n\t\t\tshort_pid: short_pid,\r\n\t\t\tnettype_string: nettype_utils.nettype_to_API_string(nettype)\r\n\t\t};\r\n\t\tconst args_str = JSON.stringify(args);\r\n\t\tconst ret_string = this.Module.new_integrated_address(args_str);\r\n\t\tconst ret = JSON.parse(ret_string);\r\n\t\tif (typeof ret.err_msg !== 'undefined' && ret.err_msg) {\r\n\t\t\treturn { err_msg: ret.err_msg }\r\n\t\t}\r\n\t\treturn ret.retVal;\r\n\t}\r\n\r\n\tdecode_address(address, nettype)\r\n\t{\r\n\t\tconst args =\r\n\t\t{\r\n\t\t\taddress: address,\r\n\t\t\tnettype_string: nettype_utils.nettype_to_API_string(nettype)\r\n\t\t};\r\n\t\tconst args_str = JSON.stringify(args);\r\n\t\tconst ret_string = this.Module.decode_address(args_str);\r\n\t\tconst ret = JSON.parse(ret_string);\r\n\t\tif (typeof ret.err_msg !== 'undefined' && ret.err_msg) {\r\n\t\t\treturn { err_msg: ret.err_msg }\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tspend: ret.pub_spendKey_string,\r\n\t\t\tview: ret.pub_viewKey_string,\r\n\t\t\tintPaymentId: ret.paymentID_string, // may be undefined\r\n\t\t\tisSubaddress: ret_val_boolstring_to_bool(ret.isSubaddress)\r\n\t\t}\r\n\t}\r\n\r\n\tnewly_created_wallet(\r\n\t\tlocale_language_code,\r\n\t\tnettype\r\n\t) {\r\n\t\tconst args =\r\n\t\t{\r\n\t\t\tlocale_language_code: locale_language_code, // NOTE: this function takes the locale, not the wordset name\r\n\t\t\tnettype_string: nettype_utils.nettype_to_API_string(nettype)\r\n\t\t};\r\n\t\tconst args_str = JSON.stringify(args);\r\n\t\tconst ret_string = this.Module.newly_created_wallet(args_str);\r\n\t\tconst ret = JSON.parse(ret_string);\r\n\t\tif (typeof ret.err_msg !== 'undefined' && ret.err_msg) {\r\n\t\t\treturn { err_msg: ret.err_msg }\r\n\t\t}\r\n\t\treturn { // calling these out so as to provide a stable ret val interface\r\n\t\t\tmnemonic_string: ret.mnemonic_string,\r\n\t\t\tmnemonic_language: ret.mnemonic_language,\r\n\t\t\tsec_seed_string: ret.sec_seed_string,\r\n\t\t\taddress_string: ret.address_string,\r\n\t\t\tpub_viewKey_string: ret.pub_viewKey_string,\r\n\t\t\tsec_viewKey_string: ret.sec_viewKey_string,\r\n\t\t\tpub_spendKey_string: ret.pub_spendKey_string,\r\n\t\t\tsec_spendKey_string: ret.sec_spendKey_string\r\n\t\t};\r\n\t}\r\n\r\n\tare_equal_mnemonics(a, b) {\r\n\t\tconst args =\r\n\t\t{\r\n\t\t\ta: a,\r\n\t\t\tb: b\r\n\t\t};\r\n\t\tconst args_str = JSON.stringify(args);\r\n\t\tconst ret_string = this.Module.are_equal_mnemonics(args_str);\r\n\t\tconst ret = JSON.parse(ret_string);\r\n\t\tif (typeof ret.err_msg !== 'undefined' && ret.err_msg) {\r\n\t\t\treturn { err_msg: ret.err_msg }\r\n\t\t}\r\n\t\treturn ret_val_boolstring_to_bool(ret.retVal);\r\n\t}\r\n\r\n\tmnemonic_from_seed(\r\n\t\tseed_string,\r\n\t\twordset_name\r\n\t) {\r\n\t\tconst args =\r\n\t\t{\r\n\t\t\tseed_string: seed_string,\r\n\t\t\twordset_name: api_safe_wordset_name(wordset_name)\r\n\t\t};\r\n\t\tconst args_str = JSON.stringify(args);\r\n\t\tconst ret_string = this.Module.mnemonic_from_seed(args_str);\r\n\t\tconst ret = JSON.parse(ret_string);\r\n\t\tif (typeof ret.err_msg !== 'undefined' && ret.err_msg) {\r\n\t\t\treturn { err_msg: ret.err_msg } // TODO: maybe return this somehow\r\n\t\t}\r\n\t\treturn ret.retVal;\r\n\t}\r\n\r\n\tseed_and_keys_from_mnemonic(\r\n\t\tmnemonic_string,\r\n\t\tnettype\r\n\t) {\r\n\t\tconst args =\r\n\t\t{\r\n\t\t\tmnemonic_string: mnemonic_string,\r\n\t\t\tnettype_string: nettype_utils.nettype_to_API_string(nettype)\r\n\t\t};\r\n\t\tconst args_str = JSON.stringify(args);\r\n\t\tconst ret_string = this.Module.seed_and_keys_from_mnemonic(args_str);\r\n\t\tconst ret = JSON.parse(ret_string);\r\n\t\tif (typeof ret.err_msg !== 'undefined' && ret.err_msg) {\r\n\t\t\treturn { err_msg: ret.err_msg }\r\n\t\t}\r\n\t\treturn { // calling these out so as to provide a stable ret val interface\r\n\t\t\tsec_seed_string: ret.sec_seed_string,\r\n\t\t\tmnemonic_language: ret.mnemonic_language,\r\n\t\t\taddress_string: ret.address_string,\r\n\t\t\tpub_viewKey_string: ret.pub_viewKey_string,\r\n\t\t\tsec_viewKey_string: ret.sec_viewKey_string,\r\n\t\t\tpub_spendKey_string: ret.pub_spendKey_string,\r\n\t\t\tsec_spendKey_string: ret.sec_spendKey_string\r\n\t\t};\r\n\t}\r\n\r\n\tvalidate_components_for_login(\r\n\t\taddress_string,\r\n\t\tsec_viewKey_string,\r\n\t\tsec_spendKey_string,\r\n\t\tseed_string,\r\n\t\tnettype\r\n\t) {\r\n\t\tconst args =\r\n\t\t{\r\n\t\t\taddress_string: address_string,\r\n\t\t\tsec_viewKey_string: sec_viewKey_string,\r\n\t\t\tsec_spendKey_string: sec_spendKey_string,\r\n\t\t\tseed_string: seed_string,\r\n\t\t\tnettype_string: nettype_utils.nettype_to_API_string(nettype)\r\n\t\t};\r\n\t\tconst args_str = JSON.stringify(args);\r\n\t\tconst ret_string = this.Module.validate_components_for_login(args_str);\r\n\t\tconst ret = JSON.parse(ret_string);\r\n\t\tif (typeof ret.err_msg !== 'undefined' && ret.err_msg) {\r\n\t\t\treturn { err_msg: ret.err_msg }\r\n\t\t}\r\n\t\treturn { // calling these out so as to provide a stable ret val interface\r\n\t\t\tisValid: ret_val_boolstring_to_bool(ret.isValid),\r\n\t\t\tisInViewOnlyMode: ret_val_boolstring_to_bool(ret.isInViewOnlyMode),\r\n\t\t\tpub_viewKey_string: ret.pub_viewKey_string,\r\n\t\t\tpub_spendKey_string: ret.pub_spendKey_string\r\n\t\t};\r\n\t}\r\n\r\n\taddress_and_keys_from_seed(\r\n\t\tseed_string,\r\n\t\tnettype\r\n\t) {\r\n\t\tconst args =\r\n\t\t{\r\n\t\t\tseed_string: seed_string,\r\n\t\t\tnettype_string: nettype_utils.nettype_to_API_string(nettype)\r\n\t\t};\r\n\t\tconst args_str = JSON.stringify(args);\r\n\t\tconst ret_string = this.Module.address_and_keys_from_seed(args_str);\r\n\t\tconst ret = JSON.parse(ret_string);\r\n\t\tif (typeof ret.err_msg !== 'undefined' && ret.err_msg) {\r\n\t\t\treturn { err_msg: ret.err_msg }\r\n\t\t}\r\n\t\treturn { // calling these out so as to provide a stable ret val interface\r\n\t\t\taddress_string: ret.address_string,\r\n\t\t\tpub_viewKey_string: ret.pub_viewKey_string,\r\n\t\t\tsec_viewKey_string: ret.sec_viewKey_string,\r\n\t\t\tpub_spendKey_string: ret.pub_spendKey_string,\r\n\t\t\tsec_spendKey_string: ret.sec_spendKey_string\r\n\t\t};\r\n\t}\r\n\r\n\tgenerate_key_image(\r\n\t\ttx_pub,\r\n\t\tview_sec,\r\n\t\tspend_pub,\r\n\t\tspend_sec,\r\n\t\toutput_index\r\n\t) {\r\n\t\tif (tx_pub.length !== 64) {\r\n\t\t\treturn { err_msg: \"Invalid tx_pub length\" };\r\n\t\t}\r\n\t\tif (view_sec.length !== 64) {\r\n\t\t\treturn { err_msg: \"Invalid view_sec length\" };\r\n\t\t}\r\n\t\tif (spend_pub.length !== 64) {\r\n\t\t\treturn { err_msg: \"Invalid spend_pub length\" };\r\n\t\t}\r\n\t\tif (spend_sec.length !== 64) {\r\n\t\t\treturn { err_msg: \"Invalid spend_sec length\" };\r\n\t\t}\r\n\t\tconst args =\r\n\t\t{\r\n\t\t\tsec_viewKey_string: view_sec,\r\n\t\t\tsec_spendKey_string: spend_sec,\r\n\t\t\tpub_spendKey_string: spend_pub,\r\n\t\t\ttx_pub_key: tx_pub,\r\n\t\t\tout_index: \"\" + output_index\r\n\t\t};\r\n\t\tconst args_str = JSON.stringify(args);\r\n\t\tconst ret_string = this.Module.generate_key_image(args_str);\r\n\t\tconst ret = JSON.parse(ret_string);\r\n\t\tif (typeof ret.err_msg !== 'undefined' && ret.err_msg) {\r\n\t\t\treturn { err_msg: ret.err_msg };\r\n\t\t}\r\n\t\treturn ret.retVal;\r\n\t}\r\n\r\n\tgenerate_key_derivation(\r\n\t\tpub,\r\n\t\tsec,\r\n\t) {\r\n\t\tconst args =\r\n\t\t{\r\n\t\t\tpub: pub,\r\n\t\t\tsec: sec,\r\n\t\t};\r\n\t\tconst args_str = JSON.stringify(args);\r\n\t\tconst ret_string = this.Module.generate_key_derivation(args_str);\r\n\t\tconst ret = JSON.parse(ret_string);\r\n\t\tif (typeof ret.err_msg !== 'undefined' && ret.err_msg) {\r\n\t\t\treturn { err_msg: ret.err_msg };\r\n\t\t}\r\n\t\treturn ret.retVal;\r\n\t}\r\n\tderive_public_key(derivation, out_index, pub)\r\n\t{\r\n\t\tconst args =\r\n\t\t{\r\n\t\t\tpub: pub,\r\n\t\t\tderivation: derivation, \r\n\t\t\tout_index: out_index,\r\n\t\t};\r\n\t\tconst args_str = JSON.stringify(args);\r\n\t\tconst ret_string = this.Module.derive_public_key(args_str);\r\n\t\tconst ret = JSON.parse(ret_string);\r\n\t\tif (typeof ret.err_msg !== 'undefined' && ret.err_msg) {\r\n\t\t\treturn { err_msg: ret.err_msg };\r\n\t\t}\r\n\t\treturn ret.retVal;\r\n\t}\r\n\tderive_subaddress_public_key(\r\n\t\toutput_key,\r\n\t\tderivation,\r\n\t\tout_index\r\n\t) {\r\n\t\tconst args =\r\n\t\t{\r\n\t\t\toutput_key: output_key,\r\n\t\t\tderivation: derivation,\r\n\t\t\tout_index: \"\" + out_index, // must be passed as string\r\n\t\t};\r\n\t\tconst args_str = JSON.stringify(args);\r\n\t\tconst ret_string = this.Module.derive_subaddress_public_key(args_str);\r\n\t\tconst ret = JSON.parse(ret_string);\r\n\t\tif (typeof ret.err_msg !== 'undefined' && ret.err_msg) {\r\n\t\t\treturn { err_msg: ret.err_msg };\r\n\t\t}\r\n\t\treturn ret.retVal;\t\t\r\n\t}\r\n\tdecodeRct(rv, sk, i)\r\n\t{\r\n\t\tconst ecdhInfo = []; // should obvs be plural but just keeping exact names in-tact\r\n\t\tfor (var j = 0 ; j < rv.outPk.length ; j++) {\r\n\t\t\tvar this_ecdhInfo = rv.ecdhInfo[j];\r\n  \t\t\tecdhInfo.push({\r\n\t\t\t\tmask: this_ecdhInfo.mask,\r\n\t\t\t\tamount: this_ecdhInfo.amount\r\n\t\t\t})\r\n\t\t}\r\n\t\tconst outPk = [];\r\n\t\tfor (var j = 0 ; j < rv.outPk.length ; j++) {\r\n\t\t\tvar this_outPk_mask = null;\r\n\t\t\tvar this_outPk = rv.outPk[j];\r\n\t\t\tif (typeof this_outPk === 'string') {\r\n\t\t\t\tthis_outPk_mask = this_outPk;\r\n\t\t\t} else if (typeof this_outPk === \"object\") {\r\n\t\t\t\tthis_outPk_mask = this_outPk.mask; \r\n\t\t\t}\r\n\t\t\tif (this_outPk_mask == null) {\r\n\t\t\t\treturn { err_msg: \"Couldn't locate outPk mask value\" }\r\n\t\t\t}\r\n  \t\t\toutPk.push({\r\n\t\t\t\tmask: this_outPk_mask\r\n\t\t\t})\r\n\t\t}\r\n\t\tconst args =\r\n\t\t{\r\n\t\t\ti: \"\" + i,  // must be passed as string\r\n\t\t\tsk: sk,\r\n\t\t\trv: {\r\n\t\t\t\ttype: \"\" + rv.type/*must be string*/, // e.g. 1, 3 ... corresponding to rct::RCTType* in rctSigs.cpp\r\n\t\t\t\tecdhInfo: ecdhInfo,\r\n\t\t\t\toutPk: outPk\r\n\t\t\t}\r\n\t\t};\r\n\t\tconst args_str = JSON.stringify(args);\r\n\t\tconst ret_string = this.Module.decodeRct(args_str);\r\n\t\tconst ret = JSON.parse(ret_string);\r\n\t\tif (typeof ret.err_msg !== 'undefined' && ret.err_msg) {\r\n\t\t\treturn { err_msg: ret.err_msg }\r\n\t\t}\r\n\t\treturn { // calling these out so as to provide a stable ret val interface\r\n\t\t\tamount: ret.amount, // string\r\n\t\t\tmask: ret.mask,\r\n\t\t};\r\n\t}\r\n\testimated_tx_network_fee(fee_per_kb__string, priority, optl__fee_per_b_string) // this is until we switch the server over to fee per b\r\n\t{ // TODO update this API to take object rather than arg list\r\n\t\tconst args =\r\n\t\t{\r\n\t\t\tfee_per_b: typeof optl__fee_per_b_string !== undefined && optl__fee_per_b_string != null \r\n\t\t\t\t? optl__fee_per_b_string \r\n\t\t\t\t: (new JSBigInt(fee_per_kb__string)).divide(1024).toString()/*kib -> b*/, \r\n\t\t\tpriority: \"\" + priority,\r\n\t\t};\r\n\t\tconst args_str = JSON.stringify(args);\r\n\t\tconst ret_string = this.Module.estimated_tx_network_fee(args_str);\r\n\t\tconst ret = JSON.parse(ret_string);\r\n\t\tif (typeof ret.err_msg !== 'undefined' && ret.err_msg) {\r\n\t\t\treturn { err_msg: ret.err_msg } // TODO: maybe return this somehow\r\n\t\t}\r\n\t\treturn ret.retVal; // this is a string - pass it to new JSBigInt(…)\r\n\t}\r\n\tsend_step1__prepare_params_for_get_decoys(\r\n\t\tis_sweeping,\r\n\t\tsending_amount, // this may be 0 if sweeping\r\n\t\tfee_per_b,\r\n\t\tpriority,\r\n\t\tunspent_outputs,\r\n\t\toptl__payment_id_string, // this may be nil\r\n\t\toptl__passedIn_attemptAt_fee\r\n\t) {\r\n\t\tvar sanitary__unspent_outputs = [];\r\n\t\tfor (let i in unspent_outputs) {\r\n\t\t\tconst sanitary__output = bridge_sanitized__spendable_out(unspent_outputs[i])\r\n\t\t\tsanitary__unspent_outputs.push(sanitary__output);\r\n\t\t}\r\n\t\tconst args =\r\n\t\t{\r\n\t\t\tsending_amount: sending_amount.toString(),\r\n\t\t\tis_sweeping: \"\" + is_sweeping, // bool -> string\r\n\t\t\tpriority: \"\" + priority,\r\n\t\t\tfee_per_b: fee_per_b.toString(),\r\n\t\t\tunspent_outs: sanitary__unspent_outputs // outs, not outputs\r\n\t\t};\r\n\t\tif (typeof optl__payment_id_string !== \"undefined\" && optl__payment_id_string && optl__payment_id_string != \"\") {\r\n\t\t\targs.payment_id_string = optl__payment_id_string;\r\n\t\t}\r\n\t\tif (typeof optl__passedIn_attemptAt_fee !== \"undefined\" && optl__passedIn_attemptAt_fee && optl__passedIn_attemptAt_fee != \"\") {\r\n\t\t\targs.passedIn_attemptAt_fee = optl__passedIn_attemptAt_fee.toString(); // ought to be a string but in case it's a JSBigInt…\r\n\t\t}\r\n\t\tconst args_str = JSON.stringify(args);\r\n\t\tconst ret_string = this.Module.send_step1__prepare_params_for_get_decoys(args_str);\r\n\t\tconst ret = JSON.parse(ret_string);\r\n\t\t// special case: err_code of needMoreMoneyThanFound; rewrite err_msg\r\n\t\tif (ret.err_code == \"90\" || ret.err_code == 90) { // declared in mymonero-core-cpp/src/monero_transfer_utils.hpp\r\n\t\t\treturn { \r\n\t\t\t\trequired_balance: ret.required_balance,\r\n\t\t\t\tspendable_balance: ret.spendable_balance,\r\n\t\t\t\terr_msg: `Spendable balance too low. Have ${\r\n\t\t\t\t\tmonero_amount_format_utils.formatMoney(new JSBigInt(ret.spendable_balance))\r\n\t\t\t\t} ${monero_config.coinSymbol}; need ${\r\n\t\t\t\t\tmonero_amount_format_utils.formatMoney(new JSBigInt(ret.required_balance))\r\n\t\t\t\t} ${monero_config.coinSymbol}.` \r\n\t\t\t};\r\n\t\t}\r\n\t\tif (typeof ret.err_msg !== 'undefined' && ret.err_msg) {\r\n\t\t\treturn { err_msg: ret.err_msg };\r\n\t\t}\r\n\t\treturn { // calling these out to set an interface\r\n\t\t\tmixin: parseInt(ret.mixin), // for the server API request to RandomOuts\r\n\t\t\tusing_fee: ret.using_fee, // string; can be passed to step2\r\n\t\t\tchange_amount: ret.change_amount, // string for step2\r\n\t\t\tusing_outs: ret.using_outs, // this can be passed straight to step2\r\n\t\t\tfinal_total_wo_fee: ret.final_total_wo_fee // aka sending_amount for step2\r\n\t\t};\r\n\t}\r\n\tsend_step2__try_create_transaction( // send only IPC-safe vals - no JSBigInts\r\n\t\tfrom_address_string,\r\n\t\tsec_keys,\r\n\t\tto_address_string,\r\n\t\tusing_outs,\r\n\t\tmix_outs,\r\n\t\tfake_outputs_count,\r\n\t\tfinal_total_wo_fee,\r\n\t\tchange_amount,\r\n\t\tfee_amount,\r\n\t\tpayment_id,\r\n\t\tpriority,\r\n\t\tfee_per_b, // not kib - if fee_per_kb, /= 1024\r\n\t\tunlock_time,\r\n\t\tnettype\r\n\t) {\r\n\t\tunlock_time = unlock_time || 0;\r\n\t\tmix_outs = mix_outs || [];\r\n\t\t// NOTE: we also do this check in the C++... may as well remove it from here\r\n\t\tif (mix_outs.length !== using_outs.length && fake_outputs_count !== 0) {\r\n\t\t\treturn { \r\n\t\t\t\terr_msg: \"Wrong number of mix outs provided (\" +\r\n\t\t\t\t\tusing_outs.length + \" using_outs, \" +\r\n\t\t\t\t\tmix_outs.length + \" mix outs)\"\r\n\t\t\t};\r\n\t\t}\r\n\t\tfor (var i = 0; i < mix_outs.length; i++) {\r\n\t\t\tif ((mix_outs[i].outputs || []).length < fake_outputs_count) {\r\n\t\t\t\treturn { err_msg: \"Not enough outputs to mix with\" };\r\n\t\t\t}\r\n\t\t}\r\n\t\t//\r\n\t\t// Now we need to convert all non-JSON-serializable objects such as JSBigInts to strings etc - not that there should be any!\r\n\t\t// - and all numbers to strings - especially those which may be uint64_t on the receiving side\r\n\t\tvar sanitary__using_outs = [];\r\n\t\tfor (let i in using_outs) {\r\n\t\t\tconst sanitary__output = bridge_sanitized__spendable_out(using_outs[i])\r\n\t\t\tsanitary__using_outs.push(sanitary__output);\r\n\t\t}\r\n\t\tvar sanitary__mix_outs = [];\r\n\t\tfor (let i in mix_outs) {\r\n\t\t\tconst sanitary__mix_outs_and_amount =\r\n\t\t\t{\r\n\t\t\t\tamount: mix_outs[i].amount.toString(), // it should be a string, but in case it's not\r\n\t\t\t\toutputs: [] \r\n\t\t\t};\r\n\t\t\tif (mix_outs[i].outputs && typeof mix_outs[i].outputs !== 'undefined') {\r\n\t\t\t\tfor (let j in mix_outs[i].outputs) {\r\n\t\t\t\t\tconst sanitary__mix_out =\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tglobal_index: \"\" + mix_outs[i].outputs[j].global_index, // number to string\r\n\t\t\t\t\t\tpublic_key: mix_outs[i].outputs[j].public_key\r\n\t\t\t\t\t};\r\n\t\t\t\t\tif (mix_outs[i].outputs[j].rct && typeof mix_outs[i].outputs[j].rct !== 'undefined') {\r\n\t\t\t\t\t\tsanitary__mix_out.rct = mix_outs[i].outputs[j].rct;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsanitary__mix_outs_and_amount.outputs.push(sanitary__mix_out);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tsanitary__mix_outs.push(sanitary__mix_outs_and_amount);\r\n\t\t}\r\n\t\tconst args =\r\n\t\t{\r\n\t\t\tfrom_address_string: from_address_string,\r\n\t\t\tsec_viewKey_string: sec_keys.view,\r\n\t\t\tsec_spendKey_string: sec_keys.spend,\r\n\t\t\tto_address_string: to_address_string,\r\n\t\t\tfinal_total_wo_fee: final_total_wo_fee.toString(),\r\n\t\t\tchange_amount: change_amount.toString(),\r\n\t\t\tfee_amount: fee_amount.toString(),\r\n\t\t\tpriority: \"\" + priority,\r\n\t\t\tfee_per_b: fee_per_b.toString(),\r\n\t\t\tusing_outs: sanitary__using_outs,\r\n\t\t\tmix_outs: sanitary__mix_outs,\r\n\t\t\tunlock_time: \"\" + unlock_time, // bridge is expecting a string\r\n\t\t\tnettype_string: nettype_utils.nettype_to_API_string(nettype)\r\n\t\t};\r\n\t\tif (typeof payment_id !== \"undefined\" && payment_id) {\r\n\t\t\targs.payment_id_string = payment_id;\r\n\t\t}\r\n\t\tconst args_str = JSON.stringify(args);\r\n\t\tconst ret_string = this.Module.send_step2__try_create_transaction(args_str);\r\n\t\tconst ret = JSON.parse(ret_string);\r\n\t\t//\r\n\t\tif (typeof ret.err_msg !== 'undefined' && ret.err_msg) {\r\n\t\t\treturn { err_msg: ret.err_msg, tx_must_be_reconstructed: false };\r\n\t\t}\r\n\t\tif (ret.tx_must_be_reconstructed == \"true\" || ret.tx_must_be_reconstructed == true) {\r\n\t\t\tif (typeof ret.fee_actually_needed == 'undefined' || !ret.fee_actually_needed) {\r\n\t\t\t\tthrow \"tx_must_be_reconstructed; expected non-nil fee_actually_needed\"\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\ttx_must_be_reconstructed: ret.tx_must_be_reconstructed, // if true, re-do procedure from step1 except for requesting UnspentOuts (that can be done oncet)\r\n\t\t\t\tfee_actually_needed: ret.fee_actually_needed // can be passed back to step1\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn { // calling these out to set an interface\r\n\t\t\ttx_must_be_reconstructed: false, // in case caller is not checking for nil\r\n\t\t\tsigned_serialized_tx: ret.serialized_signed_tx, // this name change should be fixed to serialized_signed_tx\r\n\t\t\ttx_hash: ret.tx_hash,\r\n\t\t\ttx_key: ret.tx_key\r\n\t\t};\r\n\t}\r\n\r\n}\r\n//\r\nmodule.exports = function(options)\r\n{\r\n\toptions = options || {}\r\n\t//\r\n\tconst ENVIRONMENT_IS_WEB = typeof window===\"object\";\r\n\tconst ENVIRONMENT_IS_WORKER = typeof importScripts===\"function\";\r\n\tconst ENVIRONMENT_IS_NODE = typeof process===\"object\" && process.browser !== true && \"function\"===\"function\" && ENVIRONMENT_IS_WORKER == false; // we want this to be true for Electron but not for a WebView\r\n\tconst ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;\r\n\tfunction locateFile(filename, scriptDirectory)\r\n\t{\r\n\t\t// if (options[\"locateFile\"]) {\r\n\t\t// \treturn options[\"locateFile\"](filename, scriptDirectory)\r\n\t\t// }\r\n\t\tvar this_scriptDirectory = scriptDirectory\r\n\t\tconst lastChar = this_scriptDirectory.charAt(this_scriptDirectory.length - 1)\r\n\t\tif (lastChar == \"/\" || lastChar == \"\\\\\") { \r\n\t\t\t// ^-- this is not a '\\\\' on Windows because emscripten actually appends a '/'\r\n\t\t\tthis_scriptDirectory = this_scriptDirectory.substring(0, this_scriptDirectory.length - 1) // remove trailing \"/\"\r\n\t\t}\r\n\t\tvar fullPath = null; // add trailing slash to this\r\n\t\tif (ENVIRONMENT_IS_NODE) {\r\n\t\t\tconst path = __webpack_require__(/*! path */ \"./node_modules/path-browserify/index.js\")\r\n\t\t\tconst lastPathComponent = path.basename(this_scriptDirectory)\r\n\t\t\tif (lastPathComponent == \"monero_utils\") { // typical node or electron-main process\r\n\t\t\t\tfullPath = path.format({\r\n\t\t\t\t\tdir: this_scriptDirectory,\r\n\t\t\t\t\tbase: filename\r\n\t\t\t\t})\r\n\t\t\t} else {\r\n\t\t\t\tconsole.warn(\"MyMoneroCoreBridge/locateFile() on node.js didn't find \\\"monero_utils\\\" (or possibly MyMoneroCoreBridge.js) itself in the expected location in the following path. The function may need to be expanded but it might in normal situations be likely to be another bug.\" ,  pathTo_cryptonoteUtilsDir)\r\n\t\t\t}\r\n\t\t} else if (ENVIRONMENT_IS_WEB) {\r\n\t\t\tvar pathTo_cryptonoteUtilsDir;\r\n\t\t\tif (typeof __dirname !== undefined && __dirname !== \"/\") { // looks like node running in browser.. (but not going to assume it's electron-renderer since that should be taken care of by monero_utils.js itself)\r\n\t\t\t\t// but just in case it is... here's an attempt to support it\r\n\t\t\t\t// have to check != \"/\" b/c webpack (I think) replaces __dirname\r\n\t\t\t\tpathTo_cryptonoteUtilsDir = \"file://\" + __dirname + \"/\" // prepending \"file://\" because it's going to try to stream it\r\n\t\t\t} else { // actual web browser\r\n\t\t\t\tpathTo_cryptonoteUtilsDir = this_scriptDirectory + \"/mymonero_core_js/monero_utils/\" // this works for the MyMonero browser build, and is quite general, at least\r\n\t\t\t}\r\n\t\t\tfullPath = pathTo_cryptonoteUtilsDir + filename\r\n\t\t}\r\n\t\tif (fullPath == null) {\r\n\t\t\tthrow \"Unable to derive fullPath. Please pass locateFile() to cryptonote_utils init.\"\r\n\t\t}\r\n\t\t//\r\n\t\treturn fullPath\r\n\t}\r\n\treturn new Promise(function(resolve, reject) {\r\n\t\tvar Module_template = {}\r\n\t\tif (options.asmjs != true || options.wasm == true) { // wasm\r\n\t\t\tModule_template[\"locateFile\"] = locateFile\r\n\t\t\t//\r\n\t\t\t// NOTE: This requires src/module-post.js to be included as post-js in CMakeLists.txt under a wasm build\r\n\t\t\t__webpack_require__(/*! ./MyMoneroCoreCpp_WASM */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/MyMoneroCoreCpp_WASM.wasm\")(Module_template).ready.then(function(thisModule) \r\n\t\t\t{\r\n\t\t\t\tconst instance = new MyMoneroCoreBridge(thisModule);\r\n\t\t\t\tresolve(instance);\r\n\t\t\t}).catch(function(e) {\r\n\t\t\t\tconsole.error(\"Error loading MyMoneroCoreCpp_WASM:\", e);\r\n\t\t\t\treject(e);\r\n\t\t\t});\r\n\t\t} else { // this is synchronous so we can resolve immediately\r\n\t\t\tvar scriptDirectory=\"\"; // this was extracted from emscripten - it could get factored if anything else would ever need it\r\n\t\t\tif (ENVIRONMENT_IS_NODE) {\r\n\t\t\t\tscriptDirectory=__dirname+\"/\";\r\n\t\t\t} else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {\r\n\t\t\t\tif (ENVIRONMENT_IS_WORKER) {\r\n\t\t\t\t\tscriptDirectory = self.location.href\r\n\t\t\t\t} else if (document.currentScript) {\r\n\t\t\t\t\tscriptDirectory = document.currentScript.src\r\n\t\t\t\t}\r\n\t\t\t\tvar _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\r\n\t\t\t\tif(_scriptDir){\r\n\t\t\t\t\tscriptDirectory = _scriptDir\r\n\t\t\t\t}\r\n\t\t\t\tif (scriptDirectory.indexOf(\"blob:\") !== 0) {\r\n\t\t\t\t\tscriptDirectory = scriptDirectory.substr(0,scriptDirectory.lastIndexOf(\"/\")+1)\r\n\t\t\t\t} else {\r\n\t\t\t\t\tscriptDirectory = \"\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar read_fn;\r\n\t\t\tif (ENVIRONMENT_IS_NODE) {\r\n\t\t\t\tread_fn = function(filepath)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn __webpack_require__(/*! fs */ \"./node_modules/html5-fs/src/api.js\").readFileSync(__webpack_require__(/*! path */ \"./node_modules/path-browserify/index.js\").normalize(filepath)).toString()\r\n\t\t\t\t};\r\n\t\t\t} else if (ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER) {\r\n\t\t\t\tread_fn = function(url)\r\n\t\t\t\t{ // it's an option to move this over to fetch, but, fetch requires a polyfill for these older browsers anyway - making fetch an automatic dep just for asmjs fallback - and the github/fetch polyfill does not appear to actually support mode (for 'same-origin' policy) anyway - probably not worth it yet \r\n\t\t\t\t\tvar xhr = new XMLHttpRequest()\r\n\t\t\t\t\txhr.open(\"GET\", url, false)\r\n\t\t\t\t\txhr.send(null)\r\n\t\t\t\t\t//\r\n\t\t\t\t\treturn xhr.responseText\r\n\t\t\t\t};\r\n\t\t\t} else {\r\n\t\t\t\tthrow \"Unsupported environment - please implement file reading for asmjs fallback case\"\r\n\t\t\t}\r\n\t\t\tconst filepath = locateFile('MyMoneroCoreCpp_ASMJS.asm.js', scriptDirectory)\r\n\t\t\tconst content = read_fn(filepath)\r\n\t\t\t// TODO: verify content - for now, relying on same-origin and tls/ssl\r\n\t\t\tvar Module = {}\r\n\t\t\ttry {\r\n\t\t\t\teval(content) // I do not believe this is a safety concern, because content is server-controlled; https://humanwhocodes.com/blog/2013/06/25/eval-isnt-evil-just-misunderstood/\r\n\t\t\t} catch (e) {\r\n\t\t\t\treject(e)\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tsetTimeout(function()\r\n\t\t\t{ // \"delaying even 1ms is enough to allow compilation memory to be reclaimed\"\r\n\t\t\t\tModule_template['asm'] = Module['asm']\r\n\t\t\t\tModule = null\r\n\t\t\t\tresolve(new MyMoneroCoreBridge(__webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module './MyMoneroCoreCpp_ASMJS'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()))(Module_template)))\r\n\t\t\t}, 1) \r\n\t\t}\r\n\t});\r\n};\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../node_modules/process/browser.js */ \"./node_modules/process/browser.js\"), \"/\"))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/MyMoneroCoreBridge.js\n");

/***/ }),

/***/ "./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/MyMoneroCoreCpp_WASM.wasm":
/*!****************************************************************************************************!*\
  !*** ./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/MyMoneroCoreCpp_WASM.wasm ***!
  \****************************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__.p + \"775d8a3345fe4504d0afe8f9aefb07e8.wasm\";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9saWJzL215bW9uZXJvLWFwcC1qcy9sb2NhbF9tb2R1bGVzL215bW9uZXJvX2NvcmVfanMvbW9uZXJvX3V0aWxzL015TW9uZXJvQ29yZUNwcF9XQVNNLndhc20uanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9saWJzL215bW9uZXJvLWFwcC1qcy9sb2NhbF9tb2R1bGVzL215bW9uZXJvX2NvcmVfanMvbW9uZXJvX3V0aWxzL015TW9uZXJvQ29yZUNwcF9XQVNNLndhc20/NzgyYiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI3NzVkOGEzMzQ1ZmU0NTA0ZDBhZmU4ZjlhZWZiMDdlOC53YXNtXCI7Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/MyMoneroCoreCpp_WASM.wasm\n");

/***/ }),

/***/ "./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/__bridged_fns_spec.js":
/*!************************************************************************************************!*\
  !*** ./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/__bridged_fns_spec.js ***!
  \************************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

eval("// Copyright (c) 2014-2018, MyMonero.com\r\n//\r\n// All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without modification, are\r\n// permitted provided that the following conditions are met:\r\n//\r\n// 1. Redistributions of source code must retain the above copyright notice, this list of\r\n//\tconditions and the following disclaimer.\r\n//\r\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list\r\n//\tof conditions and the following disclaimer in the documentation and/or other\r\n//\tmaterials provided with the distribution.\r\n//\r\n// 3. Neither the name of the copyright holder nor the names of its contributors may be\r\n//\tused to endorse or promote products derived from this software without specific\r\n//\tprior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY\r\n// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\r\n// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\r\n// THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\r\n// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\r\n// THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n//\r\n// This file is here merely to share configuration\r\n//\r\nexports.bridgedFn_names =\r\n[\r\n\t\"is_subaddress\",\r\n\t\"is_integrated_address\",\r\n\t\"new_payment_id\",\r\n\t\"new__int_addr_from_addr_and_short_pid\",\r\n\t\"decode_address\",\r\n\t\"newly_created_wallet\",\r\n\t\"are_equal_mnemonics\",\r\n\t\"mnemonic_from_seed\",\r\n\t\"seed_and_keys_from_mnemonic\",\r\n\t\"validate_components_for_login\",\r\n\t\"address_and_keys_from_seed\",\r\n\t\"generate_key_image\",\r\n\t\"generate_key_derivation\",\r\n\t\"derive_public_key\",\r\n\t\"derive_subaddress_public_key\",\r\n\t\"decodeRct\",\r\n\t\"estimate_rct_tx_size\",\r\n\t\"calculate_fee\",\r\n\t\"estimated_tx_network_fee\",\r\n\t\"send_step1__prepare_params_for_get_decoys\",\r\n\t\"send_step2__try_create_transaction\"\r\n];\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9saWJzL215bW9uZXJvLWFwcC1qcy9sb2NhbF9tb2R1bGVzL215bW9uZXJvX2NvcmVfanMvbW9uZXJvX3V0aWxzL19fYnJpZGdlZF9mbnNfc3BlYy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2xpYnMvbXltb25lcm8tYXBwLWpzL2xvY2FsX21vZHVsZXMvbXltb25lcm9fY29yZV9qcy9tb25lcm9fdXRpbHMvX19icmlkZ2VkX2Zuc19zcGVjLmpzPzMxZjIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE0LTIwMTgsIE15TW9uZXJvLmNvbVxyXG4vL1xyXG4vLyBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vL1xyXG4vLyBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBhcmVcclxuLy8gcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XHJcbi8vXHJcbi8vIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0IG9mXHJcbi8vXHRjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXHJcbi8vXHJcbi8vIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0XHJcbi8vXHRvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyXHJcbi8vXHRtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxyXG4vL1xyXG4vLyAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBjb3B5cmlnaHQgaG9sZGVyIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmVcclxuLy9cdHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWNcclxuLy9cdHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cclxuLy9cclxuLy8gVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWVxyXG4vLyBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0ZcclxuLy8gTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTExcclxuLy8gVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsXHJcbi8vIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTyxcclxuLy8gUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXHJcbi8vIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULFxyXG4vLyBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0ZcclxuLy8gVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxyXG4vL1xyXG4vLyBUaGlzIGZpbGUgaXMgaGVyZSBtZXJlbHkgdG8gc2hhcmUgY29uZmlndXJhdGlvblxyXG4vL1xyXG5leHBvcnRzLmJyaWRnZWRGbl9uYW1lcyA9XHJcbltcclxuXHRcImlzX3N1YmFkZHJlc3NcIixcclxuXHRcImlzX2ludGVncmF0ZWRfYWRkcmVzc1wiLFxyXG5cdFwibmV3X3BheW1lbnRfaWRcIixcclxuXHRcIm5ld19faW50X2FkZHJfZnJvbV9hZGRyX2FuZF9zaG9ydF9waWRcIixcclxuXHRcImRlY29kZV9hZGRyZXNzXCIsXHJcblx0XCJuZXdseV9jcmVhdGVkX3dhbGxldFwiLFxyXG5cdFwiYXJlX2VxdWFsX21uZW1vbmljc1wiLFxyXG5cdFwibW5lbW9uaWNfZnJvbV9zZWVkXCIsXHJcblx0XCJzZWVkX2FuZF9rZXlzX2Zyb21fbW5lbW9uaWNcIixcclxuXHRcInZhbGlkYXRlX2NvbXBvbmVudHNfZm9yX2xvZ2luXCIsXHJcblx0XCJhZGRyZXNzX2FuZF9rZXlzX2Zyb21fc2VlZFwiLFxyXG5cdFwiZ2VuZXJhdGVfa2V5X2ltYWdlXCIsXHJcblx0XCJnZW5lcmF0ZV9rZXlfZGVyaXZhdGlvblwiLFxyXG5cdFwiZGVyaXZlX3B1YmxpY19rZXlcIixcclxuXHRcImRlcml2ZV9zdWJhZGRyZXNzX3B1YmxpY19rZXlcIixcclxuXHRcImRlY29kZVJjdFwiLFxyXG5cdFwiZXN0aW1hdGVfcmN0X3R4X3NpemVcIixcclxuXHRcImNhbGN1bGF0ZV9mZWVcIixcclxuXHRcImVzdGltYXRlZF90eF9uZXR3b3JrX2ZlZVwiLFxyXG5cdFwic2VuZF9zdGVwMV9fcHJlcGFyZV9wYXJhbXNfZm9yX2dldF9kZWNveXNcIixcclxuXHRcInNlbmRfc3RlcDJfX3RyeV9jcmVhdGVfdHJhbnNhY3Rpb25cIlxyXG5dO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/__bridged_fns_spec.js\n");

/***/ }),

/***/ "./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_amount_format_utils.js":
/*!********************************************************************************************************!*\
  !*** ./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_amount_format_utils.js ***!
  \********************************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright (c) 2014-2018, MyMonero.com\r\n//\r\n// All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without modification, are\r\n// permitted provided that the following conditions are met:\r\n//\r\n// 1. Redistributions of source code must retain the above copyright notice, this list of\r\n//\tconditions and the following disclaimer.\r\n//\r\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list\r\n//\tof conditions and the following disclaimer in the documentation and/or other\r\n//\tmaterials provided with the distribution.\r\n//\r\n// 3. Neither the name of the copyright holder nor the names of its contributors may be\r\n//\tused to endorse or promote products derived from this software without specific\r\n//\tprior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY\r\n// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\r\n// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\r\n// THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\r\n// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\r\n// THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n//\r\n\r\n//\r\nconst monero_config = __webpack_require__(/*! ./monero_config */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_config.js\")\r\nconst money_format_utils = __webpack_require__(/*! ../cryptonote_utils/money_format_utils */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/cryptonote_utils/money_format_utils.js\")\r\nconst instance = money_format_utils(monero_config)\r\n//\r\nmodule.exports = instance;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9saWJzL215bW9uZXJvLWFwcC1qcy9sb2NhbF9tb2R1bGVzL215bW9uZXJvX2NvcmVfanMvbW9uZXJvX3V0aWxzL21vbmVyb19hbW91bnRfZm9ybWF0X3V0aWxzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbGlicy9teW1vbmVyby1hcHAtanMvbG9jYWxfbW9kdWxlcy9teW1vbmVyb19jb3JlX2pzL21vbmVyb191dGlscy9tb25lcm9fYW1vdW50X2Zvcm1hdF91dGlscy5qcz83YmNkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAxNC0yMDE4LCBNeU1vbmVyby5jb21cclxuLy9cclxuLy8gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy9cclxuLy8gUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgYXJlXHJcbi8vIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxyXG4vL1xyXG4vLyAxLiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgbGlzdCBvZlxyXG4vL1x0Y29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxyXG4vL1xyXG4vLyAyLiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgbGlzdFxyXG4vL1x0b2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlclxyXG4vL1x0bWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cclxuLy9cclxuLy8gMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgY29weXJpZ2h0IGhvbGRlciBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnMgbWF5IGJlXHJcbi8vXHR1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljXHJcbi8vXHRwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXHJcbi8vXHJcbi8vIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiIEFORCBBTllcclxuLy8gRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GXHJcbi8vIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMXHJcbi8vIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLFxyXG4vLyBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sXHJcbi8vIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xyXG4vLyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCxcclxuLy8gU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GXHJcbi8vIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cclxuLy9cclxuXCJ1c2Ugc3RyaWN0XCI7XHJcbi8vXHJcbmNvbnN0IG1vbmVyb19jb25maWcgPSByZXF1aXJlKFwiLi9tb25lcm9fY29uZmlnXCIpXHJcbmNvbnN0IG1vbmV5X2Zvcm1hdF91dGlscyA9IHJlcXVpcmUoXCIuLi9jcnlwdG9ub3RlX3V0aWxzL21vbmV5X2Zvcm1hdF91dGlsc1wiKVxyXG5jb25zdCBpbnN0YW5jZSA9IG1vbmV5X2Zvcm1hdF91dGlscyhtb25lcm9fY29uZmlnKVxyXG4vL1xyXG5tb2R1bGUuZXhwb3J0cyA9IGluc3RhbmNlOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_amount_format_utils.js\n");

/***/ }),

/***/ "./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_config.js":
/*!*******************************************************************************************!*\
  !*** ./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_config.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright (c) 2014-2018, MyMonero.com\r\n//\r\n// All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without modification, are\r\n// permitted provided that the following conditions are met:\r\n//\r\n// 1. Redistributions of source code must retain the above copyright notice, this list of\r\n//\tconditions and the following disclaimer.\r\n//\r\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list\r\n//\tof conditions and the following disclaimer in the documentation and/or other\r\n//\tmaterials provided with the distribution.\r\n//\r\n// 3. Neither the name of the copyright holder nor the names of its contributors may be\r\n//\tused to endorse or promote products derived from this software without specific\r\n//\tprior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY\r\n// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\r\n// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\r\n// THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\r\n// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\r\n// THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n//\r\n\r\n//\r\nconst JSBigInt = __webpack_require__(/*! ../cryptonote_utils/biginteger */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/cryptonote_utils/biginteger.js\").BigInteger;\r\n//\r\nmodule.exports = {\r\n\t// Number of atomic units in one unit of currency. e.g. 12 => 10^12 = 1000000000000\r\n\tcoinUnitPlaces: 12,\r\n\r\n\t// Minimum number of confirmations for a transaction to show as confirmed\r\n\ttxMinConfirms: 10,\r\n\r\n\t// Currency symbol\r\n\tcoinSymbol: \"XMR\",\r\n\r\n\t// OpenAlias prefix\r\n\topenAliasPrefix: \"xmr\",\r\n\r\n\t// Currency name\r\n\tcoinName: \"Monero\",\r\n\r\n\t// Payment URI Prefix\r\n\tcoinUriPrefix: \"monero:\",\r\n\r\n\t// Dust threshold in atomic units\r\n\t// 2*10^9 used for choosing outputs/change - we decompose all the way down if the receiver wants now regardless of threshold\r\n\tdustThreshold: new JSBigInt(\"2000000000\"),\r\n\r\n\t// Maximum block number, used for tx unlock time\r\n\tmaxBlockNumber: 500000000,\r\n\r\n\t// Average block time in seconds, used for unlock time estimation\r\n\tavgBlockTime: 60,\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9saWJzL215bW9uZXJvLWFwcC1qcy9sb2NhbF9tb2R1bGVzL215bW9uZXJvX2NvcmVfanMvbW9uZXJvX3V0aWxzL21vbmVyb19jb25maWcuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9saWJzL215bW9uZXJvLWFwcC1qcy9sb2NhbF9tb2R1bGVzL215bW9uZXJvX2NvcmVfanMvbW9uZXJvX3V0aWxzL21vbmVyb19jb25maWcuanM/OWJjZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTQtMjAxOCwgTXlNb25lcm8uY29tXHJcbi8vXHJcbi8vIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vXHJcbi8vIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIGFyZVxyXG4vLyBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcclxuLy9cclxuLy8gMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3Qgb2ZcclxuLy9cdGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cclxuLy9cclxuLy8gMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3RcclxuLy9cdG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXJcclxuLy9cdG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXHJcbi8vXHJcbi8vIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIGNvcHlyaWdodCBob2xkZXIgbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZVxyXG4vL1x0dXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpY1xyXG4vL1x0cHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxyXG4vL1xyXG4vLyBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkQgQU5ZXHJcbi8vIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRlxyXG4vLyBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTFxyXG4vLyBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCxcclxuLy8gU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLFxyXG4vLyBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcclxuLy8gSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsXHJcbi8vIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRlxyXG4vLyBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXHJcbi8vXHJcblwidXNlIHN0cmljdFwiO1xyXG4vL1xyXG5jb25zdCBKU0JpZ0ludCA9IHJlcXVpcmUoXCIuLi9jcnlwdG9ub3RlX3V0aWxzL2JpZ2ludGVnZXJcIikuQmlnSW50ZWdlcjtcclxuLy9cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcblx0Ly8gTnVtYmVyIG9mIGF0b21pYyB1bml0cyBpbiBvbmUgdW5pdCBvZiBjdXJyZW5jeS4gZS5nLiAxMiA9PiAxMF4xMiA9IDEwMDAwMDAwMDAwMDBcclxuXHRjb2luVW5pdFBsYWNlczogMTIsXHJcblxyXG5cdC8vIE1pbmltdW0gbnVtYmVyIG9mIGNvbmZpcm1hdGlvbnMgZm9yIGEgdHJhbnNhY3Rpb24gdG8gc2hvdyBhcyBjb25maXJtZWRcclxuXHR0eE1pbkNvbmZpcm1zOiAxMCxcclxuXHJcblx0Ly8gQ3VycmVuY3kgc3ltYm9sXHJcblx0Y29pblN5bWJvbDogXCJYTVJcIixcclxuXHJcblx0Ly8gT3BlbkFsaWFzIHByZWZpeFxyXG5cdG9wZW5BbGlhc1ByZWZpeDogXCJ4bXJcIixcclxuXHJcblx0Ly8gQ3VycmVuY3kgbmFtZVxyXG5cdGNvaW5OYW1lOiBcIk1vbmVyb1wiLFxyXG5cclxuXHQvLyBQYXltZW50IFVSSSBQcmVmaXhcclxuXHRjb2luVXJpUHJlZml4OiBcIm1vbmVybzpcIixcclxuXHJcblx0Ly8gRHVzdCB0aHJlc2hvbGQgaW4gYXRvbWljIHVuaXRzXHJcblx0Ly8gMioxMF45IHVzZWQgZm9yIGNob29zaW5nIG91dHB1dHMvY2hhbmdlIC0gd2UgZGVjb21wb3NlIGFsbCB0aGUgd2F5IGRvd24gaWYgdGhlIHJlY2VpdmVyIHdhbnRzIG5vdyByZWdhcmRsZXNzIG9mIHRocmVzaG9sZFxyXG5cdGR1c3RUaHJlc2hvbGQ6IG5ldyBKU0JpZ0ludChcIjIwMDAwMDAwMDBcIiksXHJcblxyXG5cdC8vIE1heGltdW0gYmxvY2sgbnVtYmVyLCB1c2VkIGZvciB0eCB1bmxvY2sgdGltZVxyXG5cdG1heEJsb2NrTnVtYmVyOiA1MDAwMDAwMDAsXHJcblxyXG5cdC8vIEF2ZXJhZ2UgYmxvY2sgdGltZSBpbiBzZWNvbmRzLCB1c2VkIGZvciB1bmxvY2sgdGltZSBlc3RpbWF0aW9uXHJcblx0YXZnQmxvY2tUaW1lOiA2MCxcclxufTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_config.js\n");

/***/ }),

/***/ "./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_keyImage_cache_utils.js":
/*!*********************************************************************************************************!*\
  !*** ./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_keyImage_cache_utils.js ***!
  \*********************************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright (c) 2014-2018, MyMonero.com\r\n//\r\n// All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without modification, are\r\n// permitted provided that the following conditions are met:\r\n//\r\n// 1. Redistributions of source code must retain the above copyright notice, this list of\r\n//\tconditions and the following disclaimer.\r\n//\r\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list\r\n//\tof conditions and the following disclaimer in the documentation and/or other\r\n//\tmaterials provided with the distribution.\r\n//\r\n// 3. Neither the name of the copyright holder nor the names of its contributors may be\r\n//\tused to endorse or promote products derived from this software without specific\r\n//\tprior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY\r\n// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\r\n// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\r\n// THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\r\n// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\r\n// THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n//\r\n\r\n//\r\nconst Lazy_KeyImage = function(\r\n\tmutable_keyImagesByCacheKey, // pass a mutable JS dictionary\r\n\ttx_pub_key,\r\n\tout_index,\r\n\tpublic_address,\r\n\tview_key__private,\r\n\tspend_key__public,\r\n\tspend_key__private,\r\n\tmonero_utils // must pass this so this fn can remain synchronous\r\n) {\r\n\tvar cache_index = tx_pub_key + \":\" + public_address + \":\" + out_index;\r\n\tconst cached__key_image = mutable_keyImagesByCacheKey[cache_index];\r\n\tif (\r\n\t\ttypeof cached__key_image !== \"undefined\" &&\r\n\t\tcached__key_image !== null\r\n\t) {\r\n\t\treturn cached__key_image;\r\n\t}\r\n\tvar key_image = monero_utils.generate_key_image(\r\n\t\ttx_pub_key,\r\n\t\tview_key__private,\r\n\t\tspend_key__public,\r\n\t\tspend_key__private,\r\n\t\tout_index,\r\n\t);\r\n\t// cache:\r\n\tmutable_keyImagesByCacheKey[cache_index] = key_image;\r\n\t//\r\n\treturn key_image;\r\n};\r\nexports.Lazy_KeyImage = Lazy_KeyImage;\r\n//\r\n//\r\n// Managed caches - Can be used by apps which can't send a mutable_keyImagesByCacheKey\r\nconst __global_managed_keyImageCaches_by_walletId = {};\r\nfunction _managedKeyImageCacheWalletIdForWalletWith(public_address) {\r\n\t// NOTE: making the assumption that public_address is unique enough to identify a wallet for caching....\r\n\t// FIXME: with subaddresses, is that still the case? would we need to split them up by subaddr anyway?\r\n\tif (\r\n\t\tpublic_address == \"\" ||\r\n\t\t!public_address ||\r\n\t\ttypeof public_address == \"undefined\"\r\n\t) {\r\n\t\tthrow \"managedKeyImageCacheIdentifierForWalletWith: Illegal public_address\";\r\n\t}\r\n\treturn \"\" + public_address;\r\n}\r\nconst Lazy_KeyImageCacheForWalletWith = function(public_address) {\r\n\tvar cacheId = _managedKeyImageCacheWalletIdForWalletWith(public_address);\r\n\tvar cache = __global_managed_keyImageCaches_by_walletId[cacheId];\r\n\tif (typeof cache === \"undefined\" || !cache) {\r\n\t\tcache = {};\r\n\t\t__global_managed_keyImageCaches_by_walletId[cacheId] = cache;\r\n\t}\r\n\treturn cache;\r\n};\r\nexports.Lazy_KeyImageCacheForWalletWith = Lazy_KeyImageCacheForWalletWith;\r\n//\r\nconst DeleteManagedKeyImagesForWalletWith = function(public_address) {\r\n\t// IMPORTANT: Ensure you call this method when you want to clear your wallet from\r\n\t// memory or delete it, or else you could leak key images and public addresses.\r\n\tconst cacheId = _managedKeyImageCacheWalletIdForWalletWith(public_address);\r\n\tdelete __global_managed_keyImageCaches_by_walletId[cacheId];\r\n\t//\r\n\tconst cache = __global_managed_keyImageCaches_by_walletId[cacheId];\r\n\tif (typeof cache !== \"undefined\") {\r\n\t\tthrow \"Key image cache still exists after deletion\";\r\n\t}\r\n};\r\nexports.DeleteManagedKeyImagesForWalletWith = DeleteManagedKeyImagesForWalletWith;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9saWJzL215bW9uZXJvLWFwcC1qcy9sb2NhbF9tb2R1bGVzL215bW9uZXJvX2NvcmVfanMvbW9uZXJvX3V0aWxzL21vbmVyb19rZXlJbWFnZV9jYWNoZV91dGlscy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2xpYnMvbXltb25lcm8tYXBwLWpzL2xvY2FsX21vZHVsZXMvbXltb25lcm9fY29yZV9qcy9tb25lcm9fdXRpbHMvbW9uZXJvX2tleUltYWdlX2NhY2hlX3V0aWxzLmpzPzA2YzIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE0LTIwMTgsIE15TW9uZXJvLmNvbVxyXG4vL1xyXG4vLyBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vL1xyXG4vLyBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQgbW9kaWZpY2F0aW9uLCBhcmVcclxuLy8gcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XHJcbi8vXHJcbi8vIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0IG9mXHJcbi8vXHRjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXHJcbi8vXHJcbi8vIDIuIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0XHJcbi8vXHRvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyXHJcbi8vXHRtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxyXG4vL1xyXG4vLyAzLiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBjb3B5cmlnaHQgaG9sZGVyIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9ycyBtYXkgYmVcclxuLy9cdHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWNcclxuLy9cdHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cclxuLy9cclxuLy8gVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWVxyXG4vLyBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0ZcclxuLy8gTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTExcclxuLy8gVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsXHJcbi8vIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTyxcclxuLy8gUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXHJcbi8vIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULFxyXG4vLyBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0ZcclxuLy8gVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxyXG4vL1xyXG5cInVzZSBzdHJpY3RcIjtcclxuLy9cclxuY29uc3QgTGF6eV9LZXlJbWFnZSA9IGZ1bmN0aW9uKFxyXG5cdG11dGFibGVfa2V5SW1hZ2VzQnlDYWNoZUtleSwgLy8gcGFzcyBhIG11dGFibGUgSlMgZGljdGlvbmFyeVxyXG5cdHR4X3B1Yl9rZXksXHJcblx0b3V0X2luZGV4LFxyXG5cdHB1YmxpY19hZGRyZXNzLFxyXG5cdHZpZXdfa2V5X19wcml2YXRlLFxyXG5cdHNwZW5kX2tleV9fcHVibGljLFxyXG5cdHNwZW5kX2tleV9fcHJpdmF0ZSxcclxuXHRtb25lcm9fdXRpbHMgLy8gbXVzdCBwYXNzIHRoaXMgc28gdGhpcyBmbiBjYW4gcmVtYWluIHN5bmNocm9ub3VzXHJcbikge1xyXG5cdHZhciBjYWNoZV9pbmRleCA9IHR4X3B1Yl9rZXkgKyBcIjpcIiArIHB1YmxpY19hZGRyZXNzICsgXCI6XCIgKyBvdXRfaW5kZXg7XHJcblx0Y29uc3QgY2FjaGVkX19rZXlfaW1hZ2UgPSBtdXRhYmxlX2tleUltYWdlc0J5Q2FjaGVLZXlbY2FjaGVfaW5kZXhdO1xyXG5cdGlmIChcclxuXHRcdHR5cGVvZiBjYWNoZWRfX2tleV9pbWFnZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxyXG5cdFx0Y2FjaGVkX19rZXlfaW1hZ2UgIT09IG51bGxcclxuXHQpIHtcclxuXHRcdHJldHVybiBjYWNoZWRfX2tleV9pbWFnZTtcclxuXHR9XHJcblx0dmFyIGtleV9pbWFnZSA9IG1vbmVyb191dGlscy5nZW5lcmF0ZV9rZXlfaW1hZ2UoXHJcblx0XHR0eF9wdWJfa2V5LFxyXG5cdFx0dmlld19rZXlfX3ByaXZhdGUsXHJcblx0XHRzcGVuZF9rZXlfX3B1YmxpYyxcclxuXHRcdHNwZW5kX2tleV9fcHJpdmF0ZSxcclxuXHRcdG91dF9pbmRleCxcclxuXHQpO1xyXG5cdC8vIGNhY2hlOlxyXG5cdG11dGFibGVfa2V5SW1hZ2VzQnlDYWNoZUtleVtjYWNoZV9pbmRleF0gPSBrZXlfaW1hZ2U7XHJcblx0Ly9cclxuXHRyZXR1cm4ga2V5X2ltYWdlO1xyXG59O1xyXG5leHBvcnRzLkxhenlfS2V5SW1hZ2UgPSBMYXp5X0tleUltYWdlO1xyXG4vL1xyXG4vL1xyXG4vLyBNYW5hZ2VkIGNhY2hlcyAtIENhbiBiZSB1c2VkIGJ5IGFwcHMgd2hpY2ggY2FuJ3Qgc2VuZCBhIG11dGFibGVfa2V5SW1hZ2VzQnlDYWNoZUtleVxyXG5jb25zdCBfX2dsb2JhbF9tYW5hZ2VkX2tleUltYWdlQ2FjaGVzX2J5X3dhbGxldElkID0ge307XHJcbmZ1bmN0aW9uIF9tYW5hZ2VkS2V5SW1hZ2VDYWNoZVdhbGxldElkRm9yV2FsbGV0V2l0aChwdWJsaWNfYWRkcmVzcykge1xyXG5cdC8vIE5PVEU6IG1ha2luZyB0aGUgYXNzdW1wdGlvbiB0aGF0IHB1YmxpY19hZGRyZXNzIGlzIHVuaXF1ZSBlbm91Z2ggdG8gaWRlbnRpZnkgYSB3YWxsZXQgZm9yIGNhY2hpbmcuLi4uXHJcblx0Ly8gRklYTUU6IHdpdGggc3ViYWRkcmVzc2VzLCBpcyB0aGF0IHN0aWxsIHRoZSBjYXNlPyB3b3VsZCB3ZSBuZWVkIHRvIHNwbGl0IHRoZW0gdXAgYnkgc3ViYWRkciBhbnl3YXk/XHJcblx0aWYgKFxyXG5cdFx0cHVibGljX2FkZHJlc3MgPT0gXCJcIiB8fFxyXG5cdFx0IXB1YmxpY19hZGRyZXNzIHx8XHJcblx0XHR0eXBlb2YgcHVibGljX2FkZHJlc3MgPT0gXCJ1bmRlZmluZWRcIlxyXG5cdCkge1xyXG5cdFx0dGhyb3cgXCJtYW5hZ2VkS2V5SW1hZ2VDYWNoZUlkZW50aWZpZXJGb3JXYWxsZXRXaXRoOiBJbGxlZ2FsIHB1YmxpY19hZGRyZXNzXCI7XHJcblx0fVxyXG5cdHJldHVybiBcIlwiICsgcHVibGljX2FkZHJlc3M7XHJcbn1cclxuY29uc3QgTGF6eV9LZXlJbWFnZUNhY2hlRm9yV2FsbGV0V2l0aCA9IGZ1bmN0aW9uKHB1YmxpY19hZGRyZXNzKSB7XHJcblx0dmFyIGNhY2hlSWQgPSBfbWFuYWdlZEtleUltYWdlQ2FjaGVXYWxsZXRJZEZvcldhbGxldFdpdGgocHVibGljX2FkZHJlc3MpO1xyXG5cdHZhciBjYWNoZSA9IF9fZ2xvYmFsX21hbmFnZWRfa2V5SW1hZ2VDYWNoZXNfYnlfd2FsbGV0SWRbY2FjaGVJZF07XHJcblx0aWYgKHR5cGVvZiBjYWNoZSA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhY2FjaGUpIHtcclxuXHRcdGNhY2hlID0ge307XHJcblx0XHRfX2dsb2JhbF9tYW5hZ2VkX2tleUltYWdlQ2FjaGVzX2J5X3dhbGxldElkW2NhY2hlSWRdID0gY2FjaGU7XHJcblx0fVxyXG5cdHJldHVybiBjYWNoZTtcclxufTtcclxuZXhwb3J0cy5MYXp5X0tleUltYWdlQ2FjaGVGb3JXYWxsZXRXaXRoID0gTGF6eV9LZXlJbWFnZUNhY2hlRm9yV2FsbGV0V2l0aDtcclxuLy9cclxuY29uc3QgRGVsZXRlTWFuYWdlZEtleUltYWdlc0ZvcldhbGxldFdpdGggPSBmdW5jdGlvbihwdWJsaWNfYWRkcmVzcykge1xyXG5cdC8vIElNUE9SVEFOVDogRW5zdXJlIHlvdSBjYWxsIHRoaXMgbWV0aG9kIHdoZW4geW91IHdhbnQgdG8gY2xlYXIgeW91ciB3YWxsZXQgZnJvbVxyXG5cdC8vIG1lbW9yeSBvciBkZWxldGUgaXQsIG9yIGVsc2UgeW91IGNvdWxkIGxlYWsga2V5IGltYWdlcyBhbmQgcHVibGljIGFkZHJlc3Nlcy5cclxuXHRjb25zdCBjYWNoZUlkID0gX21hbmFnZWRLZXlJbWFnZUNhY2hlV2FsbGV0SWRGb3JXYWxsZXRXaXRoKHB1YmxpY19hZGRyZXNzKTtcclxuXHRkZWxldGUgX19nbG9iYWxfbWFuYWdlZF9rZXlJbWFnZUNhY2hlc19ieV93YWxsZXRJZFtjYWNoZUlkXTtcclxuXHQvL1xyXG5cdGNvbnN0IGNhY2hlID0gX19nbG9iYWxfbWFuYWdlZF9rZXlJbWFnZUNhY2hlc19ieV93YWxsZXRJZFtjYWNoZUlkXTtcclxuXHRpZiAodHlwZW9mIGNhY2hlICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcblx0XHR0aHJvdyBcIktleSBpbWFnZSBjYWNoZSBzdGlsbCBleGlzdHMgYWZ0ZXIgZGVsZXRpb25cIjtcclxuXHR9XHJcbn07XHJcbmV4cG9ydHMuRGVsZXRlTWFuYWdlZEtleUltYWdlc0ZvcldhbGxldFdpdGggPSBEZWxldGVNYW5hZ2VkS2V5SW1hZ2VzRm9yV2FsbGV0V2l0aDtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_keyImage_cache_utils.js\n");

/***/ }),

/***/ "./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_paymentID_utils.js":
/*!****************************************************************************************************!*\
  !*** ./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_paymentID_utils.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright (c) 2014-2018, MyMonero.com\r\n//\r\n// All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without modification, are\r\n// permitted provided that the following conditions are met:\r\n//\r\n// 1. Redistributions of source code must retain the above copyright notice, this list of\r\n//\tconditions and the following disclaimer.\r\n//\r\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list\r\n//\tof conditions and the following disclaimer in the documentation and/or other\r\n//\tmaterials provided with the distribution.\r\n//\r\n// 3. Neither the name of the copyright holder nor the names of its contributors may be\r\n//\tused to endorse or promote products derived from this software without specific\r\n//\tprior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY\r\n// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\r\n// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\r\n// THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\r\n// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\r\n// THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n//\r\n\r\n//\r\nfunction IsValidPaymentIDOrNoPaymentID(payment_id__orNil) {\r\n\tif (\r\n\t\tpayment_id__orNil == null ||\r\n\t\tpayment_id__orNil == \"\" ||\r\n\t\ttypeof payment_id__orNil == \"undefined\"\r\n\t) {\r\n\t\treturn true; // no pid\r\n\t}\r\n\tlet payment_id = payment_id__orNil;\r\n\tif (IsValidShortPaymentID(payment_id)) {\r\n\t\treturn true;\r\n\t}\r\n\tif (IsValidLongPaymentID(payment_id)) {\r\n\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\nexports.IsValidPaymentIDOrNoPaymentID = IsValidPaymentIDOrNoPaymentID;\r\n//\r\nfunction IsValidShortPaymentID(payment_id) {\r\n\treturn IsValidPaymentIDOfLength(payment_id, 16);\r\n}\r\nexports.IsValidShortPaymentID = IsValidShortPaymentID;\r\n//\r\nfunction IsValidLongPaymentID(payment_id) {\r\n\treturn IsValidPaymentIDOfLength(payment_id, 64);\r\n}\r\nexports.IsValidLongPaymentID = IsValidLongPaymentID;\r\n//\r\nfunction IsValidPaymentIDOfLength(payment_id, required_length) {\r\n\tif (required_length != 16 && required_length != 64) {\r\n\t\tthrow \"unexpected IsValidPaymentIDOfLength required_length\";\r\n\t}\r\n\tlet payment_id_length = payment_id.length;\r\n\tif (payment_id_length !== required_length) {\r\n\t\t// new encrypted short\r\n\t\treturn false; // invalid length\r\n\t}\r\n\tlet pattern = RegExp(\"^[0-9a-fA-F]{\" + required_length + \"}$\");\r\n\tif (pattern.test(payment_id) != true) {\r\n\t\t// not a valid required_length char pid\r\n\t\treturn false; // then not valid\r\n\t}\r\n\treturn true;\r\n}\r\nexports.IsValidShortPaymentID = IsValidShortPaymentID;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9saWJzL215bW9uZXJvLWFwcC1qcy9sb2NhbF9tb2R1bGVzL215bW9uZXJvX2NvcmVfanMvbW9uZXJvX3V0aWxzL21vbmVyb19wYXltZW50SURfdXRpbHMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9saWJzL215bW9uZXJvLWFwcC1qcy9sb2NhbF9tb2R1bGVzL215bW9uZXJvX2NvcmVfanMvbW9uZXJvX3V0aWxzL21vbmVyb19wYXltZW50SURfdXRpbHMuanM/Yzc4OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTQtMjAxOCwgTXlNb25lcm8uY29tXHJcbi8vXHJcbi8vIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vXHJcbi8vIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIGFyZVxyXG4vLyBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcclxuLy9cclxuLy8gMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3Qgb2ZcclxuLy9cdGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cclxuLy9cclxuLy8gMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3RcclxuLy9cdG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXJcclxuLy9cdG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXHJcbi8vXHJcbi8vIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIGNvcHlyaWdodCBob2xkZXIgbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZVxyXG4vL1x0dXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpY1xyXG4vL1x0cHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxyXG4vL1xyXG4vLyBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkQgQU5ZXHJcbi8vIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRlxyXG4vLyBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTFxyXG4vLyBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCxcclxuLy8gU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLFxyXG4vLyBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcclxuLy8gSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsXHJcbi8vIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRlxyXG4vLyBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXHJcbi8vXHJcblwidXNlIHN0cmljdFwiO1xyXG4vL1xyXG5mdW5jdGlvbiBJc1ZhbGlkUGF5bWVudElET3JOb1BheW1lbnRJRChwYXltZW50X2lkX19vck5pbCkge1xyXG5cdGlmIChcclxuXHRcdHBheW1lbnRfaWRfX29yTmlsID09IG51bGwgfHxcclxuXHRcdHBheW1lbnRfaWRfX29yTmlsID09IFwiXCIgfHxcclxuXHRcdHR5cGVvZiBwYXltZW50X2lkX19vck5pbCA9PSBcInVuZGVmaW5lZFwiXHJcblx0KSB7XHJcblx0XHRyZXR1cm4gdHJ1ZTsgLy8gbm8gcGlkXHJcblx0fVxyXG5cdGxldCBwYXltZW50X2lkID0gcGF5bWVudF9pZF9fb3JOaWw7XHJcblx0aWYgKElzVmFsaWRTaG9ydFBheW1lbnRJRChwYXltZW50X2lkKSkge1xyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fVxyXG5cdGlmIChJc1ZhbGlkTG9uZ1BheW1lbnRJRChwYXltZW50X2lkKSkge1xyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fVxyXG5cdHJldHVybiBmYWxzZTtcclxufVxyXG5leHBvcnRzLklzVmFsaWRQYXltZW50SURPck5vUGF5bWVudElEID0gSXNWYWxpZFBheW1lbnRJRE9yTm9QYXltZW50SUQ7XHJcbi8vXHJcbmZ1bmN0aW9uIElzVmFsaWRTaG9ydFBheW1lbnRJRChwYXltZW50X2lkKSB7XHJcblx0cmV0dXJuIElzVmFsaWRQYXltZW50SURPZkxlbmd0aChwYXltZW50X2lkLCAxNik7XHJcbn1cclxuZXhwb3J0cy5Jc1ZhbGlkU2hvcnRQYXltZW50SUQgPSBJc1ZhbGlkU2hvcnRQYXltZW50SUQ7XHJcbi8vXHJcbmZ1bmN0aW9uIElzVmFsaWRMb25nUGF5bWVudElEKHBheW1lbnRfaWQpIHtcclxuXHRyZXR1cm4gSXNWYWxpZFBheW1lbnRJRE9mTGVuZ3RoKHBheW1lbnRfaWQsIDY0KTtcclxufVxyXG5leHBvcnRzLklzVmFsaWRMb25nUGF5bWVudElEID0gSXNWYWxpZExvbmdQYXltZW50SUQ7XHJcbi8vXHJcbmZ1bmN0aW9uIElzVmFsaWRQYXltZW50SURPZkxlbmd0aChwYXltZW50X2lkLCByZXF1aXJlZF9sZW5ndGgpIHtcclxuXHRpZiAocmVxdWlyZWRfbGVuZ3RoICE9IDE2ICYmIHJlcXVpcmVkX2xlbmd0aCAhPSA2NCkge1xyXG5cdFx0dGhyb3cgXCJ1bmV4cGVjdGVkIElzVmFsaWRQYXltZW50SURPZkxlbmd0aCByZXF1aXJlZF9sZW5ndGhcIjtcclxuXHR9XHJcblx0bGV0IHBheW1lbnRfaWRfbGVuZ3RoID0gcGF5bWVudF9pZC5sZW5ndGg7XHJcblx0aWYgKHBheW1lbnRfaWRfbGVuZ3RoICE9PSByZXF1aXJlZF9sZW5ndGgpIHtcclxuXHRcdC8vIG5ldyBlbmNyeXB0ZWQgc2hvcnRcclxuXHRcdHJldHVybiBmYWxzZTsgLy8gaW52YWxpZCBsZW5ndGhcclxuXHR9XHJcblx0bGV0IHBhdHRlcm4gPSBSZWdFeHAoXCJeWzAtOWEtZkEtRl17XCIgKyByZXF1aXJlZF9sZW5ndGggKyBcIn0kXCIpO1xyXG5cdGlmIChwYXR0ZXJuLnRlc3QocGF5bWVudF9pZCkgIT0gdHJ1ZSkge1xyXG5cdFx0Ly8gbm90IGEgdmFsaWQgcmVxdWlyZWRfbGVuZ3RoIGNoYXIgcGlkXHJcblx0XHRyZXR1cm4gZmFsc2U7IC8vIHRoZW4gbm90IHZhbGlkXHJcblx0fVxyXG5cdHJldHVybiB0cnVlO1xyXG59XHJcbmV4cG9ydHMuSXNWYWxpZFNob3J0UGF5bWVudElEID0gSXNWYWxpZFNob3J0UGF5bWVudElEO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_paymentID_utils.js\n");

/***/ }),

/***/ "./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_requestURI_utils.js":
/*!*****************************************************************************************************!*\
  !*** ./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_requestURI_utils.js ***!
  \*****************************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright (c) 2014-2018, MyMonero.com\r\n//\r\n// All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without modification, are\r\n// permitted provided that the following conditions are met:\r\n//\r\n// 1. Redistributions of source code must retain the above copyright notice, this list of\r\n//\tconditions and the following disclaimer.\r\n//\r\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list\r\n//\tof conditions and the following disclaimer in the documentation and/or other\r\n//\tmaterials provided with the distribution.\r\n//\r\n// 3. Neither the name of the copyright holder nor the names of its contributors may be\r\n//\tused to endorse or promote products derived from this software without specific\r\n//\tprior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY\r\n// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\r\n// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\r\n// THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\r\n// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\r\n// THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n//\r\n\r\n//\r\nconst monero_config = __webpack_require__(/*! ./monero_config */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_config.js\");\r\n//\r\nconst URITypes = {\r\n\taddressAsFirstPathComponent: 1,\r\n\taddressAsAuthority: 2,\r\n};\r\nexports.URITypes = URITypes;\r\n//\r\nfunction New_RequestFunds_URI(args) {\r\n\t// -> String?\r\n\tconst address = args.address;\r\n\tif (!address) {\r\n\t\tthrow \"missing address\";\r\n\t\t// return null\r\n\t}\r\n\tvar mutable_uri = \"\";\r\n\tmutable_uri += monero_config.coinUriPrefix;\r\n\t{\r\n\t\tconst uriType = args.uriType;\r\n\t\tif (uriType === URITypes.addressAsAuthority) {\r\n\t\t\tmutable_uri += \"//\"; // use for inserting a // so data detectors pick it up…\r\n\t\t} else if (uriType === URITypes.addressAsFirstPathComponent) {\r\n\t\t\t// nothing to do\r\n\t\t} else {\r\n\t\t\tthrow \"Illegal args.uriType\";\r\n\t\t}\r\n\t}\r\n\tmutable_uri += address;\r\n\tvar isAppendingParam0 = true;\r\n\tfunction addParam(parameterName, value) {\r\n\t\tif (\r\n\t\t\tvalue == null ||\r\n\t\t\tvalue == \"\" /*important*/ ||\r\n\t\t\ttypeof value === \"undefined\"\r\n\t\t) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar conjunctionStr = \"&\";\r\n\t\tif (isAppendingParam0 === true) {\r\n\t\t\tisAppendingParam0 = false;\r\n\t\t\tconjunctionStr = \"?\";\r\n\t\t}\r\n\t\tmutable_uri += conjunctionStr;\r\n\t\tmutable_uri += parameterName + \"=\" + encodeURIComponent(value);\r\n\t}\r\n\t{\r\n\t\taddParam(\"tx_amount\", args.amount);\r\n\t\tif (\r\n\t\t\t(args.amountCcySymbol || \"\").toLowerCase() !=\r\n\t\t\tmonero_config.coinSymbol.toLowerCase()\r\n\t\t) {\r\n\t\t\taddParam(\"tx_amount_ccy\", args.amountCcySymbol);\r\n\t\t}\r\n\t\taddParam(\"tx_description\", args.description);\r\n\t\taddParam(\"tx_payment_id\", args.payment_id);\r\n\t\taddParam(\"tx_message\", args.message);\r\n\t}\r\n\treturn mutable_uri;\r\n}\r\nexports.New_RequestFunds_URI = New_RequestFunds_URI;\r\n//\r\nfunction New_ParsedPayload_FromPossibleRequestURIString(string, nettype, monero_utils/*pass this so this fn remains sync*/) {\r\n\t// throws; -> {}\r\n\t//\r\n\t// detect no-scheme moneroAddr and possible OA addr - if has no monero: prefix\r\n\tif (string.indexOf(monero_config.coinUriPrefix) !== 0) {\r\n\t\tconst stringHasQMark = string.indexOf(\"?\") !== -1;\r\n\t\tif (stringHasQMark) {\r\n\t\t\t// fairly sure this is correct.. (just an extra failsafe/filter)\r\n\t\t\tthrow \"Unrecognized URI format\";\r\n\t\t}\r\n\t\tlet couldBeOAAddress = string.indexOf(\".\") != -1; // contains period - would be nice to get this from DoesStringContainPeriodChar_excludingAsXMRAddress_qualifyingAsPossibleOAAddress so maybe mymonero_core_js should gain local_modules/OpenAlias\r\n\t\tif (couldBeOAAddress) {\r\n\t\t\treturn {\r\n\t\t\t\taddress: string,\r\n\t\t\t};\r\n\t\t}\r\n\t\tvar address__decode_result;\r\n\t\ttry {\r\n\t\t\taddress__decode_result = monero_utils.decode_address(\r\n\t\t\t\tstring,\r\n\t\t\t\tnettype,\r\n\t\t\t);\r\n\t\t} catch (e) {\r\n\t\t\tthrow \"No Monero request info\";\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// then it looks like a monero address\r\n\t\treturn {\r\n\t\t\taddress: string,\r\n\t\t};\r\n\t}\r\n\tconst uriString = string;\r\n\tconst url = new URL(uriString);\r\n\tconst protocol = url.protocol;\r\n\tif (protocol !== monero_config.coinUriPrefix) {\r\n\t\tthrow \"Request URI has non-Monero protocol\";\r\n\t}\r\n\tvar target_address = url.pathname; // var instead of const as have to finalize it\r\n\t// it seems that if the URL has // in it, pathname will be empty, but host will contain the address instead\r\n\tif (\r\n\t\ttarget_address === \"\" ||\r\n\t\ttypeof target_address === \"undefined\" ||\r\n\t\t!target_address\r\n\t) {\r\n\t\ttarget_address = url.host || url.hostname;\r\n\t}\r\n\tif (target_address.indexOf(\"//\") == 0) {\r\n\t\ttarget_address = target_address.slice(\r\n\t\t\t0 + \"//\".length,\r\n\t\t\ttarget_address.length,\r\n\t\t); // strip prefixing \"//\" in case URL had protocol:// instead of protocol:\r\n\t}\r\n\tconst searchParams = url.searchParams; // needs to be parsed it seems\r\n\t//\r\n\tconst payload = {\r\n\t\taddress: target_address,\r\n\t};\r\n\tconst keyPrefixToTrim = \"tx_\";\r\n\tconst lengthOf_keyPrefixToTrim = keyPrefixToTrim.length;\r\n\tsearchParams.forEach(function(value, key) {\r\n\t\tvar storeAt_key = key;\r\n\t\tif (key.indexOf(keyPrefixToTrim) === 0) {\r\n\t\t\tstoreAt_key = key.slice(lengthOf_keyPrefixToTrim, key.length);\r\n\t\t}\r\n\t\tpayload[\"\" + storeAt_key] = value;\r\n\t});\r\n\t//\r\n\treturn payload;\r\n}\r\nexports.New_ParsedPayload_FromPossibleRequestURIString = New_ParsedPayload_FromPossibleRequestURIString;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_requestURI_utils.js\n");

/***/ }),

/***/ "./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_sendingFunds_utils.js":
/*!*******************************************************************************************************!*\
  !*** ./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_sendingFunds_utils.js ***!
  \*******************************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright (c) 2014-2018, MyMonero.com\r\n//\r\n// All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without modification, are\r\n// permitted provided that the following conditions are met:\r\n//\r\n// 1. Redistributions of source code must retain the above copyright notice, this list of\r\n//\tconditions and the following disclaimer.\r\n//\r\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list\r\n//\tof conditions and the following disclaimer in the documentation and/or other\r\n//\tmaterials provided with the distribution.\r\n//\r\n// 3. Neither the name of the copyright holder nor the names of its contributors may be\r\n//\tused to endorse or promote products derived from this software without specific\r\n//\tprior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY\r\n// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\r\n// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\r\n// THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\r\n// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\r\n// THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n//\r\n\r\n//\r\nconst monero_config = __webpack_require__(/*! ./monero_config */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_config.js\");\r\nconst monero_utils_promise = __webpack_require__(/*! ./monero_utils */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_utils.js\")({})\r\nconst monero_amount_format_utils = __webpack_require__(/*! ./monero_amount_format_utils */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_amount_format_utils.js\");\r\nconst monero_paymentID_utils = __webpack_require__(/*! ./monero_paymentID_utils */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_paymentID_utils.js\");\r\nconst JSBigInt = __webpack_require__(/*! ../cryptonote_utils/biginteger */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/cryptonote_utils/biginteger.js\").BigInteger;\r\n//\r\nconst hostAPI_net_service_utils = __webpack_require__(/*! ../hostAPI/net_service_utils */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/hostAPI/net_service_utils.js\");\r\n//\r\nfunction _mixinToRingsize(mixin) {\r\n\treturn mixin + 1;\r\n}\r\n//\r\nfunction thisFork_minMixin() {\r\n\treturn 10;\r\n}\r\nfunction thisFork_minRingSize() {\r\n\treturn _mixinToRingsize(thisFork_minMixin());\r\n}\r\nexports.thisFork_minMixin = thisFork_minMixin;\r\nexports.thisFork_minRingSize = thisFork_minRingSize;\r\n//\r\nfunction fixedMixin() {\r\n\treturn thisFork_minMixin(); /* using the monero app default to remove MM user identifiers */\r\n}\r\nfunction fixedRingsize() {\r\n\treturn _mixinToRingsize(fixedMixin());\r\n}\r\nexports.fixedMixin = fixedMixin;\r\nexports.fixedRingsize = fixedRingsize;\r\n//\r\n//\r\nfunction default_priority() {\r\n\treturn 1;\r\n} // aka .low\r\nexports.default_priority = default_priority;\r\n//\r\nconst newer_multipliers = [1, 4, 20, 166];\r\nfunction fee_multiplier_for_priority(priority__or0ForDefault) {\r\n\tconst final_priorityInt =\r\n\t\t!priority__or0ForDefault || priority__or0ForDefault == 0\r\n\t\t\t? default_priority()\r\n\t\t\t: priority__or0ForDefault;\r\n\tif (\r\n\t\tfinal_priorityInt <= 0 ||\r\n\t\tfinal_priorityInt > newer_multipliers.length\r\n\t) {\r\n\t\tthrow \"fee_multiplier_for_priority: simple_priority out of bounds\";\r\n\t}\r\n\tconst priority_as_idx = final_priorityInt - 1;\r\n\treturn newer_multipliers[priority_as_idx];\r\n}\r\n//\r\nconst SendFunds_ProcessStep_Code = {\r\n\tfetchingLatestBalance: 1,\r\n\tcalculatingFee: 2,\r\n\tfetchingDecoyOutputs: 3, // may get skipped if 0 mixin\r\n\tconstructingTransaction: 4, // may go back to .calculatingFee\r\n\tsubmittingTransaction: 5,\r\n};\r\nexports.SendFunds_ProcessStep_Code = SendFunds_ProcessStep_Code;\r\nconst SendFunds_ProcessStep_MessageSuffix = {\r\n\t1: \"Fetching latest balance.\",\r\n\t2: \"Calculating fee.\",\r\n\t3: \"Fetching decoy outputs.\",\r\n\t4: \"Constructing transaction.\", // may go back to .calculatingFee\r\n\t5: \"Submitting transaction.\",\r\n};\r\nexports.SendFunds_ProcessStep_MessageSuffix = SendFunds_ProcessStep_MessageSuffix;\r\n//\r\nfunction SendFunds( // TODO: migrate this to take a map of args\r\n\ttarget_address, // currency-ready wallet address, but not an OA address (resolve before calling)\r\n\tnettype,\r\n\tamount_orZeroWhenSweep, // number - value will be ignoring for sweep\r\n\tisSweep_orZeroWhenAmount, // send true to sweep - amount_orZeroWhenSweep will be ignored\r\n\twallet__public_address,\r\n\twallet__private_keys,\r\n\twallet__public_keys,\r\n\thostedMoneroAPIClient, // TODO: possibly factor this dependency\r\n\tpayment_id,\r\n\tsimple_priority,\r\n\tpreSuccess_nonTerminal_statusUpdate_fn, // (_ stepCode: SendFunds_ProcessStep_Code) -> Void\r\n\tsuccess_fn,\r\n\t// success_fn: ( // TODO: to be migrated to args as return obj\r\n\t//\t\tmoneroReady_targetDescription_address?,\r\n\t//\t\tsentAmount?,\r\n\t//\t\tfinal__payment_id?,\r\n\t//\t\ttx_hash?,\r\n\t//\t\ttx_fee?,\r\n\t//\t\ttx_key?,\r\n\t//\t\tmixin?,\r\n\t// )\r\n\tfailWithErr_fn\r\n\t// failWithErr_fn: (\r\n\t//\t\terr\r\n\t// )\r\n) {\r\n\tmonero_utils_promise.then(function(monero_utils)\r\n\t{\r\n\t\tconst mixin = fixedMixin(); // would be nice to eliminate this dependency or grab it from C++\r\n\t\t//\r\n\t\t// some callback trampoline function declarations…\r\n\t\tfunction __trampolineFor_err_withErr(err) {\r\n\t\t\tfailWithErr_fn(err);\r\n\t\t}\r\n\t\tfunction __trampolineFor_err_withStr(errStr) {\r\n\t\t\tconst err = new Error(errStr);\r\n\t\t\tconsole.error(errStr);\r\n\t\t\tfailWithErr_fn(err);\r\n\t\t}\r\n\t\t//\r\n\t\tvar sweeping = isSweep_orZeroWhenAmount === true; // rather than, say, undefined\r\n\t\tvar amount = \"\" + (sweeping ? 0 : amount_orZeroWhenSweep); //TODO just send string\r\n\t\tvar sending_amount; // possibly need this ; here for the JS parser\r\n\t\tif (sweeping) {\r\n\t\t\tsending_amount = 0\r\n\t\t} else {\r\n\t\t\ttry {\r\n\t\t\t\tsending_amount = monero_amount_format_utils.parseMoney(amount);\r\n\t\t\t} catch (e) {\r\n\t\t\t\t__trampolineFor_err_withStr(`Couldn't parse amount ${amount}: ${e}`);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//\r\n\t\t// TODO:\r\n\t\t// const wallet__public_keys = decode_address(from_address, nettype);\r\n\t\t//\r\n\t\tpreSuccess_nonTerminal_statusUpdate_fn(SendFunds_ProcessStep_Code.fetchingLatestBalance);\r\n\t\tvar fee_per_b__string;\r\n\t\tvar unspent_outs; \r\n\t\thostedMoneroAPIClient.UnspentOuts(\r\n\t\t\twallet__public_address,\r\n\t\t\twallet__private_keys.view,\r\n\t\t\twallet__public_keys.spend,\r\n\t\t\twallet__private_keys.spend,\r\n\t\t\tmixin,\r\n\t\t\tsweeping,\r\n\t\t\tfunction(err, returned_unusedOuts, per_byte_fee__string)\r\n\t\t\t{\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\t__trampolineFor_err_withErr(err);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tconsole.log(\"Received dynamic per kb fee\", monero_amount_format_utils.formatMoneySymbol(new JSBigInt(per_byte_fee__string)));\r\n\t\t\t\t{ // save some values for re-enterable function\r\n\t\t\t\t\tunspent_outs = returned_unusedOuts; // TODO: which one should be used? delete the other\r\n\t\t\t\t\tfee_per_b__string = per_byte_fee__string; \r\n\t\t\t\t}\r\n\t\t\t\t__reenterable_constructAndSendTx(\r\n\t\t\t\t\tnull, // for the first try - passedIn_attemptAt_network_minimumFee\r\n\t\t\t\t\t1\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t\tfunction __reenterable_constructAndSendTx(optl__passedIn_attemptAt_fee, constructionAttempt)\r\n\t\t{\r\n\t\t\t// Now we need to establish some values for balance validation and to construct the transaction\r\n\t\t\tpreSuccess_nonTerminal_statusUpdate_fn(SendFunds_ProcessStep_Code.calculatingFee);\r\n\t\t\tvar step1_retVals;\r\n\t\t\ttry {\r\n\t\t\t\tstep1_retVals = monero_utils.send_step1__prepare_params_for_get_decoys(\r\n\t\t\t\t\tsweeping,\r\n\t\t\t\t\tsending_amount.toString(), // must be a string\r\n\t\t\t\t\tfee_per_b__string,\r\n\t\t\t\t\tsimple_priority,\r\n\t\t\t\t\tunspent_outs,\r\n\t\t\t\t\tpayment_id, // may be nil\r\n\t\t\t\t\toptl__passedIn_attemptAt_fee\r\n\t\t\t\t);\r\n\t\t\t} catch (e) {\r\n\t\t\t\tvar errStr;\r\n\t\t\t\tif (e) {\r\n\t\t\t\t\terrStr = typeof e == \"string\" ? e : e.toString();\r\n\t\t\t\t} else {\r\n\t\t\t\t\terrStr = \"Failed to create transaction (step 1) with unknown error.\";\r\n\t\t\t\t}\r\n\t\t\t\t__trampolineFor_err_withStr(errStr);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t//\r\n\t\t\t// prep for step2\r\n\t\t\t// first, grab RandomOuts, then enter step2\r\n\t\t\tpreSuccess_nonTerminal_statusUpdate_fn(SendFunds_ProcessStep_Code.fetchingDecoyOutputs);\r\n\t\t\thostedMoneroAPIClient.RandomOuts(\r\n\t\t\t\tstep1_retVals.using_outs, \r\n\t\t\t\tstep1_retVals.mixin, \r\n\t\t\t\tfunction(err, mix_outs)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t__trampolineFor_err_withErr(err);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t___createTxAndAttemptToSend(mix_outs); \r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t\tfunction ___createTxAndAttemptToSend(mix_outs) \r\n\t\t\t{\r\n\t\t\t\tpreSuccess_nonTerminal_statusUpdate_fn(SendFunds_ProcessStep_Code.constructingTransaction);\r\n\t\t\t\tvar step2_retVals;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tstep2_retVals = monero_utils.send_step2__try_create_transaction(\r\n\t\t\t\t\t\twallet__public_address,\r\n\t\t\t\t\t\twallet__private_keys,\r\n\t\t\t\t\t\ttarget_address,\r\n\t\t\t\t\t\tstep1_retVals.using_outs, // able to read this directly from step1 JSON\r\n\t\t\t\t\t\tmix_outs,\r\n\t\t\t\t\t\tstep1_retVals.mixin,\r\n\t\t\t\t\t\tstep1_retVals.final_total_wo_fee,\r\n\t\t\t\t\t\tstep1_retVals.change_amount,\r\n\t\t\t\t\t\tstep1_retVals.using_fee,\r\n\t\t\t\t\t\tpayment_id, \r\n\t\t\t\t\t\tsimple_priority,\r\n\t\t\t\t\t\tfee_per_b__string,\r\n\t\t\t\t\t\t0, // unlock time\r\n\t\t\t\t\t\tnettype\r\n\t\t\t\t\t);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tvar errStr;\r\n\t\t\t\t\tif (e) {\r\n\t\t\t\t\t\terrStr = typeof e == \"string\" ? e : e.toString();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\terrStr = \"Failed to create transaction (step 2) with unknown error.\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\t__trampolineFor_err_withStr(errStr);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif (typeof step2_retVals.err_msg !== 'undefined' && step2_retVals.err_msg) { // actually not expecting this! but just in case..\r\n\t\t\t\t\t__trampolineFor_err_withStr(step2_retVals.err_msg);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t// if we need a higher fee\r\n\t\t\t\tif (step2_retVals.tx_must_be_reconstructed === true || step2_retVals.tx_must_be_reconstructed === \"true\") { // TODO\r\n\t\t\t\t\tconsole.log(\"Need to reconstruct the tx with enough of a network fee\");\r\n\t\t\t\t\t// this will update status back to .calculatingFee\r\n\t\t\t\t\tif (constructionAttempt > 30) { // just going to avoid an infinite loop here\r\n\t\t\t\t\t\t__trampolineFor_err_withStr(\"Unable to construct a transaction with sufficient fee for unknown reason.\");\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t__reenterable_constructAndSendTx(\r\n\t\t\t\t\t\tstep2_retVals.fee_actually_needed, // we are re-entering the step1->step2 codepath after updating fee_actually_needed\r\n\t\t\t\t\t\tconstructionAttempt + 1\r\n\t\t\t\t\t);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t// Generated with correct fee\r\n\t\t\t\t// console.log(\"tx serialized: \" + step2_retVals.signed_serialized_tx);\r\n\t\t\t\t// console.log(\"Tx hash: \" + step2_retVals.tx_hash);\r\n\t\t\t\t// console.log(\"Tx key: \" + step2_retVals.tx_key);\r\n\t\t\t\t// console.log(\"Successful tx generation; submitting.\");\r\n\t\t\t\t// status: submitting…\r\n\t\t\t\tpreSuccess_nonTerminal_statusUpdate_fn(SendFunds_ProcessStep_Code.submittingTransaction);\r\n\t\t\t\thostedMoneroAPIClient.SubmitSerializedSignedTransaction(\r\n\t\t\t\t\twallet__public_address,\r\n\t\t\t\t\twallet__private_keys.view,\r\n\t\t\t\t\tstep2_retVals.signed_serialized_tx,\r\n\t\t\t\t\tfunction(err) {\r\n\t\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t\t__trampolineFor_err_withStr(\"Something unexpected occurred when submitting your transaction: \" + err);\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tconst final_fee_amount = new JSBigInt(step1_retVals.using_fee)\r\n\t\t\t\t\t\tconst finalTotalWOFee_amount = new JSBigInt(step1_retVals.final_total_wo_fee)\r\n\t\t\t\t\t\tvar final__payment_id = payment_id;\r\n\t\t\t\t\t\tif (final__payment_id === null || typeof final__payment_id == \"undefined\" || !final__payment_id) {\r\n\t\t\t\t\t\t\tconst decoded  = monero_utils.decode_address(target_address, nettype);\r\n\t\t\t\t\t\t\tif (decoded.intPaymentId && typeof decoded.intPaymentId !== 'undefined') {\r\n\t\t\t\t\t\t\t\tfinal__payment_id = decoded.intPaymentId // just preserving original return value - this retVal can eventually be removed\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsuccess_fn( // TODO: port this to returning a dictionary\r\n\t\t\t\t\t\t\ttarget_address, // TODO: remove this\r\n\t\t\t\t\t\t\tfinalTotalWOFee_amount.add(final_fee_amount), // total sent\r\n\t\t\t\t\t\t\tfinal__payment_id, \r\n\t\t\t\t\t\t\tstep2_retVals.tx_hash,\r\n\t\t\t\t\t\t\tfinal_fee_amount,\r\n\t\t\t\t\t\t\tstep2_retVals.tx_key,\r\n\t\t\t\t\t\t\tparseInt(step1_retVals.mixin)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n}\r\nexports.SendFunds = SendFunds;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_sendingFunds_utils.js\n");

/***/ }),

/***/ "./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_txParsing_utils.js":
/*!****************************************************************************************************!*\
  !*** ./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_txParsing_utils.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("// Copyright (c) 2014-2018, MyMonero.com\r\n//\r\n// All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without modification, are\r\n// permitted provided that the following conditions are met:\r\n//\r\n// 1. Redistributions of source code must retain the above copyright notice, this list of\r\n//\tconditions and the following disclaimer.\r\n//\r\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list\r\n//\tof conditions and the following disclaimer in the documentation and/or other\r\n//\tmaterials provided with the distribution.\r\n//\r\n// 3. Neither the name of the copyright holder nor the names of its contributors may be\r\n//\tused to endorse or promote products derived from this software without specific\r\n//\tprior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY\r\n// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\r\n// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\r\n// THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\r\n// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\r\n// THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n//\r\n\r\n//\r\nconst monero_config = __webpack_require__(/*! ./monero_config */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_config.js\");\r\nconst moment = __webpack_require__(/*! ../cryptonote_utils/moment */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/cryptonote_utils/moment.js\")\r\n//\r\nfunction IsTransactionConfirmed(tx, blockchain_height) \r\n{\r\n\t// TODO: check tx.mempool here?\r\n\tif (tx.height === null || typeof tx.height == 'undefined') {\r\n\t\treturn false // supposing it hasn't made it into a block yet\r\n\t}\r\n\treturn blockchain_height - tx.height > monero_config.txMinConfirms;\r\n}\r\nexports.IsTransactionConfirmed = IsTransactionConfirmed;\r\n//\r\nfunction IsTransactionUnlocked(tx, blockchain_height) {\r\n\tconst unlock_time = tx.unlock_time || 0;\r\n\tif (!monero_config.maxBlockNumber) {\r\n\t\tthrow \"Max block number is not set in config!\";\r\n\t}\r\n\tif (unlock_time < monero_config.maxBlockNumber) {\r\n\t\t// unlock time is block height\r\n\t\treturn blockchain_height >= unlock_time;\r\n\t} else {\r\n\t\t// unlock time is timestamp\r\n\t\tvar current_time = Math.round(new Date().getTime() / 1000);\r\n\t\treturn current_time >= unlock_time;\r\n\t}\r\n}\r\nexports.IsTransactionUnlocked = IsTransactionUnlocked;\r\n//\r\nfunction TransactionLockedReason(tx, blockchain_height)\r\n{\r\n\tconst unlock_time = tx.unlock_time || 0;\r\n\tif (unlock_time < monero_config.maxBlockNumber) {\r\n\t\t// unlock time is block height\r\n\t\tvar numBlocks = unlock_time - blockchain_height;\r\n\t\tif (numBlocks <= 0) {\r\n\t\t\treturn \"Transaction is unlocked\";\r\n\t\t}\r\n\t\tvar unlock_prediction = moment().add(\r\n\t\t\tnumBlocks * monero_config.avgBlockTime,\r\n\t\t\t\"seconds\"\r\n\t\t);\r\n\t\treturn (\r\n\t\t\t\"Will be unlocked in \" +\r\n\t\t\tnumBlocks +\r\n\t\t\t\" blocks, ~\" +\r\n\t\t\tunlock_prediction.fromNow(true) +\r\n\t\t\t\", \" +\r\n\t\t\tunlock_prediction.calendar() +\r\n\t\t\t\"\"\r\n\t\t);\r\n\t} else {\r\n\t\t// unlock time is timestamp\r\n\t\tvar current_time = Math.round(new Date().getTime() / 1000);\r\n\t\tvar time_difference = unlock_time - current_time;\r\n\t\tif (time_difference <= 0) {\r\n\t\t\treturn \"Transaction is unlocked\";\r\n\t\t}\r\n\t\tvar unlock_moment = moment(unlock_time * 1000);\r\n\t\treturn (\r\n\t\t\t\"Will be unlocked \" +\r\n\t\t\tunlock_moment.fromNow() +\r\n\t\t\t\", \" +\r\n\t\t\tunlock_moment.calendar()\r\n\t\t);\r\n\t}\r\n}\r\nexports.TransactionLockedReason = TransactionLockedReason;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9saWJzL215bW9uZXJvLWFwcC1qcy9sb2NhbF9tb2R1bGVzL215bW9uZXJvX2NvcmVfanMvbW9uZXJvX3V0aWxzL21vbmVyb190eFBhcnNpbmdfdXRpbHMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9saWJzL215bW9uZXJvLWFwcC1qcy9sb2NhbF9tb2R1bGVzL215bW9uZXJvX2NvcmVfanMvbW9uZXJvX3V0aWxzL21vbmVyb190eFBhcnNpbmdfdXRpbHMuanM/YWQ4ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTQtMjAxOCwgTXlNb25lcm8uY29tXHJcbi8vXHJcbi8vIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vXHJcbi8vIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIGFyZVxyXG4vLyBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcclxuLy9cclxuLy8gMS4gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3Qgb2ZcclxuLy9cdGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cclxuLy9cclxuLy8gMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3RcclxuLy9cdG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXJcclxuLy9cdG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXHJcbi8vXHJcbi8vIDMuIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIGNvcHlyaWdodCBob2xkZXIgbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzIG1heSBiZVxyXG4vL1x0dXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpY1xyXG4vL1x0cHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxyXG4vL1xyXG4vLyBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkQgQU5ZXHJcbi8vIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRlxyXG4vLyBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTFxyXG4vLyBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCxcclxuLy8gU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLFxyXG4vLyBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcclxuLy8gSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsXHJcbi8vIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRlxyXG4vLyBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXHJcbi8vXHJcblwidXNlIHN0cmljdFwiO1xyXG4vL1xyXG5jb25zdCBtb25lcm9fY29uZmlnID0gcmVxdWlyZShcIi4vbW9uZXJvX2NvbmZpZ1wiKTtcclxuY29uc3QgbW9tZW50ID0gcmVxdWlyZShcIi4uL2NyeXB0b25vdGVfdXRpbHMvbW9tZW50XCIpXHJcbi8vXHJcbmZ1bmN0aW9uIElzVHJhbnNhY3Rpb25Db25maXJtZWQodHgsIGJsb2NrY2hhaW5faGVpZ2h0KSBcclxue1xyXG5cdC8vIFRPRE86IGNoZWNrIHR4Lm1lbXBvb2wgaGVyZT9cclxuXHRpZiAodHguaGVpZ2h0ID09PSBudWxsIHx8IHR5cGVvZiB0eC5oZWlnaHQgPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdHJldHVybiBmYWxzZSAvLyBzdXBwb3NpbmcgaXQgaGFzbid0IG1hZGUgaXQgaW50byBhIGJsb2NrIHlldFxyXG5cdH1cclxuXHRyZXR1cm4gYmxvY2tjaGFpbl9oZWlnaHQgLSB0eC5oZWlnaHQgPiBtb25lcm9fY29uZmlnLnR4TWluQ29uZmlybXM7XHJcbn1cclxuZXhwb3J0cy5Jc1RyYW5zYWN0aW9uQ29uZmlybWVkID0gSXNUcmFuc2FjdGlvbkNvbmZpcm1lZDtcclxuLy9cclxuZnVuY3Rpb24gSXNUcmFuc2FjdGlvblVubG9ja2VkKHR4LCBibG9ja2NoYWluX2hlaWdodCkge1xyXG5cdGNvbnN0IHVubG9ja190aW1lID0gdHgudW5sb2NrX3RpbWUgfHwgMDtcclxuXHRpZiAoIW1vbmVyb19jb25maWcubWF4QmxvY2tOdW1iZXIpIHtcclxuXHRcdHRocm93IFwiTWF4IGJsb2NrIG51bWJlciBpcyBub3Qgc2V0IGluIGNvbmZpZyFcIjtcclxuXHR9XHJcblx0aWYgKHVubG9ja190aW1lIDwgbW9uZXJvX2NvbmZpZy5tYXhCbG9ja051bWJlcikge1xyXG5cdFx0Ly8gdW5sb2NrIHRpbWUgaXMgYmxvY2sgaGVpZ2h0XHJcblx0XHRyZXR1cm4gYmxvY2tjaGFpbl9oZWlnaHQgPj0gdW5sb2NrX3RpbWU7XHJcblx0fSBlbHNlIHtcclxuXHRcdC8vIHVubG9jayB0aW1lIGlzIHRpbWVzdGFtcFxyXG5cdFx0dmFyIGN1cnJlbnRfdGltZSA9IE1hdGgucm91bmQobmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwKTtcclxuXHRcdHJldHVybiBjdXJyZW50X3RpbWUgPj0gdW5sb2NrX3RpbWU7XHJcblx0fVxyXG59XHJcbmV4cG9ydHMuSXNUcmFuc2FjdGlvblVubG9ja2VkID0gSXNUcmFuc2FjdGlvblVubG9ja2VkO1xyXG4vL1xyXG5mdW5jdGlvbiBUcmFuc2FjdGlvbkxvY2tlZFJlYXNvbih0eCwgYmxvY2tjaGFpbl9oZWlnaHQpXHJcbntcclxuXHRjb25zdCB1bmxvY2tfdGltZSA9IHR4LnVubG9ja190aW1lIHx8IDA7XHJcblx0aWYgKHVubG9ja190aW1lIDwgbW9uZXJvX2NvbmZpZy5tYXhCbG9ja051bWJlcikge1xyXG5cdFx0Ly8gdW5sb2NrIHRpbWUgaXMgYmxvY2sgaGVpZ2h0XHJcblx0XHR2YXIgbnVtQmxvY2tzID0gdW5sb2NrX3RpbWUgLSBibG9ja2NoYWluX2hlaWdodDtcclxuXHRcdGlmIChudW1CbG9ja3MgPD0gMCkge1xyXG5cdFx0XHRyZXR1cm4gXCJUcmFuc2FjdGlvbiBpcyB1bmxvY2tlZFwiO1xyXG5cdFx0fVxyXG5cdFx0dmFyIHVubG9ja19wcmVkaWN0aW9uID0gbW9tZW50KCkuYWRkKFxyXG5cdFx0XHRudW1CbG9ja3MgKiBtb25lcm9fY29uZmlnLmF2Z0Jsb2NrVGltZSxcclxuXHRcdFx0XCJzZWNvbmRzXCJcclxuXHRcdCk7XHJcblx0XHRyZXR1cm4gKFxyXG5cdFx0XHRcIldpbGwgYmUgdW5sb2NrZWQgaW4gXCIgK1xyXG5cdFx0XHRudW1CbG9ja3MgK1xyXG5cdFx0XHRcIiBibG9ja3MsIH5cIiArXHJcblx0XHRcdHVubG9ja19wcmVkaWN0aW9uLmZyb21Ob3codHJ1ZSkgK1xyXG5cdFx0XHRcIiwgXCIgK1xyXG5cdFx0XHR1bmxvY2tfcHJlZGljdGlvbi5jYWxlbmRhcigpICtcclxuXHRcdFx0XCJcIlxyXG5cdFx0KTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0Ly8gdW5sb2NrIHRpbWUgaXMgdGltZXN0YW1wXHJcblx0XHR2YXIgY3VycmVudF90aW1lID0gTWF0aC5yb3VuZChuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDEwMDApO1xyXG5cdFx0dmFyIHRpbWVfZGlmZmVyZW5jZSA9IHVubG9ja190aW1lIC0gY3VycmVudF90aW1lO1xyXG5cdFx0aWYgKHRpbWVfZGlmZmVyZW5jZSA8PSAwKSB7XHJcblx0XHRcdHJldHVybiBcIlRyYW5zYWN0aW9uIGlzIHVubG9ja2VkXCI7XHJcblx0XHR9XHJcblx0XHR2YXIgdW5sb2NrX21vbWVudCA9IG1vbWVudCh1bmxvY2tfdGltZSAqIDEwMDApO1xyXG5cdFx0cmV0dXJuIChcclxuXHRcdFx0XCJXaWxsIGJlIHVubG9ja2VkIFwiICtcclxuXHRcdFx0dW5sb2NrX21vbWVudC5mcm9tTm93KCkgK1xyXG5cdFx0XHRcIiwgXCIgK1xyXG5cdFx0XHR1bmxvY2tfbW9tZW50LmNhbGVuZGFyKClcclxuXHRcdCk7XHJcblx0fVxyXG59XHJcbmV4cG9ydHMuVHJhbnNhY3Rpb25Mb2NrZWRSZWFzb24gPSBUcmFuc2FjdGlvbkxvY2tlZFJlYXNvbjtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_txParsing_utils.js\n");

/***/ }),

/***/ "./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_utils.js":
/*!******************************************************************************************!*\
  !*** ./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_utils.js ***!
  \******************************************************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {// Copyright (c) 2014-2018, MyMonero.com\r\n//\r\n// All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without modification, are\r\n// permitted provided that the following conditions are met:\r\n//\r\n// 1. Redistributions of source code must retain the above copyright notice, this list of\r\n//\tconditions and the following disclaimer.\r\n//\r\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list\r\n//\tof conditions and the following disclaimer in the documentation and/or other\r\n//\tmaterials provided with the distribution.\r\n//\r\n// 3. Neither the name of the copyright holder nor the names of its contributors may be\r\n//\tused to endorse or promote products derived from this software without specific\r\n//\tprior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY\r\n// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\r\n// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL\r\n// THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\r\n// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\r\n// THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n//\r\n\r\n//\r\nconst ENVIRONMENT_IS_WEB = typeof window===\"object\";\r\nconst ENVIRONMENT_IS_WORKER = typeof importScripts===\"function\";\r\nconst ENVIRONMENT_IS_NODE = typeof process===\"object\" && process.browser !== true && \"function\"===\"function\" && ENVIRONMENT_IS_WORKER == false; // we want this to be true for Electron but not for a WebView\r\nconst wants_electronRemote = (ENVIRONMENT_IS_NODE&&ENVIRONMENT_IS_WEB)/*this may become insufficient*/\r\n\t|| (typeof window !== 'undefined' && window.IsElectronRendererProcess == true);\r\n//\r\nvar use_asmjs = false;\r\nif (ENVIRONMENT_IS_WEB) {\r\n\tvar hasWebAssembly = false\r\n\ttry {\r\n\t\tif (typeof WebAssembly === \"object\" && typeof WebAssembly.instantiate === \"function\") {\r\n\t\t\tconst module = new WebAssembly.Module(Uint8Array.of(0x0, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00));\r\n\t\t\tif (module instanceof WebAssembly.Module) {\r\n\t\t\t\tvar isInstance = new WebAssembly.Instance(module) instanceof WebAssembly.Instance;\r\n\t\t\t\tif (isInstance) {\r\n\t\t\t\t\t// TODO: add ios 11 mobile safari bug check to hasWebAssembly\r\n\t\t\t\t}\r\n\t\t\t\t// until then…\r\n\t\t\t\thasWebAssembly = isInstance\r\n\t\t\t}\r\n\t\t}\r\n\t} catch (e) {\r\n\t\t// avoiding empty block statement warning..\r\n\t\thasWebAssembly = false // to be clear\r\n\t}\r\n\tuse_asmjs = hasWebAssembly != true\r\n}\r\nconsole.log(\"Using wasm: \", !use_asmjs)\r\n//\r\nconst fn_names = __webpack_require__(/*! ./__bridged_fns_spec */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/__bridged_fns_spec.js\").bridgedFn_names;\r\nconst moneroUtils_promise_fn = function(options)\r\n{\r\n\toptions = options || {}\r\n\t//\r\n\treturn new Promise(function(resolve, reject)\r\n\t{\r\n\t\tfunction _didLoad(coreBridge_instance)\r\n\t\t{\r\n\t\t\tif (coreBridge_instance == null) {\r\n\t\t\t\tthrow \"Unable to make coreBridge_instance\"\r\n\t\t\t}\r\n\t\t\tconst local_fns = {};\r\n\t\t\tfor (const i in fn_names) {\r\n\t\t\t\tconst name = fn_names[i]\r\n\t\t\t\tlocal_fns[name] = function()\r\n\t\t\t\t{\r\n\t\t\t\t\tconst retVal = coreBridge_instance[name].apply(coreBridge_instance, arguments); // called on the cached value\r\n\t\t\t\t\tif (typeof retVal === \"object\") {\r\n\t\t\t\t\t\tconst err_msg = retVal.err_msg\r\n\t\t\t\t\t\tif (typeof err_msg !== 'undefined' && err_msg) {\r\n\t\t\t\t\t\t\tthrow err_msg; // because we can't throw from electron remote w/o killing fn call\r\n\t\t\t\t\t\t\t// ... and because parsing out this err_msg everywhere is sorta inefficient\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn retVal;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlocal_fns.Module = coreBridge_instance.Module;\r\n\t\t\tresolve(local_fns);\r\n\t\t}\r\n\t\tif (wants_electronRemote) {\r\n\t\t\t// Require file again except on the main process ...\r\n\t\t\t// this avoids a host of issues running wasm on the renderer side, \r\n\t\t\t// for right now until we can load such files raw w/o unsafe-eval\r\n\t\t\t// script-src CSP. makes calls synchronous. if that is a perf problem \r\n\t\t\t// we can make API async.\r\n\t\t\t// \r\n\t\t\t// Resolves relative to the entrypoint of the main process.\r\n\t\t\tconst remoteModule = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module 'electron'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())).remote.require(\r\n\t\t\t\t\"../mymonero_core_js/monero_utils/__IPCSafe_remote_monero_utils\"\r\n\t\t\t);\r\n\t\t\t// Oftentimes this will be ready right away.. somehow.. but just in case.. the readiness\r\n\t\t\t// state promise behavior should be preserved by the following codepath...\r\n\t\t\tvar _try;\r\n\t\t\tfunction __retryAfter(attemptN)\r\n\t\t\t{\r\n\t\t\t\tconsole.warn(\"Checking remote module readiness again after a few ms...\")\r\n\t\t\t\tsetTimeout(function()\r\n\t\t\t\t{\r\n\t\t\t\t\t_try(attemptN + 1)\r\n\t\t\t\t}, 30)\r\n\t\t\t}\r\n\t\t\t_try = function(attemptN)\r\n\t\t\t{\r\n\t\t\t\tif (attemptN > 10000) {\r\n\t\t\t\t\tthrow \"Expected remote module to be ready\"\r\n\t\t\t\t}\r\n\t\t\t\tif (remoteModule.isReady) {\r\n\t\t\t\t\t_didLoad(remoteModule);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t__retryAfter(attemptN)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t_try(0)\r\n\t\t} else {\r\n\t\t\tconst coreBridgeLoading_promise = __webpack_require__(/*! ./MyMoneroCoreBridge */ \"./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/MyMoneroCoreBridge.js\")({ asmjs: use_asmjs });\r\n\t\t\tcoreBridgeLoading_promise.catch(function(e)\r\n\t\t\t{\r\n\t\t\t\tconsole.error(\"Error: \", e);\r\n\t\t\t\t// this may be insufficient… being able to throw would be nice\r\n\t\t\t\tif (reject) {\r\n\t\t\t\t\treject(e)\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow \"Promise passed no reject function to monero_utils load fn\"\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tcoreBridgeLoading_promise.then(_didLoad);\r\n\t\t}\r\n\t});\r\n}\r\n//\r\n//\r\n// Since we actually are constructing bridge functions we technically have the export ready \r\n// synchronously but that would lose the ability to wait until the core bridge is actually ready.\r\n//\r\n// TODO: in future, possibly return function which takes options instead to support better env.\r\n//\r\nmodule.exports = moneroUtils_promise_fn;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../node_modules/process/browser.js */ \"./node_modules/process/browser.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./libs/mymonero-app-js/local_modules/mymonero_core_js/monero_utils/monero_utils.js\n");

/***/ }),

/***/ "./node_modules/async/dist/async.js":
/*!******************************************!*\
  !*** ./node_modules/async/dist/async.js ***!
  \******************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

eval("// empty (null-loader)//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXN5bmMvZGlzdC9hc3luYy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hc3luYy9kaXN0L2FzeW5jLmpzPzkzOGQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZW1wdHkgKG51bGwtbG9hZGVyKSJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/async/dist/async.js\n");

/***/ }),

/***/ "./node_modules/bignumber.js/bignumber.js":
/*!************************************************!*\
  !*** ./node_modules/bignumber.js/bignumber.js ***!
  \************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;;(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v8.0.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * n {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of n. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(n, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor usage without new.\r\n      if (!(x instanceof BigNumber)) {\r\n\r\n        // Don't throw on constructor call without new (#81).\r\n        // '[BigNumber Error] Constructor call without new: {n}'\r\n        //throw Error(bignumberError + ' Constructor call without new: ' + n);\r\n        return new BigNumber(n, b);\r\n      }\r\n\r\n      if (b == null) {\r\n\r\n        // Duplicate.\r\n        if (n instanceof BigNumber) {\r\n          x.s = n.s;\r\n          x.e = n.e;\r\n          x.c = (n = n.c) ? n.slice() : n;\r\n          return;\r\n        }\r\n\r\n        isNum = typeof n == 'number';\r\n\r\n        if (isNum && n * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / n < 0 ? (n = -n, -1) : 1;\r\n\r\n          // Faster path for integers.\r\n          if (n === ~~n) {\r\n            for (e = 0, i = n; i >= 10; i /= 10, e++);\r\n            x.e = e;\r\n            x.c = [n];\r\n            return;\r\n          }\r\n\r\n          str = String(n);\r\n        } else {\r\n          str = String(n);\r\n          if (!isNumeric.test(str)) return parseNumeric(x, str, isNum);\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n        str = String(n);\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(n instanceof BigNumber ? n : str);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        isNum = typeof n == 'number';\r\n\r\n        if (isNum) {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (n * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + n);\r\n          }\r\n\r\n          // Prevent later check for length on converted number.\r\n          isNum = false;\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(n), isNum, b);\r\n          }\r\n        }\r\n\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      str = str.slice(i, ++len);\r\n\r\n      if (str) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * n));\r\n        }\r\n\r\n        e = e - i - 1;\r\n\r\n         // Overflow?\r\n        if (e > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            str = str.slice(i);\r\n            i = LOG_BASE - str.length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if only one character,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.$|[+-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * v {any}\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      return v instanceof BigNumber || v && v._isBigNumber === true || false;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && ne <= TO_EXP_NEG\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n          x.c = x.e = null;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.c = x.e = x.s = null;\r\n        }\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '1e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        str = coeffToString(n.c);\r\n\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(str, e)\r\n           : toFixedPoint(str, e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(str, e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol') {\r\n      P[Symbol.toStringTag] = 'BigNumber';\r\n      // Node.js v10.12.0+\r\n      P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n    }\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== (n < 0 ? mathceil(n) : mathfloor(n))) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (true) {\r\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () { return BigNumber; }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else {}\r\n})(this);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/bignumber.js/bignumber.js\n");

/***/ }),

/***/ "./node_modules/for-each/index.js":
/*!****************************************!*\
  !*** ./node_modules/for-each/index.js ***!
  \****************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar isCallable = __webpack_require__(/*! is-callable */ \"./node_modules/is-callable/index.js\");\n\nvar toStr = Object.prototype.toString;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar forEachArray = function forEachArray(array, iterator, receiver) {\n    for (var i = 0, len = array.length; i < len; i++) {\n        if (hasOwnProperty.call(array, i)) {\n            if (receiver == null) {\n                iterator(array[i], i, array);\n            } else {\n                iterator.call(receiver, array[i], i, array);\n            }\n        }\n    }\n};\n\nvar forEachString = function forEachString(string, iterator, receiver) {\n    for (var i = 0, len = string.length; i < len; i++) {\n        // no such thing as a sparse string.\n        if (receiver == null) {\n            iterator(string.charAt(i), i, string);\n        } else {\n            iterator.call(receiver, string.charAt(i), i, string);\n        }\n    }\n};\n\nvar forEachObject = function forEachObject(object, iterator, receiver) {\n    for (var k in object) {\n        if (hasOwnProperty.call(object, k)) {\n            if (receiver == null) {\n                iterator(object[k], k, object);\n            } else {\n                iterator.call(receiver, object[k], k, object);\n            }\n        }\n    }\n};\n\nvar forEach = function forEach(list, iterator, thisArg) {\n    if (!isCallable(iterator)) {\n        throw new TypeError('iterator must be a function');\n    }\n\n    var receiver;\n    if (arguments.length >= 3) {\n        receiver = thisArg;\n    }\n\n    if (toStr.call(list) === '[object Array]') {\n        forEachArray(list, iterator, receiver);\n    } else if (typeof list === 'string') {\n        forEachString(list, iterator, receiver);\n    } else {\n        forEachObject(list, iterator, receiver);\n    }\n};\n\nmodule.exports = forEach;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZm9yLWVhY2gvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZm9yLWVhY2gvaW5kZXguanM/ZDAyNCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnaXMtY2FsbGFibGUnKTtcblxudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBmb3JFYWNoQXJyYXkgPSBmdW5jdGlvbiBmb3JFYWNoQXJyYXkoYXJyYXksIGl0ZXJhdG9yLCByZWNlaXZlcikge1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcnJheS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChhcnJheSwgaSkpIHtcbiAgICAgICAgICAgIGlmIChyZWNlaXZlciA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaXRlcmF0b3IoYXJyYXlbaV0sIGksIGFycmF5KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaXRlcmF0b3IuY2FsbChyZWNlaXZlciwgYXJyYXlbaV0sIGksIGFycmF5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5cbnZhciBmb3JFYWNoU3RyaW5nID0gZnVuY3Rpb24gZm9yRWFjaFN0cmluZyhzdHJpbmcsIGl0ZXJhdG9yLCByZWNlaXZlcikge1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzdHJpbmcubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgLy8gbm8gc3VjaCB0aGluZyBhcyBhIHNwYXJzZSBzdHJpbmcuXG4gICAgICAgIGlmIChyZWNlaXZlciA9PSBudWxsKSB7XG4gICAgICAgICAgICBpdGVyYXRvcihzdHJpbmcuY2hhckF0KGkpLCBpLCBzdHJpbmcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaXRlcmF0b3IuY2FsbChyZWNlaXZlciwgc3RyaW5nLmNoYXJBdChpKSwgaSwgc3RyaW5nKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbnZhciBmb3JFYWNoT2JqZWN0ID0gZnVuY3Rpb24gZm9yRWFjaE9iamVjdChvYmplY3QsIGl0ZXJhdG9yLCByZWNlaXZlcikge1xuICAgIGZvciAodmFyIGsgaW4gb2JqZWN0KSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgaykpIHtcbiAgICAgICAgICAgIGlmIChyZWNlaXZlciA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaXRlcmF0b3Iob2JqZWN0W2tdLCBrLCBvYmplY3QpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpdGVyYXRvci5jYWxsKHJlY2VpdmVyLCBvYmplY3Rba10sIGssIG9iamVjdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG52YXIgZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2gobGlzdCwgaXRlcmF0b3IsIHRoaXNBcmcpIHtcbiAgICBpZiAoIWlzQ2FsbGFibGUoaXRlcmF0b3IpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2l0ZXJhdG9yIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgIH1cblxuICAgIHZhciByZWNlaXZlcjtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAzKSB7XG4gICAgICAgIHJlY2VpdmVyID0gdGhpc0FyZztcbiAgICB9XG5cbiAgICBpZiAodG9TdHIuY2FsbChsaXN0KSA9PT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgICBmb3JFYWNoQXJyYXkobGlzdCwgaXRlcmF0b3IsIHJlY2VpdmVyKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBsaXN0ID09PSAnc3RyaW5nJykge1xuICAgICAgICBmb3JFYWNoU3RyaW5nKGxpc3QsIGl0ZXJhdG9yLCByZWNlaXZlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZm9yRWFjaE9iamVjdChsaXN0LCBpdGVyYXRvciwgcmVjZWl2ZXIpO1xuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZm9yRWFjaDtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/for-each/index.js\n");

/***/ }),

/***/ "./node_modules/global/window.js":
/*!***************************************!*\
  !*** ./node_modules/global/window.js ***!
  \***************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var win;\n\nif (typeof window !== \"undefined\") {\n    win = window;\n} else if (typeof global !== \"undefined\") {\n    win = global;\n} else if (typeof self !== \"undefined\"){\n    win = self;\n} else {\n    win = {};\n}\n\nmodule.exports = win;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZ2xvYmFsL3dpbmRvdy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9nbG9iYWwvd2luZG93LmpzP2JlMDkiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHdpbjtcblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB3aW4gPSB3aW5kb3c7XG59IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB3aW4gPSBnbG9iYWw7XG59IGVsc2UgaWYgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiKXtcbiAgICB3aW4gPSBzZWxmO1xufSBlbHNlIHtcbiAgICB3aW4gPSB7fTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3aW47XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/global/window.js\n");

/***/ }),

/***/ "./node_modules/html5-fs/src/api.js":
/*!******************************************!*\
  !*** ./node_modules/html5-fs/src/api.js ***!
  \******************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./utils */ \"./node_modules/html5-fs/src/utils.js\")\n  , pathm = __webpack_require__(/*! path */ \"./node_modules/path-browserify/index.js\")\n  , fs = __webpack_require__(/*! ./fileSystem */ \"./node_modules/html5-fs/src/fileSystem.js\");\n\nvar wrapSuccess = utils.wrapSuccess\n  , wrapFail = utils.wrapFail;\n\nexports.getFsInstance = fs.getInstance;\n\nexports.appendFile = function(path, data, callback) {\n  fs.writeFile(path, data, callback, true);\n};\n\n\nexports.writeFile = function(path, data, callback) {\n  fs.writeFile(path, data, callback, false);\n};\n\n\nexports.readFile = function(path, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {\n      encoding: 'utf8'\n    };\n  }\n\n  var success = wrapSuccess(callback)\n    , fail = wrapFail(callback);\n\n  fs.getFile(path, function(err, fileEntry) {\n    fileEntry.file(function(file) {\n      var reader = new FileReader();\n\n      reader.onloadend = function(evt) {\n        success(evt.target.result);\n      };\n\n      reader.onerror = function(err) {\n        fail(err);\n      };\n\n      if (opts.encoding === 'utf8') {\n        reader.readAsText(file);\n      } else {\n        reader.readAsDataURL(file);\n      }\n    }, fail);\n  });\n};\n\n\nexports.unlink = function(path, callback) {\n  var success = wrapSuccess(callback)\n    , fail = wrapFail(callback);\n\n  fs.getFile(path, function(err, file) {\n    if (err) {\n      fail(err);\n    } else {\n      file.remove(success, fail);\n    }\n  });\n};\n\n\nexports.readdir = function(path, callback) {\n  var success = wrapSuccess(callback)\n    , fail = wrapFail(callback);\n\n  fs.getDirectory(path, function(err, dirEntry) {\n    if (err) {\n      fail(err);\n    } else {\n      var directoryReader = dirEntry.createReader();\n      directoryReader.readEntries(success, fail);\n    }\n  });\n};\n\n\nexports.mkdir = function(path, callback) {\n  var newFolderName = pathm.basename(path)\n    , basePath = pathm.dirname(path)\n    , success = utils.wrapSuccess(callback)\n    , fail = utils.wrapFail(callback)\n    , opts = {\n      create: true,\n      exclusive: true\n    };\n\n  if (basePath === '.') {\n    fs.getDirectory(newFolderName, opts, callback);\n  } else {\n    fs.getDirectory(basePath, function (err, dir) {\n      if (err) {\n        callback(err, null);\n      } else {\n        dir.getDirectory(newFolderName, opts, success, fail);\n      }\n    });\n  }\n};\n\n\n/**\n * Remove a directory.\n * The FileSystem API expects directories to be empty but returns a\n * non-informative error on Android and possibly iOS so we check here\n * to ensure users know why directory deletes might fail.\n * @param  {String}   path\n * @param  {Function} callback\n */\nexports.rmdir = function(path, callback) {\n  var success = wrapSuccess(callback)\n    , fail = wrapFail(callback);\n\n  this.readdir(path, function(err, list) {\n    if (err) {\n      fail(err);\n    } else if (list && list.length > 0) {\n      fail('ENOTEMPTY: Directory must be empty');\n    } else {\n      fs.getDirectory(path, function(err, dirEntry) {\n        if (err) {\n          fail(err);\n        } else {\n          dirEntry.remove(success, fail);\n        }\n      });\n    }\n  });\n};\n\n\nexports.exists = function(path, callback) {\n  var fail = wrapFail(callback);\n\n  fs.getFile(path, {\n    // Don't create the file, just look for it\n    create: false\n  }, function(err) {\n    // See https://www.chromestatus.com/features/6687420359639040.\n    if (err &&\n      ((window.FileError && err.code === 1) ||\n      (err.name === 'NotFoundError'))) { // NOT FOUND\n      // If the file isn't found we don't want an error, pass false!\n      callback(false);\n    } else if (err) {\n      // An actual error occured, pass it along\n      fail(err);\n    } else {\n      callback(true);\n    }\n  });\n};\n\n\nexports.stat = function(path, callback) {\n  var success = wrapSuccess(callback)\n    , fail = wrapFail(callback)\n    , fn = fs.getFile;\n\n  // TODO: Perhaps check for folder AND file instead, use whichever exists\n  if (utils.isDirectory(path)) {\n    fn = fs.getDirectory;\n  }\n\n  fn(path, function(err, res) {\n    if (err) {\n      fail(err);\n    } else {\n      res.getMetadata(success, fail);\n    }\n  });\n};\n\n\n/**\n * Initialise the file system component for use.\n * @param {Number}     [quota]\n * @param {Function}   callback\n */\nexports.init = function(bytes, callback) {\n  fs.init(bytes, function(err) {\n    if (err) {\n      callback(err, null);\n    } else {\n      fs.getInstance(function(err /*, instance */) {\n        callback(err, null);\n      });\n    }\n  });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaHRtbDUtZnMvc3JjL2FwaS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9odG1sNS1mcy9zcmMvYXBpLmpzPzhjNGUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJylcbiAgLCBwYXRobSA9IHJlcXVpcmUoJ3BhdGgnKVxuICAsIGZzID0gcmVxdWlyZSgnLi9maWxlU3lzdGVtJyk7XG5cbnZhciB3cmFwU3VjY2VzcyA9IHV0aWxzLndyYXBTdWNjZXNzXG4gICwgd3JhcEZhaWwgPSB1dGlscy53cmFwRmFpbDtcblxuZXhwb3J0cy5nZXRGc0luc3RhbmNlID0gZnMuZ2V0SW5zdGFuY2U7XG5cbmV4cG9ydHMuYXBwZW5kRmlsZSA9IGZ1bmN0aW9uKHBhdGgsIGRhdGEsIGNhbGxiYWNrKSB7XG4gIGZzLndyaXRlRmlsZShwYXRoLCBkYXRhLCBjYWxsYmFjaywgdHJ1ZSk7XG59O1xuXG5cbmV4cG9ydHMud3JpdGVGaWxlID0gZnVuY3Rpb24ocGF0aCwgZGF0YSwgY2FsbGJhY2spIHtcbiAgZnMud3JpdGVGaWxlKHBhdGgsIGRhdGEsIGNhbGxiYWNrLCBmYWxzZSk7XG59O1xuXG5cbmV4cG9ydHMucmVhZEZpbGUgPSBmdW5jdGlvbihwYXRoLCBvcHRzLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIG9wdHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IG9wdHM7XG4gICAgb3B0cyA9IHtcbiAgICAgIGVuY29kaW5nOiAndXRmOCdcbiAgICB9O1xuICB9XG5cbiAgdmFyIHN1Y2Nlc3MgPSB3cmFwU3VjY2VzcyhjYWxsYmFjaylcbiAgICAsIGZhaWwgPSB3cmFwRmFpbChjYWxsYmFjayk7XG5cbiAgZnMuZ2V0RmlsZShwYXRoLCBmdW5jdGlvbihlcnIsIGZpbGVFbnRyeSkge1xuICAgIGZpbGVFbnRyeS5maWxlKGZ1bmN0aW9uKGZpbGUpIHtcbiAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuXG4gICAgICByZWFkZXIub25sb2FkZW5kID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgIHN1Y2Nlc3MoZXZ0LnRhcmdldC5yZXN1bHQpO1xuICAgICAgfTtcblxuICAgICAgcmVhZGVyLm9uZXJyb3IgPSBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgZmFpbChlcnIpO1xuICAgICAgfTtcblxuICAgICAgaWYgKG9wdHMuZW5jb2RpbmcgPT09ICd1dGY4Jykge1xuICAgICAgICByZWFkZXIucmVhZEFzVGV4dChmaWxlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpO1xuICAgICAgfVxuICAgIH0sIGZhaWwpO1xuICB9KTtcbn07XG5cblxuZXhwb3J0cy51bmxpbmsgPSBmdW5jdGlvbihwYXRoLCBjYWxsYmFjaykge1xuICB2YXIgc3VjY2VzcyA9IHdyYXBTdWNjZXNzKGNhbGxiYWNrKVxuICAgICwgZmFpbCA9IHdyYXBGYWlsKGNhbGxiYWNrKTtcblxuICBmcy5nZXRGaWxlKHBhdGgsIGZ1bmN0aW9uKGVyciwgZmlsZSkge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGZhaWwoZXJyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZmlsZS5yZW1vdmUoc3VjY2VzcywgZmFpbCk7XG4gICAgfVxuICB9KTtcbn07XG5cblxuZXhwb3J0cy5yZWFkZGlyID0gZnVuY3Rpb24ocGF0aCwgY2FsbGJhY2spIHtcbiAgdmFyIHN1Y2Nlc3MgPSB3cmFwU3VjY2VzcyhjYWxsYmFjaylcbiAgICAsIGZhaWwgPSB3cmFwRmFpbChjYWxsYmFjayk7XG5cbiAgZnMuZ2V0RGlyZWN0b3J5KHBhdGgsIGZ1bmN0aW9uKGVyciwgZGlyRW50cnkpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBmYWlsKGVycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBkaXJlY3RvcnlSZWFkZXIgPSBkaXJFbnRyeS5jcmVhdGVSZWFkZXIoKTtcbiAgICAgIGRpcmVjdG9yeVJlYWRlci5yZWFkRW50cmllcyhzdWNjZXNzLCBmYWlsKTtcbiAgICB9XG4gIH0pO1xufTtcblxuXG5leHBvcnRzLm1rZGlyID0gZnVuY3Rpb24ocGF0aCwgY2FsbGJhY2spIHtcbiAgdmFyIG5ld0ZvbGRlck5hbWUgPSBwYXRobS5iYXNlbmFtZShwYXRoKVxuICAgICwgYmFzZVBhdGggPSBwYXRobS5kaXJuYW1lKHBhdGgpXG4gICAgLCBzdWNjZXNzID0gdXRpbHMud3JhcFN1Y2Nlc3MoY2FsbGJhY2spXG4gICAgLCBmYWlsID0gdXRpbHMud3JhcEZhaWwoY2FsbGJhY2spXG4gICAgLCBvcHRzID0ge1xuICAgICAgY3JlYXRlOiB0cnVlLFxuICAgICAgZXhjbHVzaXZlOiB0cnVlXG4gICAgfTtcblxuICBpZiAoYmFzZVBhdGggPT09ICcuJykge1xuICAgIGZzLmdldERpcmVjdG9yeShuZXdGb2xkZXJOYW1lLCBvcHRzLCBjYWxsYmFjayk7XG4gIH0gZWxzZSB7XG4gICAgZnMuZ2V0RGlyZWN0b3J5KGJhc2VQYXRoLCBmdW5jdGlvbiAoZXJyLCBkaXIpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgY2FsbGJhY2soZXJyLCBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRpci5nZXREaXJlY3RvcnkobmV3Rm9sZGVyTmFtZSwgb3B0cywgc3VjY2VzcywgZmFpbCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBSZW1vdmUgYSBkaXJlY3RvcnkuXG4gKiBUaGUgRmlsZVN5c3RlbSBBUEkgZXhwZWN0cyBkaXJlY3RvcmllcyB0byBiZSBlbXB0eSBidXQgcmV0dXJucyBhXG4gKiBub24taW5mb3JtYXRpdmUgZXJyb3Igb24gQW5kcm9pZCBhbmQgcG9zc2libHkgaU9TIHNvIHdlIGNoZWNrIGhlcmVcbiAqIHRvIGVuc3VyZSB1c2VycyBrbm93IHdoeSBkaXJlY3RvcnkgZGVsZXRlcyBtaWdodCBmYWlsLlxuICogQHBhcmFtICB7U3RyaW5nfSAgIHBhdGhcbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBjYWxsYmFja1xuICovXG5leHBvcnRzLnJtZGlyID0gZnVuY3Rpb24ocGF0aCwgY2FsbGJhY2spIHtcbiAgdmFyIHN1Y2Nlc3MgPSB3cmFwU3VjY2VzcyhjYWxsYmFjaylcbiAgICAsIGZhaWwgPSB3cmFwRmFpbChjYWxsYmFjayk7XG5cbiAgdGhpcy5yZWFkZGlyKHBhdGgsIGZ1bmN0aW9uKGVyciwgbGlzdCkge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGZhaWwoZXJyKTtcbiAgICB9IGVsc2UgaWYgKGxpc3QgJiYgbGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICBmYWlsKCdFTk9URU1QVFk6IERpcmVjdG9yeSBtdXN0IGJlIGVtcHR5Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZzLmdldERpcmVjdG9yeShwYXRoLCBmdW5jdGlvbihlcnIsIGRpckVudHJ5KSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBmYWlsKGVycik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGlyRW50cnkucmVtb3ZlKHN1Y2Nlc3MsIGZhaWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xufTtcblxuXG5leHBvcnRzLmV4aXN0cyA9IGZ1bmN0aW9uKHBhdGgsIGNhbGxiYWNrKSB7XG4gIHZhciBmYWlsID0gd3JhcEZhaWwoY2FsbGJhY2spO1xuXG4gIGZzLmdldEZpbGUocGF0aCwge1xuICAgIC8vIERvbid0IGNyZWF0ZSB0aGUgZmlsZSwganVzdCBsb29rIGZvciBpdFxuICAgIGNyZWF0ZTogZmFsc2VcbiAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgLy8gU2VlIGh0dHBzOi8vd3d3LmNocm9tZXN0YXR1cy5jb20vZmVhdHVyZXMvNjY4NzQyMDM1OTYzOTA0MC5cbiAgICBpZiAoZXJyICYmXG4gICAgICAoKHdpbmRvdy5GaWxlRXJyb3IgJiYgZXJyLmNvZGUgPT09IDEpIHx8XG4gICAgICAoZXJyLm5hbWUgPT09ICdOb3RGb3VuZEVycm9yJykpKSB7IC8vIE5PVCBGT1VORFxuICAgICAgLy8gSWYgdGhlIGZpbGUgaXNuJ3QgZm91bmQgd2UgZG9uJ3Qgd2FudCBhbiBlcnJvciwgcGFzcyBmYWxzZSFcbiAgICAgIGNhbGxiYWNrKGZhbHNlKTtcbiAgICB9IGVsc2UgaWYgKGVycikge1xuICAgICAgLy8gQW4gYWN0dWFsIGVycm9yIG9jY3VyZWQsIHBhc3MgaXQgYWxvbmdcbiAgICAgIGZhaWwoZXJyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgfVxuICB9KTtcbn07XG5cblxuZXhwb3J0cy5zdGF0ID0gZnVuY3Rpb24ocGF0aCwgY2FsbGJhY2spIHtcbiAgdmFyIHN1Y2Nlc3MgPSB3cmFwU3VjY2VzcyhjYWxsYmFjaylcbiAgICAsIGZhaWwgPSB3cmFwRmFpbChjYWxsYmFjaylcbiAgICAsIGZuID0gZnMuZ2V0RmlsZTtcblxuICAvLyBUT0RPOiBQZXJoYXBzIGNoZWNrIGZvciBmb2xkZXIgQU5EIGZpbGUgaW5zdGVhZCwgdXNlIHdoaWNoZXZlciBleGlzdHNcbiAgaWYgKHV0aWxzLmlzRGlyZWN0b3J5KHBhdGgpKSB7XG4gICAgZm4gPSBmcy5nZXREaXJlY3Rvcnk7XG4gIH1cblxuICBmbihwYXRoLCBmdW5jdGlvbihlcnIsIHJlcykge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGZhaWwoZXJyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzLmdldE1ldGFkYXRhKHN1Y2Nlc3MsIGZhaWwpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5cbi8qKlxuICogSW5pdGlhbGlzZSB0aGUgZmlsZSBzeXN0ZW0gY29tcG9uZW50IGZvciB1c2UuXG4gKiBAcGFyYW0ge051bWJlcn0gICAgIFtxdW90YV1cbiAqIEBwYXJhbSB7RnVuY3Rpb259ICAgY2FsbGJhY2tcbiAqL1xuZXhwb3J0cy5pbml0ID0gZnVuY3Rpb24oYnl0ZXMsIGNhbGxiYWNrKSB7XG4gIGZzLmluaXQoYnl0ZXMsIGZ1bmN0aW9uKGVycikge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGNhbGxiYWNrKGVyciwgbnVsbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZzLmdldEluc3RhbmNlKGZ1bmN0aW9uKGVyciAvKiwgaW5zdGFuY2UgKi8pIHtcbiAgICAgICAgY2FsbGJhY2soZXJyLCBudWxsKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/html5-fs/src/api.js\n");

/***/ }),

/***/ "./node_modules/html5-fs/src/fileSystem.js":
/*!*************************************************!*\
  !*** ./node_modules/html5-fs/src/fileSystem.js ***!
  \*************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./utils */ \"./node_modules/html5-fs/src/utils.js\")\n  , pathm = __webpack_require__(/*! path */ \"./node_modules/path-browserify/index.js\");\n\nvar DEFAULT_QUOTA = (10 * 1024 * 1024); // 10MB\n\nvar fileSystem = null;\n\n/**\n * Get a FileSystem instance.\n * @param {Function} callback\n */\nexports.getInstance = function(callback) {\n  if (fileSystem) {\n    callback(null, fileSystem);\n  } else {\n    init(null, callback);\n  }\n};\n\n\n/**\n * Initialises access to browser File System\n * @param {Number}      bytes\n * @param {Function}    callback\n */\nvar init = exports.init = function(bytes, callback) {\n  requestQuota(bytes, function(err, grantedBytes) {\n    if (err) {\n      return callback(err, null);\n    } else {\n      requestFileSystem(grantedBytes, function(instance) {\n        fileSystem = instance;\n        callback(null, grantedBytes);\n      }, function(err) {\n        callback(err, null);\n      });\n    }\n  });\n};\n\n\n/**\n * Write data to a file optionally appending it.\n * @param {String}      path\n * @param {Mixed}       data\n * @param {Function}    callback\n * @param {Boolean}     append\n */\nexports.writeFile = function(path, data, callback, append) {\n  var fail = utils.wrapFail(callback)\n    , success = utils.wrapSuccess(callback);\n\n  this.getFile(path, {\n    create: true,\n    exclusive: false\n  }, function(err, file) {\n    if (err) {\n      return callback(err, null);\n    } else {\n      file.createWriter(function(writer) {\n        writer.onwrite = function(/*evt*/) {\n          success(file.toURL());\n        };\n\n        writer.onerror = function(evt) {\n          fail(evt.target.error);\n        };\n\n        if (append === true) {\n          writer.seek(writer.length);\n        }\n\n        if (utils.isMobile()) {\n          writer.write(data);\n        } else {\n          writer.write(new Blob([data]));\n        }\n      }, fail);\n    }\n  });\n};\n\n\n/**\n * Get a directory specified by path.\n * By default if the dir does not exist it is not created.\n * @param {String}      path\n * @param {Object}      [opts]\n * @param {Function}    callback\n */\nexports.getDirectory = function(path, opts, callback) {\n  if (!callback) {\n    callback = opts;\n    opts = {\n      create: false\n    };\n  }\n\n  var success = utils.wrapSuccess(callback)\n    , fail = utils.wrapFail(callback);\n\n  fileSystem.root.getDirectory(path, opts, success, fail);\n};\n\n\n/**\n * Get a file at a specified path.\n * By default if the file does not exist it is not created.\n * @param {String}      path\n * @param {Object}      [opts]\n * @param {Function}    callback\n */\nexports.getFile = function(path, opts, callback) {\n  if (!callback) {\n    callback = opts;\n    opts = {\n      create: false\n    };\n  }\n\n  var fileName = pathm.basename(path)\n    , basePath = pathm.dirname(path)\n    , success = utils.wrapSuccess(callback)\n    , fail = utils.wrapFail(callback);\n\n  function doGet (dirRef) {\n    dirRef.getFile(fileName, opts, success, fail);\n  }\n\n  if (basePath === '.') {\n    // File is in root directory\n    doGet(fileSystem.root);\n  } else {\n    // Need to get container directory ref for the requested file\n    this.getDirectory(basePath, opts, function (err, dir) {\n      if (err) {\n        callback(err, null);\n      } else {\n        doGet(dir);\n      }\n    });\n  }\n};\n\n\n/**\n * Request access to the file system.\n * This is called only after quota is granted.\n * @param {Number}       bytes\n * @param {Function}     success\n * @param {Function}     fail\n */\nfunction requestFileSystem(bytes, success, fail) {\n  // These are in order of preference due to some being deprecated\n  if (window.navigator.webkitRequestFileSystem) {\n    window.navigator.webkitRequestFileSystem(bytes, success, fail);\n  } else if (window.requestFileSystem) {\n    window.requestFileSystem(\n      window.LocalFileSystem.PERSISTENT,\n      bytes,\n      success,\n      fail\n    );\n  } else if (window.webkitRequestFileSystem) {\n    window.webkitRequestFileSystem(\n      window.PERSISTENT,\n      bytes,\n      success,\n      fail\n    );\n  } else {\n    fail('NO_SUPPORT');\n  }\n}\n\n\n/**\n * Request a quota from the FileSystem.\n * @param {Number}     bytes\n * @param {Function}   callback\n */\nfunction requestQuota(quota, callback) {\n  // Allow user overide the default quota\n  quota = quota || DEFAULT_QUOTA;\n\n  function success(bytes) {\n    callback(null, bytes);\n  }\n\n  function fail(err) {\n    callback(err, null);\n  }\n\n  // These are in order of preference due to some being deprecated\n  if (navigator.webkitPersistentStorage &&\n      navigator.webkitPersistentStorage.requestQuota) {\n    navigator.webkitPersistentStorage.requestQuota(quota, success, fail);\n  } else if (window.webkitStorageInfo &&\n      window.webkitStorageInfo.requestQuota) {\n    window.webkitStorageInfo.requestQuota(\n      window.PERSISTENT,\n      quota,\n      success,\n      fail\n    );\n  } else if (window.requestFileSystem) {\n    // PhoneGap apps should request a 0 quota\n    if (utils.isPhoneGap() === true) {\n      quota = 0;\n    }\n\n    success(quota);\n  } else {\n    fail('NO_SUPPORT');\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/html5-fs/src/fileSystem.js\n");

/***/ }),

/***/ "./node_modules/html5-fs/src/utils.js":
/*!********************************************!*\
  !*** ./node_modules/html5-fs/src/utils.js ***!
  \********************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Detect is the device a mobile device.\n * @return {Boolean}\n */\nexports.isMobile = function() {\n  var ua = window.navigator.userAgent;\n  return (ua.match(/Android|iPad|iPhone|iPod|Windows Phone/) !== null);\n};\n\n\n/**\n * Determine if this is a PhoneGap application.\n * @return {Boolean}\n */\nexports.isPhoneGap = function() {\n  // TODO: Improve this...\n  var proto = window.location.protocol;\n  return (this.isMobile() && proto.indexOf('file') !== -1);\n};\n\n\n/**\n * Determine if FileSystem is supported.\n * @return {Boolean}\n */\nexports.supportsFileSystem = function() {\n  if (this.isPhoneGap() === true) {\n    return true;\n  }\n\n  // TODO: Test this works, Opera (WebKit) and Chrome\n  return window.navigator.userAgent.match(/Chrome|Opera/);\n};\n\n\n/**\n * Wrap a callback for use as a success callback.\n * @param    {Function} callback\n * @return   {Function}\n */\nexports.wrapSuccess = function(callback) {\n  return function() {\n    var args = [null].concat(Array.prototype.slice.call(arguments));\n\n    callback.apply(callback, args);\n  };\n};\n\n\n/**\n * Wrap a callback for use as a failure callback.\n * @param    {Function} callback\n * @return   {Function}\n */\nexports.wrapFail = function(callback) {\n  return function() {\n    var args = Array.prototype.slice.call(arguments)\n      , e = args[0];\n\n    callback.apply(callback, [e, null]);\n  };\n};\n\n\n/**\n * Check is provided path a directory.\n * @param  {String} path\n * @return {Boolean}\n */\nexports.isDirectory = function(path) {\n  return (path.lastIndexOf('/') === (path.length - 1));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaHRtbDUtZnMvc3JjL3V0aWxzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2h0bWw1LWZzL3NyYy91dGlscy5qcz80MDE2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlY3QgaXMgdGhlIGRldmljZSBhIG1vYmlsZSBkZXZpY2UuXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5leHBvcnRzLmlzTW9iaWxlID0gZnVuY3Rpb24oKSB7XG4gIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICByZXR1cm4gKHVhLm1hdGNoKC9BbmRyb2lkfGlQYWR8aVBob25lfGlQb2R8V2luZG93cyBQaG9uZS8pICE9PSBudWxsKTtcbn07XG5cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgdGhpcyBpcyBhIFBob25lR2FwIGFwcGxpY2F0aW9uLlxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuZXhwb3J0cy5pc1Bob25lR2FwID0gZnVuY3Rpb24oKSB7XG4gIC8vIFRPRE86IEltcHJvdmUgdGhpcy4uLlxuICB2YXIgcHJvdG8gPSB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2w7XG4gIHJldHVybiAodGhpcy5pc01vYmlsZSgpICYmIHByb3RvLmluZGV4T2YoJ2ZpbGUnKSAhPT0gLTEpO1xufTtcblxuXG4vKipcbiAqIERldGVybWluZSBpZiBGaWxlU3lzdGVtIGlzIHN1cHBvcnRlZC5cbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmV4cG9ydHMuc3VwcG9ydHNGaWxlU3lzdGVtID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLmlzUGhvbmVHYXAoKSA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gVE9ETzogVGVzdCB0aGlzIHdvcmtzLCBPcGVyYSAoV2ViS2l0KSBhbmQgQ2hyb21lXG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvQ2hyb21lfE9wZXJhLyk7XG59O1xuXG5cbi8qKlxuICogV3JhcCBhIGNhbGxiYWNrIGZvciB1c2UgYXMgYSBzdWNjZXNzIGNhbGxiYWNrLlxuICogQHBhcmFtICAgIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4gICB7RnVuY3Rpb259XG4gKi9cbmV4cG9ydHMud3JhcFN1Y2Nlc3MgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZ3MgPSBbbnVsbF0uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuXG4gICAgY2FsbGJhY2suYXBwbHkoY2FsbGJhY2ssIGFyZ3MpO1xuICB9O1xufTtcblxuXG4vKipcbiAqIFdyYXAgYSBjYWxsYmFjayBmb3IgdXNlIGFzIGEgZmFpbHVyZSBjYWxsYmFjay5cbiAqIEBwYXJhbSAgICB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuICAge0Z1bmN0aW9ufVxuICovXG5leHBvcnRzLndyYXBGYWlsID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKVxuICAgICAgLCBlID0gYXJnc1swXTtcblxuICAgIGNhbGxiYWNrLmFwcGx5KGNhbGxiYWNrLCBbZSwgbnVsbF0pO1xuICB9O1xufTtcblxuXG4vKipcbiAqIENoZWNrIGlzIHByb3ZpZGVkIHBhdGggYSBkaXJlY3RvcnkuXG4gKiBAcGFyYW0gIHtTdHJpbmd9IHBhdGhcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmV4cG9ydHMuaXNEaXJlY3RvcnkgPSBmdW5jdGlvbihwYXRoKSB7XG4gIHJldHVybiAocGF0aC5sYXN0SW5kZXhPZignLycpID09PSAocGF0aC5sZW5ndGggLSAxKSk7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/html5-fs/src/utils.js\n");

/***/ }),

/***/ "./node_modules/is-callable/index.js":
/*!*******************************************!*\
  !*** ./node_modules/is-callable/index.js ***!
  \*******************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar fnToStr = Function.prototype.toString;\n\nvar constructorRegex = /^\\s*class\\b/;\nvar isES6ClassFn = function isES6ClassFunction(value) {\n\ttry {\n\t\tvar fnStr = fnToStr.call(value);\n\t\treturn constructorRegex.test(fnStr);\n\t} catch (e) {\n\t\treturn false; // not a function\n\t}\n};\n\nvar tryFunctionObject = function tryFunctionToStr(value) {\n\ttry {\n\t\tif (isES6ClassFn(value)) { return false; }\n\t\tfnToStr.call(value);\n\t\treturn true;\n\t} catch (e) {\n\t\treturn false;\n\t}\n};\nvar toStr = Object.prototype.toString;\nvar fnClass = '[object Function]';\nvar genClass = '[object GeneratorFunction]';\nvar hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';\n\nmodule.exports = function isCallable(value) {\n\tif (!value) { return false; }\n\tif (typeof value !== 'function' && typeof value !== 'object') { return false; }\n\tif (typeof value === 'function' && !value.prototype) { return true; }\n\tif (hasToStringTag) { return tryFunctionObject(value); }\n\tif (isES6ClassFn(value)) { return false; }\n\tvar strClass = toStr.call(value);\n\treturn strClass === fnClass || strClass === genClass;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXMtY2FsbGFibGUvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtY2FsbGFibGUvaW5kZXguanM/MjFkMCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBmblRvU3RyID0gRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nO1xuXG52YXIgY29uc3RydWN0b3JSZWdleCA9IC9eXFxzKmNsYXNzXFxiLztcbnZhciBpc0VTNkNsYXNzRm4gPSBmdW5jdGlvbiBpc0VTNkNsYXNzRnVuY3Rpb24odmFsdWUpIHtcblx0dHJ5IHtcblx0XHR2YXIgZm5TdHIgPSBmblRvU3RyLmNhbGwodmFsdWUpO1xuXHRcdHJldHVybiBjb25zdHJ1Y3RvclJlZ2V4LnRlc3QoZm5TdHIpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlOyAvLyBub3QgYSBmdW5jdGlvblxuXHR9XG59O1xuXG52YXIgdHJ5RnVuY3Rpb25PYmplY3QgPSBmdW5jdGlvbiB0cnlGdW5jdGlvblRvU3RyKHZhbHVlKSB7XG5cdHRyeSB7XG5cdFx0aWYgKGlzRVM2Q2xhc3NGbih2YWx1ZSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0Zm5Ub1N0ci5jYWxsKHZhbHVlKTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufTtcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgZm5DbGFzcyA9ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG52YXIgZ2VuQ2xhc3MgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nO1xudmFyIGhhc1RvU3RyaW5nVGFnID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLnRvU3RyaW5nVGFnID09PSAnc3ltYm9sJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbGxhYmxlKHZhbHVlKSB7XG5cdGlmICghdmFsdWUpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJiAhdmFsdWUucHJvdG90eXBlKSB7IHJldHVybiB0cnVlOyB9XG5cdGlmIChoYXNUb1N0cmluZ1RhZykgeyByZXR1cm4gdHJ5RnVuY3Rpb25PYmplY3QodmFsdWUpOyB9XG5cdGlmIChpc0VTNkNsYXNzRm4odmFsdWUpKSB7IHJldHVybiBmYWxzZTsgfVxuXHR2YXIgc3RyQ2xhc3MgPSB0b1N0ci5jYWxsKHZhbHVlKTtcblx0cmV0dXJuIHN0ckNsYXNzID09PSBmbkNsYXNzIHx8IHN0ckNsYXNzID09PSBnZW5DbGFzcztcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/is-callable/index.js\n");

/***/ }),

/***/ "./node_modules/is-function/index.js":
/*!*******************************************!*\
  !*** ./node_modules/is-function/index.js ***!
  \*******************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

eval("module.exports = isFunction\n\nvar toString = Object.prototype.toString\n\nfunction isFunction (fn) {\n  var string = toString.call(fn)\n  return string === '[object Function]' ||\n    (typeof fn === 'function' && string !== '[object RegExp]') ||\n    (typeof window !== 'undefined' &&\n     // IE8 and below\n     (fn === window.setTimeout ||\n      fn === window.alert ||\n      fn === window.confirm ||\n      fn === window.prompt))\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXMtZnVuY3Rpb24vaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtZnVuY3Rpb24vaW5kZXguanM/ODM2MiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGlzRnVuY3Rpb25cblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uIChmbikge1xuICB2YXIgc3RyaW5nID0gdG9TdHJpbmcuY2FsbChmbilcbiAgcmV0dXJuIHN0cmluZyA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJyB8fFxuICAgICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicgJiYgc3RyaW5nICE9PSAnW29iamVjdCBSZWdFeHBdJykgfHxcbiAgICAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgLy8gSUU4IGFuZCBiZWxvd1xuICAgICAoZm4gPT09IHdpbmRvdy5zZXRUaW1lb3V0IHx8XG4gICAgICBmbiA9PT0gd2luZG93LmFsZXJ0IHx8XG4gICAgICBmbiA9PT0gd2luZG93LmNvbmZpcm0gfHxcbiAgICAgIGZuID09PSB3aW5kb3cucHJvbXB0KSlcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/is-function/index.js\n");

/***/ }),

/***/ "./node_modules/parse-headers/parse-headers.js":
/*!*****************************************************!*\
  !*** ./node_modules/parse-headers/parse-headers.js ***!
  \*****************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("var trim = __webpack_require__(/*! trim */ \"./node_modules/trim/index.js\")\n  , forEach = __webpack_require__(/*! for-each */ \"./node_modules/for-each/index.js\")\n  , isArray = function(arg) {\n      return Object.prototype.toString.call(arg) === '[object Array]';\n    }\n\nmodule.exports = function (headers) {\n  if (!headers)\n    return {}\n\n  var result = {}\n\n  forEach(\n      trim(headers).split('\\n')\n    , function (row) {\n        var index = row.indexOf(':')\n          , key = trim(row.slice(0, index)).toLowerCase()\n          , value = trim(row.slice(index + 1))\n\n        if (typeof(result[key]) === 'undefined') {\n          result[key] = value\n        } else if (isArray(result[key])) {\n          result[key].push(value)\n        } else {\n          result[key] = [ result[key], value ]\n        }\n      }\n  )\n\n  return result\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGFyc2UtaGVhZGVycy9wYXJzZS1oZWFkZXJzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhcnNlLWhlYWRlcnMvcGFyc2UtaGVhZGVycy5qcz82NDQ0Il0sInNvdXJjZXNDb250ZW50IjpbInZhciB0cmltID0gcmVxdWlyZSgndHJpbScpXG4gICwgZm9yRWFjaCA9IHJlcXVpcmUoJ2Zvci1lYWNoJylcbiAgLCBpc0FycmF5ID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG4gICAgfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChoZWFkZXJzKSB7XG4gIGlmICghaGVhZGVycylcbiAgICByZXR1cm4ge31cblxuICB2YXIgcmVzdWx0ID0ge31cblxuICBmb3JFYWNoKFxuICAgICAgdHJpbShoZWFkZXJzKS5zcGxpdCgnXFxuJylcbiAgICAsIGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gcm93LmluZGV4T2YoJzonKVxuICAgICAgICAgICwga2V5ID0gdHJpbShyb3cuc2xpY2UoMCwgaW5kZXgpKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgLCB2YWx1ZSA9IHRyaW0ocm93LnNsaWNlKGluZGV4ICsgMSkpXG5cbiAgICAgICAgaWYgKHR5cGVvZihyZXN1bHRba2V5XSkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSB2YWx1ZVxuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkocmVzdWx0W2tleV0pKSB7XG4gICAgICAgICAgcmVzdWx0W2tleV0ucHVzaCh2YWx1ZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IFsgcmVzdWx0W2tleV0sIHZhbHVlIF1cbiAgICAgICAgfVxuICAgICAgfVxuICApXG5cbiAgcmV0dXJuIHJlc3VsdFxufSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/parse-headers/parse-headers.js\n");

/***/ }),

/***/ "./node_modules/path-browserify/index.js":
/*!***********************************************!*\
  !*** ./node_modules/path-browserify/index.js ***!
  \***********************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/path-browserify/index.js\n");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcz9mMjhjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/process/browser.js\n");

/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc2V0aW1tZWRpYXRlL3NldEltbWVkaWF0ZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zZXRpbW1lZGlhdGUvc2V0SW1tZWRpYXRlLmpzPzYwMTciXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIChnbG9iYWwsIHVuZGVmaW5lZCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgaWYgKGdsb2JhbC5zZXRJbW1lZGlhdGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBuZXh0SGFuZGxlID0gMTsgLy8gU3BlYyBzYXlzIGdyZWF0ZXIgdGhhbiB6ZXJvXG4gICAgdmFyIHRhc2tzQnlIYW5kbGUgPSB7fTtcbiAgICB2YXIgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgdmFyIGRvYyA9IGdsb2JhbC5kb2N1bWVudDtcbiAgICB2YXIgcmVnaXN0ZXJJbW1lZGlhdGU7XG5cbiAgICBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoY2FsbGJhY2spIHtcbiAgICAgIC8vIENhbGxiYWNrIGNhbiBlaXRoZXIgYmUgYSBmdW5jdGlvbiBvciBhIHN0cmluZ1xuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNhbGxiYWNrID0gbmV3IEZ1bmN0aW9uKFwiXCIgKyBjYWxsYmFjayk7XG4gICAgICB9XG4gICAgICAvLyBDb3B5IGZ1bmN0aW9uIGFyZ3VtZW50c1xuICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpICsgMV07XG4gICAgICB9XG4gICAgICAvLyBTdG9yZSBhbmQgcmVnaXN0ZXIgdGhlIHRhc2tcbiAgICAgIHZhciB0YXNrID0geyBjYWxsYmFjazogY2FsbGJhY2ssIGFyZ3M6IGFyZ3MgfTtcbiAgICAgIHRhc2tzQnlIYW5kbGVbbmV4dEhhbmRsZV0gPSB0YXNrO1xuICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUobmV4dEhhbmRsZSk7XG4gICAgICByZXR1cm4gbmV4dEhhbmRsZSsrO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGhhbmRsZSkge1xuICAgICAgICBkZWxldGUgdGFza3NCeUhhbmRsZVtoYW5kbGVdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJ1bih0YXNrKSB7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IHRhc2suY2FsbGJhY2s7XG4gICAgICAgIHZhciBhcmdzID0gdGFzay5hcmdzO1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJ1bklmUHJlc2VudChoYW5kbGUpIHtcbiAgICAgICAgLy8gRnJvbSB0aGUgc3BlYzogXCJXYWl0IHVudGlsIGFueSBpbnZvY2F0aW9ucyBvZiB0aGlzIGFsZ29yaXRobSBzdGFydGVkIGJlZm9yZSB0aGlzIG9uZSBoYXZlIGNvbXBsZXRlZC5cIlxuICAgICAgICAvLyBTbyBpZiB3ZSdyZSBjdXJyZW50bHkgcnVubmluZyBhIHRhc2ssIHdlJ2xsIG5lZWQgdG8gZGVsYXkgdGhpcyBpbnZvY2F0aW9uLlxuICAgICAgICBpZiAoY3VycmVudGx5UnVubmluZ0FUYXNrKSB7XG4gICAgICAgICAgICAvLyBEZWxheSBieSBkb2luZyBhIHNldFRpbWVvdXQuIHNldEltbWVkaWF0ZSB3YXMgdHJpZWQgaW5zdGVhZCwgYnV0IGluIEZpcmVmb3ggNyBpdCBnZW5lcmF0ZWQgYVxuICAgICAgICAgICAgLy8gXCJ0b28gbXVjaCByZWN1cnNpb25cIiBlcnJvci5cbiAgICAgICAgICAgIHNldFRpbWVvdXQocnVuSWZQcmVzZW50LCAwLCBoYW5kbGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHRhc2sgPSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgICAgICAgICBpZiAodGFzaykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IHRydWU7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcnVuKHRhc2spO1xuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFySW1tZWRpYXRlKGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7IHJ1bklmUHJlc2VudChoYW5kbGUpOyB9KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYW5Vc2VQb3N0TWVzc2FnZSgpIHtcbiAgICAgICAgLy8gVGhlIHRlc3QgYWdhaW5zdCBgaW1wb3J0U2NyaXB0c2AgcHJldmVudHMgdGhpcyBpbXBsZW1lbnRhdGlvbiBmcm9tIGJlaW5nIGluc3RhbGxlZCBpbnNpZGUgYSB3ZWIgd29ya2VyLFxuICAgICAgICAvLyB3aGVyZSBgZ2xvYmFsLnBvc3RNZXNzYWdlYCBtZWFucyBzb21ldGhpbmcgY29tcGxldGVseSBkaWZmZXJlbnQgYW5kIGNhbid0IGJlIHVzZWQgZm9yIHRoaXMgcHVycG9zZS5cbiAgICAgICAgaWYgKGdsb2JhbC5wb3N0TWVzc2FnZSAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcbiAgICAgICAgICAgIHZhciBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBvbGRPbk1lc3NhZ2UgPSBnbG9iYWwub25tZXNzYWdlO1xuICAgICAgICAgICAgZ2xvYmFsLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSBmYWxzZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoXCJcIiwgXCIqXCIpO1xuICAgICAgICAgICAgZ2xvYmFsLm9ubWVzc2FnZSA9IG9sZE9uTWVzc2FnZTtcbiAgICAgICAgICAgIHJldHVybiBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIC8vIEluc3RhbGxzIGFuIGV2ZW50IGhhbmRsZXIgb24gYGdsb2JhbGAgZm9yIHRoZSBgbWVzc2FnZWAgZXZlbnQ6IHNlZVxuICAgICAgICAvLyAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0RPTS93aW5kb3cucG9zdE1lc3NhZ2VcbiAgICAgICAgLy8gKiBodHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS9jb21tcy5odG1sI2Nyb3NzRG9jdW1lbnRNZXNzYWdlc1xuXG4gICAgICAgIHZhciBtZXNzYWdlUHJlZml4ID0gXCJzZXRJbW1lZGlhdGUkXCIgKyBNYXRoLnJhbmRvbSgpICsgXCIkXCI7XG4gICAgICAgIHZhciBvbkdsb2JhbE1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnNvdXJjZSA9PT0gZ2xvYmFsICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGV2ZW50LmRhdGEgPT09IFwic3RyaW5nXCIgJiZcbiAgICAgICAgICAgICAgICBldmVudC5kYXRhLmluZGV4T2YobWVzc2FnZVByZWZpeCkgPT09IDApIHtcbiAgICAgICAgICAgICAgICBydW5JZlByZXNlbnQoK2V2ZW50LmRhdGEuc2xpY2UobWVzc2FnZVByZWZpeC5sZW5ndGgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBvbkdsb2JhbE1lc3NhZ2UsIGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdsb2JhbC5hdHRhY2hFdmVudChcIm9ubWVzc2FnZVwiLCBvbkdsb2JhbE1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShtZXNzYWdlUHJlZml4ICsgaGFuZGxlLCBcIipcIik7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBoYW5kbGUgPSBldmVudC5kYXRhO1xuICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIGNoYW5uZWwucG9ydDIucG9zdE1lc3NhZ2UoaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICB2YXIgaHRtbCA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgYSA8c2NyaXB0PiBlbGVtZW50OyBpdHMgcmVhZHlzdGF0ZWNoYW5nZSBldmVudCB3aWxsIGJlIGZpcmVkIGFzeW5jaHJvbm91c2x5IG9uY2UgaXQgaXMgaW5zZXJ0ZWRcbiAgICAgICAgICAgIC8vIGludG8gdGhlIGRvY3VtZW50LiBEbyBzbywgdGh1cyBxdWV1aW5nIHVwIHRoZSB0YXNrLiBSZW1lbWJlciB0byBjbGVhbiB1cCBvbmNlIGl0J3MgYmVlbiBjYWxsZWQuXG4gICAgICAgICAgICB2YXIgc2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudChoYW5kbGUpO1xuICAgICAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgICAgICAgICBzY3JpcHQgPSBudWxsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSWYgc3VwcG9ydGVkLCB3ZSBzaG91bGQgYXR0YWNoIHRvIHRoZSBwcm90b3R5cGUgb2YgZ2xvYmFsLCBzaW5jZSB0aGF0IGlzIHdoZXJlIHNldFRpbWVvdXQgZXQgYWwuIGxpdmUuXG4gICAgdmFyIGF0dGFjaFRvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihnbG9iYWwpO1xuICAgIGF0dGFjaFRvID0gYXR0YWNoVG8gJiYgYXR0YWNoVG8uc2V0VGltZW91dCA/IGF0dGFjaFRvIDogZ2xvYmFsO1xuXG4gICAgLy8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBlLmcuIGJyb3dzZXJpZnkgZW52aXJvbm1lbnRzLlxuICAgIGlmICh7fS50b1N0cmluZy5jYWxsKGdsb2JhbC5wcm9jZXNzKSA9PT0gXCJbb2JqZWN0IHByb2Nlc3NdXCIpIHtcbiAgICAgICAgLy8gRm9yIE5vZGUuanMgYmVmb3JlIDAuOVxuICAgICAgICBpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChjYW5Vc2VQb3N0TWVzc2FnZSgpKSB7XG4gICAgICAgIC8vIEZvciBub24tSUUxMCBtb2Rlcm4gYnJvd3NlcnNcbiAgICAgICAgaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZ2xvYmFsLk1lc3NhZ2VDaGFubmVsKSB7XG4gICAgICAgIC8vIEZvciB3ZWIgd29ya2Vycywgd2hlcmUgc3VwcG9ydGVkXG4gICAgICAgIGluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGRvYyAmJiBcIm9ucmVhZHlzdGF0ZWNoYW5nZVwiIGluIGRvYy5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpKSB7XG4gICAgICAgIC8vIEZvciBJRSA24oCTOFxuICAgICAgICBpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGb3Igb2xkZXIgYnJvd3NlcnNcbiAgICAgICAgaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbigpO1xuICAgIH1cblxuICAgIGF0dGFjaFRvLnNldEltbWVkaWF0ZSA9IHNldEltbWVkaWF0ZTtcbiAgICBhdHRhY2hUby5jbGVhckltbWVkaWF0ZSA9IGNsZWFySW1tZWRpYXRlO1xufSh0eXBlb2Ygc2VsZiA9PT0gXCJ1bmRlZmluZWRcIiA/IHR5cGVvZiBnbG9iYWwgPT09IFwidW5kZWZpbmVkXCIgPyB0aGlzIDogZ2xvYmFsIDogc2VsZikpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/setimmediate/setImmediate.js\n");

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(/*! setimmediate */ \"./node_modules/setimmediate/setImmediate.js\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzPzUxMTgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHNjb3BlID0gKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsKSB8fFxuICAgICAgICAgICAgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYpIHx8XG4gICAgICAgICAgICB3aW5kb3c7XG52YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJUaW1lb3V0KTtcbn07XG5leHBvcnRzLnNldEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldEludGVydmFsLCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkge1xuICBpZiAodGltZW91dCkge1xuICAgIHRpbWVvdXQuY2xvc2UoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbChzY29wZSwgdGhpcy5faWQpO1xufTtcblxuLy8gRG9lcyBub3Qgc3RhcnQgdGhlIHRpbWUsIGp1c3Qgc2V0cyB1cCB0aGUgbWVtYmVycyBuZWVkZWQuXG5leHBvcnRzLmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0sIG1zZWNzKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSBtc2Vjcztcbn07XG5cbmV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTtcbn07XG5cbmV4cG9ydHMuX3VucmVmQWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcblxuICB2YXIgbXNlY3MgPSBpdGVtLl9pZGxlVGltZW91dDtcbiAgaWYgKG1zZWNzID49IDApIHtcbiAgICBpdGVtLl9pZGxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBvblRpbWVvdXQoKSB7XG4gICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KVxuICAgICAgICBpdGVtLl9vblRpbWVvdXQoKTtcbiAgICB9LCBtc2Vjcyk7XG4gIH1cbn07XG5cbi8vIHNldGltbWVkaWF0ZSBhdHRhY2hlcyBpdHNlbGYgdG8gdGhlIGdsb2JhbCBvYmplY3RcbnJlcXVpcmUoXCJzZXRpbW1lZGlhdGVcIik7XG4vLyBPbiBzb21lIGV4b3RpYyBlbnZpcm9ubWVudHMsIGl0J3Mgbm90IGNsZWFyIHdoaWNoIG9iamVjdCBgc2V0aW1tZWRpYXRlYCB3YXNcbi8vIGFibGUgdG8gaW5zdGFsbCBvbnRvLiAgU2VhcmNoIGVhY2ggcG9zc2liaWxpdHkgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4vLyBgc2V0aW1tZWRpYXRlYCBsaWJyYXJ5LlxuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuc2V0SW1tZWRpYXRlKTtcbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5jbGVhckltbWVkaWF0ZSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/timers-browserify/main.js\n");

/***/ }),

/***/ "./node_modules/trim/index.js":
/*!************************************!*\
  !*** ./node_modules/trim/index.js ***!
  \************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

eval("\nexports = module.exports = trim;\n\nfunction trim(str){\n  return str.replace(/^\\s*|\\s*$/g, '');\n}\n\nexports.left = function(str){\n  return str.replace(/^\\s*/, '');\n};\n\nexports.right = function(str){\n  return str.replace(/\\s*$/, '');\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdHJpbS9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90cmltL2luZGV4LmpzPzQ2YzEiXSwic291cmNlc0NvbnRlbnQiOlsiXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSB0cmltO1xuXG5mdW5jdGlvbiB0cmltKHN0cil7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyp8XFxzKiQvZywgJycpO1xufVxuXG5leHBvcnRzLmxlZnQgPSBmdW5jdGlvbihzdHIpe1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMqLywgJycpO1xufTtcblxuZXhwb3J0cy5yaWdodCA9IGZ1bmN0aW9uKHN0cil7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXFxzKiQvLCAnJyk7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/trim/index.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2dsb2JhbC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanM/Y2QwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSwgZXZhbCkoXCJ0aGlzXCIpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL21vZHVsZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanM/Y2VkMiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/module.js\n");

/***/ }),

/***/ "./node_modules/xhr/index.js":
/*!***********************************!*\
  !*** ./node_modules/xhr/index.js ***!
  \***********************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar window = __webpack_require__(/*! global/window */ \"./node_modules/global/window.js\")\nvar isFunction = __webpack_require__(/*! is-function */ \"./node_modules/is-function/index.js\")\nvar parseHeaders = __webpack_require__(/*! parse-headers */ \"./node_modules/parse-headers/parse-headers.js\")\nvar xtend = __webpack_require__(/*! xtend */ \"./node_modules/xtend/immutable.js\")\n\nmodule.exports = createXHR\n// Allow use of default import syntax in TypeScript\nmodule.exports.default = createXHR;\ncreateXHR.XMLHttpRequest = window.XMLHttpRequest || noop\ncreateXHR.XDomainRequest = \"withCredentials\" in (new createXHR.XMLHttpRequest()) ? createXHR.XMLHttpRequest : window.XDomainRequest\n\nforEachArray([\"get\", \"put\", \"post\", \"patch\", \"head\", \"delete\"], function(method) {\n    createXHR[method === \"delete\" ? \"del\" : method] = function(uri, options, callback) {\n        options = initParams(uri, options, callback)\n        options.method = method.toUpperCase()\n        return _createXHR(options)\n    }\n})\n\nfunction forEachArray(array, iterator) {\n    for (var i = 0; i < array.length; i++) {\n        iterator(array[i])\n    }\n}\n\nfunction isEmpty(obj){\n    for(var i in obj){\n        if(obj.hasOwnProperty(i)) return false\n    }\n    return true\n}\n\nfunction initParams(uri, options, callback) {\n    var params = uri\n\n    if (isFunction(options)) {\n        callback = options\n        if (typeof uri === \"string\") {\n            params = {uri:uri}\n        }\n    } else {\n        params = xtend(options, {uri: uri})\n    }\n\n    params.callback = callback\n    return params\n}\n\nfunction createXHR(uri, options, callback) {\n    options = initParams(uri, options, callback)\n    return _createXHR(options)\n}\n\nfunction _createXHR(options) {\n    if(typeof options.callback === \"undefined\"){\n        throw new Error(\"callback argument missing\")\n    }\n\n    var called = false\n    var callback = function cbOnce(err, response, body){\n        if(!called){\n            called = true\n            options.callback(err, response, body)\n        }\n    }\n\n    function readystatechange() {\n        if (xhr.readyState === 4) {\n            setTimeout(loadFunc, 0)\n        }\n    }\n\n    function getBody() {\n        // Chrome with requestType=blob throws errors arround when even testing access to responseText\n        var body = undefined\n\n        if (xhr.response) {\n            body = xhr.response\n        } else {\n            body = xhr.responseText || getXml(xhr)\n        }\n\n        if (isJson) {\n            try {\n                body = JSON.parse(body)\n            } catch (e) {}\n        }\n\n        return body\n    }\n\n    function errorFunc(evt) {\n        clearTimeout(timeoutTimer)\n        if(!(evt instanceof Error)){\n            evt = new Error(\"\" + (evt || \"Unknown XMLHttpRequest Error\") )\n        }\n        evt.statusCode = 0\n        return callback(evt, failureResponse)\n    }\n\n    // will load the data & process the response in a special response object\n    function loadFunc() {\n        if (aborted) return\n        var status\n        clearTimeout(timeoutTimer)\n        if(options.useXDR && xhr.status===undefined) {\n            //IE8 CORS GET successful response doesn't have a status field, but body is fine\n            status = 200\n        } else {\n            status = (xhr.status === 1223 ? 204 : xhr.status)\n        }\n        var response = failureResponse\n        var err = null\n\n        if (status !== 0){\n            response = {\n                body: getBody(),\n                statusCode: status,\n                method: method,\n                headers: {},\n                url: uri,\n                rawRequest: xhr\n            }\n            if(xhr.getAllResponseHeaders){ //remember xhr can in fact be XDR for CORS in IE\n                response.headers = parseHeaders(xhr.getAllResponseHeaders())\n            }\n        } else {\n            err = new Error(\"Internal XMLHttpRequest Error\")\n        }\n        return callback(err, response, response.body)\n    }\n\n    var xhr = options.xhr || null\n\n    if (!xhr) {\n        if (options.cors || options.useXDR) {\n            xhr = new createXHR.XDomainRequest()\n        }else{\n            xhr = new createXHR.XMLHttpRequest()\n        }\n    }\n\n    var key\n    var aborted\n    var uri = xhr.url = options.uri || options.url\n    var method = xhr.method = options.method || \"GET\"\n    var body = options.body || options.data\n    var headers = xhr.headers = options.headers || {}\n    var sync = !!options.sync\n    var isJson = false\n    var timeoutTimer\n    var failureResponse = {\n        body: undefined,\n        headers: {},\n        statusCode: 0,\n        method: method,\n        url: uri,\n        rawRequest: xhr\n    }\n\n    if (\"json\" in options && options.json !== false) {\n        isJson = true\n        headers[\"accept\"] || headers[\"Accept\"] || (headers[\"Accept\"] = \"application/json\") //Don't override existing accept header declared by user\n        if (method !== \"GET\" && method !== \"HEAD\") {\n            headers[\"content-type\"] || headers[\"Content-Type\"] || (headers[\"Content-Type\"] = \"application/json\") //Don't override existing accept header declared by user\n            body = JSON.stringify(options.json === true ? body : options.json)\n        }\n    }\n\n    xhr.onreadystatechange = readystatechange\n    xhr.onload = loadFunc\n    xhr.onerror = errorFunc\n    // IE9 must have onprogress be set to a unique function.\n    xhr.onprogress = function () {\n        // IE must die\n    }\n    xhr.onabort = function(){\n        aborted = true;\n    }\n    xhr.ontimeout = errorFunc\n    xhr.open(method, uri, !sync, options.username, options.password)\n    //has to be after open\n    if(!sync) {\n        xhr.withCredentials = !!options.withCredentials\n    }\n    // Cannot set timeout with sync request\n    // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly\n    // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent\n    if (!sync && options.timeout > 0 ) {\n        timeoutTimer = setTimeout(function(){\n            if (aborted) return\n            aborted = true//IE9 may still call readystatechange\n            xhr.abort(\"timeout\")\n            var e = new Error(\"XMLHttpRequest timeout\")\n            e.code = \"ETIMEDOUT\"\n            errorFunc(e)\n        }, options.timeout )\n    }\n\n    if (xhr.setRequestHeader) {\n        for(key in headers){\n            if(headers.hasOwnProperty(key)){\n                xhr.setRequestHeader(key, headers[key])\n            }\n        }\n    } else if (options.headers && !isEmpty(options.headers)) {\n        throw new Error(\"Headers cannot be set on an XDomainRequest object\")\n    }\n\n    if (\"responseType\" in options) {\n        xhr.responseType = options.responseType\n    }\n\n    if (\"beforeSend\" in options &&\n        typeof options.beforeSend === \"function\"\n    ) {\n        options.beforeSend(xhr)\n    }\n\n    // Microsoft Edge browser sends \"undefined\" when send is called with undefined value.\n    // XMLHttpRequest spec says to pass null as body to indicate no body\n    // See https://github.com/naugtur/xhr/issues/100.\n    xhr.send(body || null)\n\n    return xhr\n\n\n}\n\nfunction getXml(xhr) {\n    // xhr.responseXML will throw Exception \"InvalidStateError\" or \"DOMException\"\n    // See https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseXML.\n    try {\n        if (xhr.responseType === \"document\") {\n            return xhr.responseXML\n        }\n        var firefoxBugTakenEffect = xhr.responseXML && xhr.responseXML.documentElement.nodeName === \"parsererror\"\n        if (xhr.responseType === \"\" && !firefoxBugTakenEffect) {\n            return xhr.responseXML\n        }\n    } catch (e) {}\n\n    return null\n}\n\nfunction noop() {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/xhr/index.js\n");

/***/ }),

/***/ "./node_modules/xtend/immutable.js":
/*!*****************************************!*\
  !*** ./node_modules/xtend/immutable.js ***!
  \*****************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

eval("module.exports = extend\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction extend() {\n    var target = {}\n\n    for (var i = 0; i < arguments.length; i++) {\n        var source = arguments[i]\n\n        for (var key in source) {\n            if (hasOwnProperty.call(source, key)) {\n                target[key] = source[key]\n            }\n        }\n    }\n\n    return target\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlbmQvaW1tdXRhYmxlLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZW5kL2ltbXV0YWJsZS5qcz81M2E4Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZXh0ZW5kXG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIGV4dGVuZCgpIHtcbiAgICB2YXIgdGFyZ2V0ID0ge31cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV1cblxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/xtend/immutable.js\n");

/***/ })

/******/ });